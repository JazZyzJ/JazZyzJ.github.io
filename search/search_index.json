{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Space!","text":""},{"location":"#this-is-the-homepage-of-jazzyzjs-personal-space","title":"This is the homepage of JazZyzJ's personal space.","text":""},{"location":"#about-me","title":"About me","text":"<p>I am an undergraduate student at Zhejiang University, CKC Honors College, majoring in Computer Science and Technology in Turing Class.</p>"},{"location":"#contact-me","title":"Contact me","text":"<ul> <li>Email:chenzijie040528@gmail.com</li> <li>Github: JazZyzJ</li> </ul>"},{"location":"#purpose-of-this-space","title":"Purpose of this space","text":"<p>I will use this site as a blog to record my learning experience and share my thoughts not only in computer science but also in a wide range of fields.  </p>"},{"location":"notes/Tool_Pool/GNU_Make/","title":"GNU Make","text":"<p>\u5bf9\u4e8e\u5927\u578b\u7684\u9879\u76ee\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u547d\u4ee4\u884c\u4e2d\u4e00\u6761\u4e00\u6761\u5730\u8f93\u5165\u7f16\u8bd1\u547d\u4ee4\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2a\u81ea\u52a8\u5316\u7684\u7f16\u8bd1\u5de5\u5177\uff0c\u8fd9\u4e2a\u5de5\u5177\u5c31\u662f make\u3002</p> <p>\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u7684\u6e90\u6587\u4ef6\u4e0d\u8ba1\u5176\u6570\uff0c\u5e76\u4e14\u6309\u7c7b\u578b\u3001\u529f\u80fd\u3001\u6a21\u5757\u5206\u522b\u653e\u5728\u82e5\u5e72\u4e2a\u76ee\u5f55\u4e2d\uff0cmakefile\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u6765\u6307\u5b9a\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u5148\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u540e\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u751a\u81f3\u4e8e\u8fdb\u884c\u66f4\u590d\u6742\u7684\u529f\u80fd\u64cd\u4f5c\uff0c\u56e0\u4e3amakefile\u5c31\u50cf\u4e00\u4e2aShell\u811a\u672c\u4e00\u6837\uff0c\u5176\u4e2d\u4e5f\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4\uff0c\u7136\u540e\u53ea\u9700\u8981\u4e00\u4e2amake\u547d\u4ee4\uff0cmakefile\u91cc\u7684\u89c4\u5219\u5c31\u4f1a\u81ea\u52a8\u751f\u6548\u3002</p> <p>\u5373\uff1amakefile\u5173\u7cfb\u5230\u6574\u4e2a\u5de5\u7a0b\u7684\u7f16\u8bd1\u89c4\u5219, \u91c7\u7528\u81ea\u52a8\u5316\u7f16\u8bd1</p>"},{"location":"notes/Tool_Pool/GNU_Make/#_1","title":"\u5173\u4e8e\u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u94fe\u63a5","text":"<p>\u6b63\u5e38\u7684\u6587\u4ef6\u5728\u8fdb\u884c\u7f16\u8bd1\u65f6\uff0c\u9700\u8981\u7ecf\u8fc7\u56db\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\u3001\u7f16\u8bd1\u3001\u6c47\u7f16\u548c\u94fe\u63a5\u3002\u800c\u5728makefile\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u56db\u4e2a\u8fc7\u7a0b\u7b80\u5316\u4e3a\u4e24\u4e2a\u8fc7\u7a0b\uff1a 1. \u7f16\u8bd1\uff1a\u5c06\u6240\u6709\u7684.c\u6587\u4ef6\u7f16\u8bd1\u6210.o\u6587\u4ef6 \u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u7684\u662f\u8bed\u6cd5\u7684\u6b63\u786e\uff0c\u51fd\u6570\u4e0e\u53d8\u91cf\u7684\u58f0\u660e\u7684\u6b63\u786e\u3002</p> <ol> <li>\u94fe\u63a5\uff1a\u5c06\u6240\u6709\u7684.o\u6587\u4ef6\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6 \u94fe\u63a5\u65f6\uff0c\u4e3b\u8981\u662f\u94fe\u63a5\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u3002 \u94fe\u63a5\u5668\u5e76\u4e0d\u7ba1\u51fd\u6570\u6240\u5728\u7684\u6e90\u6587\u4ef6\uff0c\u53ea\u7ba1\u51fd\u6570\u7684\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\uff08Object File\uff09\uff0c\u5728\u5927\u591a\u6570\u65f6\u5019\uff0c\u7531\u4e8e\u6e90\u6587\u4ef6\u592a\u591a\uff0c\u7f16\u8bd1\u751f\u6210\u7684\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\u592a\u591a\uff0c\u800c\u5728\u94fe\u63a5\u65f6\u9700\u8981\u660e\u663e\u5730\u6307\u51fa\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\u540d\uff0c\u8fd9\u5bf9\u4e8e\u7f16\u8bd1\u5f88\u4e0d\u65b9\u4fbf\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u7ed9\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\u6253\u4e2a\u5305\uff0c\u5728UNIX\u4e0b\uff0c\u662fArchive File\uff0c\u4e5f\u5c31\u662f<code>.a</code>\u6587\u4ef6\u3002</li> </ol>"},{"location":"notes/Tool_Pool/GNU_Make/#makefile","title":"makefile","text":"<p>make\u547d\u4ee4\u6267\u884c\u65f6\uff0c\u9700\u8981\u4e00\u4e2amakefile\u6587\u4ef6\uff0c\u4ee5\u544a\u8bc9make\u547d\u4ee4\u9700\u8981\u600e\u4e48\u6837\u7684\u53bb\u7f16\u8bd1\u548c\u94fe\u63a5\u7a0b\u5e8f\u3002</p> <p>\u57fa\u7840\u7684\u89c4\u5219\u662f\uff1a 1. \u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u6ca1\u6709\u7f16\u8bd1\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u6240\u6709c\u6587\u4ef6\u90fd\u8981\u7f16\u8bd1\u5e76\u88ab\u94fe\u63a5\u3002 2. \u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u7684\u67d0\u51e0\u4e2ac\u6587\u4ef6\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u7f16\u8bd1\u88ab\u4fee\u6539\u7684c\u6587\u4ef6\uff0c\u5e76\u94fe\u63a5\u76ee\u6807\u7a0b\u5e8f\u3002 3. \u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u7684\u5934\u6587\u4ef6\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7f16\u8bd1\u5f15\u7528\u4e86\u8fd9\u51e0\u4e2a\u5934\u6587\u4ef6\u7684c\u6587\u4ef6\uff0c\u5e76\u94fe\u63a5\u76ee\u6807\u7a0b\u5e8f\u3002</p> <p>makefile\u7684\u89c4\u5219\uff1a <pre><code>target ... : prerequisites ...\n    command\n    ...\n    ...\n</code></pre> - target: \u76ee\u6807\u6587\u4ef6\uff0c\u53ef\u4ee5\u662fObject File\uff0c\u4e5f\u53ef\u4ee5\u662f\u6267\u884c\u6587\u4ef6, \u8fd8\u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u7b7e. - prerequisites: \u751f\u6210target\u6240\u9700\u8981\u7684\u6587\u4ef6\u6216\u8005\u76ee\u6807. - command: \u751f\u6210target\u7684\u547d\u4ee4(\u547d\u4ee4\u884c)\uff0c\u4efb\u610fShell\u547d\u4ee4.(\u5fc5\u987b\u4ee5\u4e00\u4e2aTab\u952e\u5f00\u59cb)</p> <p>target\u8fd9\u4e00\u4e2a\u6216\u591a\u4e2a\u7684\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u4e8eprerequisites\u4e2d\u7684\u6587\u4ef6\uff0c\u5176\u751f\u6210\u89c4\u5219\u5b9a\u4e49\u5728command\u4e2d, \u4e5f\u5c31\u662f\u8bf4 prerequisites\u4e2d\u5982\u679c\u6709\u4e00\u4e2a\u4ee5\u4e0a\u7684\u6587\u4ef6\u6bd4target\u6587\u4ef6\u8981\u65b0\u7684\u8bdd\uff0ccommand\u6240\u5b9a\u4e49\u7684\u547d\u4ee4\u5c31\u4f1a\u88ab\u6267\u884c\u3002</p> <ul> <li>\u4e00\u4e2a\u5b9e\u4f8b\uff1a <pre><code>edit : main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n    cc -o edit main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n\nmain.o : main.c defs.h\n    cc -c main.c\nkbd.o : kbd.c defs.h command.h\n    cc -c kbd.c\ncommand.o : command.c defs.h command.h\n    cc -c command.c\ndisplay.o : display.c defs.h buffer.h\n    cc -c display.c\ninsert.o : insert.c defs.h buffer.h\n    cc -c insert.c\nsearch.o : search.c defs.h buffer.h\n    cc -c search.c\nfiles.o : files.c defs.h buffer.h command.h\n    cc -c files.c\nutils.o : utils.c defs.h\n    cc -c utils.c\nclean :\n    rm edit main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n</code></pre></li> </ul>"},{"location":"notes/Tool_Pool/GNU_Make/#_2","title":"\u53c2\u8003","text":""},{"location":"notes/cs/","title":"Computer Science Notes","text":"<p>Abstract</p> <p>\"This is a collection of notes on computer science.\"</p>"},{"location":"notes/cs/#table-of-contents","title":"Table of Contents","text":""},{"location":"notes/cs/HPC/","title":"HPC learning notes","text":"<p>Abstract</p> <p>This is a collection of notes on high performance computing. I took a course called HPC101 in the summer of 2024, maybe I'll not work on HPC in the future, but I'll keep these notes for reference. BTW HPC101 is definitely a good course, and I wanted to gain something from it so I took these notes.</p>"},{"location":"notes/cs/HPC/#table-of-contents","title":"Table of Contents","text":""},{"location":"notes/cs/algorithm/ads/ADS/","title":"ADS","text":""},{"location":"notes/cs/algorithm/ads/ADS/#avl-tree","title":"AVL Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro","title":"Intro","text":"<p>\u5728\u6570\u636e\u96c6\u4e2d\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u3001\u6392\u5e8f\u7b49\u64cd\u4f5c\u65f6\u5177\u6709\u8f83\u597d\u7684\u6548\u679c  Target\uff1aSpeed up</p> <p>\u57fa\u672c\u601d\u60f3\uff1a</p> <p>height balance\uff1a\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\uff08\u5e73\u8861\u56e0\u5b50BF\uff09\u4e0d\u8d85\u8fc71</p> \\[ BF=| h_l - h_r | \\leq 1\\] <p>PS:\u6811\u7684\u9ad8\u5ea6\u8ba1\u7b97\uff1a\u7531\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84 -&gt; \u8fdb\u884c\u9ad8\u5ea6\u5e73\u8861</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation","title":"Operation","text":"<p>Rotation \u5728\u4e0d\u6539\u53d8\u6811\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u65cb\u8f6c\u64cd\u4f5c\u6765\u8c03\u6574\u6811\u7684\u7ed3\u6784\uff0c\u4f7f\u5f97\u6811\u7684\u9ad8\u5ea6\u5e73\u8861</p> <p></p> <p>\u60f3\u8c61\u5c06\u9700\u8981\u88ab\u63d0\u9ad8\u7684\u8282\u70b9\u63d0\u9ad8\uff0c\u5c06\u9700\u8981\u88ab\u964d\u4f4e\u7684\u8282\u70b9\u964d\u4f4e\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u8fde\u63a5\u5230\u65b0\u7684\u8282\u70b9\u4e0a</p> <p>Time Complexity: \\(O(1)\\)</p> <p>\u56e0\u4e3a\u53ea\u6709\u56db\u4e2a\u8282\u70b9\u66f4\u65b0</p> <p>B\u3001A\u3001y\u3001A\u7684\u8001\u5b50</p> <ol> <li>RR Rotation or LL Rotation \u53f3\u5b50\u6811\u7684\u53f3\u8282\u70b9\u63d2\u5165\u5bfc\u81f4\u53f3\u5b50\u6811\u7684\u7236\u8282\u70b9BF=2\uff0c\u5c06BF=2\u7684\u53f3\u5b50\u8282\u70b9\u63d0\u9ad8\uff0cB\u8fde\u63a5\u7684\u5de6\u5b50\u6811\u8fde\u63a5\u5230A\u7684\u53f3\u5b50\u6811\u4e0a</li> </ol> <p></p> <p>\u82e5\u9047\u5230\u591a\u4e2a\u8282\u70b9BF\u975e\u6cd5\u7684\u60c5\u51b5\uff0c\u53ea\u9700\u8981\u5bf9\u6700\u5e95\u90e8\u7684\u4e24\u4e2a\u8282\u70b9\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\u5373\u53ef 2. LR Rotation or RL Rotation \u5de6\u5b50\u6811\u7684\u53f3\u5b50\u8282\u70b9\u589e\u52a0\u5bfc\u81f4\u5de6\u5b50\u6811\u7684\u7236\u8282\u70b9BF=2\uff0c\u5c06\u5de6\u5b50\u6811\u7684\u53f3\u8282\u70b9\u63d0\u9ad8\u4e24\u6b21</p> <p></p> <p>\u6309\u7167\u7247\u4e0a\u7684\u89e3\u91ca\u6839\u636e\u6811\u7684\u5408\u6cd5\u6027\u53ef\u4ee5\u63a8\u51fa\u4e2d\u95f4\u6b65\u9aa4 \u4e5f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u5728\u5bf9Mar\u8fdb\u884c\u65cb\u8f6c\u65f6\uff0cMar\u7684\u5de6\u4f4d\u662f\u88ab\u5360\u7528\u7684\uff0c\u800cMar\u7684\u7236\u4eb2\u662f\u6bd4Mar\u5c0f\u7684\uff0c\u53ea\u6709\u628aJan\u79fb\u5f00\u624d\u80fd\u7ed9Aug\u817e\u51fa\u4f4d\u7f6e</p>"},{"location":"notes/cs/algorithm/ads/ADS/#ananlysis","title":"Ananlysis","text":"<p>\\(n_h\\)\uff1a\u9ad8\u5ea6\u4e3ah\u7684\u6700\u5c0f\u8282\u70b9\u6570 \u4e3a\u4e86\u4fdd\u6301\u6811\u6709h\u7684\u9ad8\u5ea6\uff0c\u81f3\u5c11\u4e00\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u4e3ah-1\uff0c\u53e6\u4e00\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u4e0e\u4ed6\u76f8\u5dee\u4e3a1\uff0c= n-2 \u56e0\u6b64\uff1a</p> \\[ n_h = n_{h-1} + n_{h-2} + 1 \\] <p>\u53ef\u4ee5\u5f97\u5230\uff1a</p> \\[ n_h=F_{h+3}-1   ,h \\geq -1\\]"},{"location":"notes/cs/algorithm/ads/ADS/#splay-tree","title":"Splay Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_1","title":"Intro","text":"<p>Target\u7531\u7a7a\u6811\u8fdb\u884cM\u4e2a\u8fde\u7eed\u64cd\u4f5c\u6700\u591a\u9700\u8981\\(O(M \\log N)\\)\u7684\u65f6\u95f4</p> <p>\u5373\uff1aAmortized Time Complexity \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6 = \\(O(log N)\\)</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_1","title":"Operation","text":"<p>\u5c06\u6700\u8fd1\u8bbf\u95ee\u7684\u8282\u70b9\u63d0\u5347\u5230\u6839\u8282\u70b9\uff0c\u8fd9\u4e00\u64cd\u4f5c\u901a\u8fc7\u65cb\u8f6c\u6765\u5b9e\u73b0</p> <ul> <li>Zig Single Rotation</li> </ul> <p>\u6ca1\u6709G\uff0c\u53ea\u8f6c\u4e00\u6b21X</p> <ul> <li>Zig-zag</li> </ul> <p>Double Rotation \u8f6c\u4e24\u6b21X</p> <ul> <li>Zig-zig</li> </ul> <p>Single Rotation  \u5148\u8f6cX\u518d\u8f6cP</p> <p></p>"},{"location":"notes/cs/algorithm/ads/ADS/#amortized-analysis","title":"Amortized Analysis","text":"<p>\u5747\u644a\u6cd5\u5206\u6790\u662f\u5bf9\u4e00\u7cfb\u5217\u64cd\u4f5c\u7684\u5e73\u5747\u6027\u80fd\u8fdb\u884c\u5206\u6790\uff0c\u800c\u4e0d\u662f\u5bf9\u5355\u4e2a\u64cd\u4f5c\u7684\u6027\u80fd\u8fdb\u884c\u5206\u6790 bound\u4ecb\u4e8eworst\u548caverage\u4e4b\u95f4 \u4e14\u5747\u644a\u754c\u4e0e\u6982\u7387\u65e0\u5173 \u901a\u5e38\u6709\u4e09\u79cd\u65b9\u6cd5\uff1aAggregate Accounting Potential</p> <ul> <li>Aggregate Method \u5bf9\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u8fdb\u884c\u6700\u574f\u65f6\u95f4\u60c5\u51b5\u5206\u6790\u5f97\u5230\\(T(n)\\)\uff0c\u6b64\u65f6\uff1a $$ T(n) \\leq \\sum_{i=1}^{n} t_i=O(n) $$ \u8fd9\u65f6\\(T(n)\\)\u903c\u8fd1\u4e8e\\(O(n)\\)\uff0c\u5373\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\) \u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u7684\u96be\u70b9\u5728\u4e8e\u9700\u8981\u786e\u5b9a\u8fd9\u4e2a\\(T(n)\\)\uff0c\u4e5f\u5c31\u662f\u603b\u7684\u65f6\u95f4\u5f00\u9500</li> </ul> <p>\u5728\u8bb2\u89e3\u5176\u4f59\u7684\u4e24\u4e2a\u65b9\u6cd5\u4e4b\u524d\uff0cyy\u54e5\u8bf4\u4e86\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u6545\u4e8b\uff1a yy\u5728\u5b66\u6821\u95e8\u53e3\u5f00\u4e86\u4e00\u4e2a\u5c0f\u5356\u90e8\u4e70\u6c7d\u6c34\uff0c\u6bcf\u6b21\u5356\u51fa\u4e00\u74f6\u6210\u672c\u4e3a1\u7684\u6c7d\u6c34\uff0c\u5b66\u751f\u81f3\u5c11\u8981\u4ea4\u4e00\u5757\u94b1\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u591a\u4ea4\u94b1\u5b58\u5230\u4e0b\u6b21\u4f7f\u7528\uff0c\u6c7d\u6c34\u7684\u6210\u672c\u5c31\u662f<code>actual cost</code>\uff0c\u800c\u5b66\u751f\u4ea4\u7684\u94b1\u5c31\u662f<code>amortized cost</code>\uff0c\u591a\u51fa\u6765\u7684\u94b1\u6211\u4eec\u79f0\u4f5c<code>credit</code></p> <ul> <li>Accounting Method \u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u81ea\u5df1\u8bbe\u7f6e\u5747\u644a\u4ef7\u503c\uff0c\u4f46\u9700\u8981\u4fdd\u8bc1\u5747\u644a\u4ef7\u503c\u4e0d\u4f1a\u5c0f\u4e8e\u5b9e\u9645\u4ef7\u503c\uff0c\u5373\uff1a</li> </ul> <p>$$ \\sum \\text{amortized cost} \\geq \\sum \\text{actual cost} $$ (\u4e5f\u5c31\u662f\u4e0d\u4f1a\u8d4a\u8d26)</p> <p>\u8fd9\u65f6\u5019\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u5b9e\u9645\u4ef7\u503c\u7684\u4e0a\u754c</p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8fc7\u7a0b\u5c31\u662f\uff1a</p> <ul> <li>\u9996\u5148\u5206\u6790\u5b9e\u9645\u4ef7\u503c</li> <li>\u7136\u540e\u8bbe\u7f6e\u5747\u644a\u4ef7\u503c</li> <li>\u5206\u6790credit\u7684\u503c\uff0c\u786e\u4fdd\u5176\u5927\u4e8e\u7b49\u4e8e0</li> </ul> <p>eg: </p> <ul> <li>Potential Method \u76f4\u89c2\u7684\u3001\u4e00\u6b21\u6027\u5b9a\u4e49\u6240\u6709\u64cd\u4f5c\u7684\u5747\u644a\u4ee3\u4ef7\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5927\u91cf\u64cd\u4f5c\u9700\u8981\u5b9a\u4e49\u5747\u644a\u4ef7\u503c\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u9002\u7528</li> </ul> \\[ \\hat{c}_i-c_i=\\text { Credit }_i=\\Phi\\left(D_i\\right)-\\Phi\\left(D_{i-1}\\right) \\] <p>\u89e3\u91ca\uff1a</p> <p>\\(Credit_i\\)\uff1a\u7b2ci\u6b21\u64cd\u4f5c\u7684credit\uff0c\u8fd9\u65f6\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u72b6\u6001\u5f97\u5206\u51fd\u6570\\(\\Phi(D)\\)\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u503c\u662f\u4e00\u4e2a\u72b6\u6001\u7684\u4ee3\u4ef7\uff0c\\(D_i\\)\u662f\u7b2ci\u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001</p> <p>\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\\(Credit_i\\)\u7684\u6570\u503c\u4e0d\u4ec5\u7531\u5f53\u524d\u7684\u72b6\u6001\u51b3\u5b9a\uff0c\u8fd8\u53d7\u5230\u4e4b\u524d\u72b6\u6001\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u6211\u4eec\u7528\\(\\Phi(D_i)-\\Phi(D_{i-1})\\)\u6765\u8868\u793a</p> <p>\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a</p> \\[ \\sum_{i=1}^{n} \\hat c_i=\\sum_{i=1}^{n} c_i+\\Phi(D_n)-\\Phi(D_0) \\] <p>\u6070\u597d\u5728\u8fd9\u4e2a\u6c42\u548c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u7559\u4e0b\u4e86\\(\\Phi(D_0)\\)\u548c\\(\\Phi(D_n)\\)\uff0c\u8fd9\u4e24\u4e2a\u503c\u662f\u5e38\u6570\uff0c\u4ece\u800c\u6211\u4eec\u5f97\u5230\u4e86\\(\\sum_{i=1}^{n} \\hat c_i\\)\u7684\u503c</p> <p>\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\uff1a</p> <ul> <li>\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u72b6\u6001\u5f97\u5206\uff08\u52bf\u80fd\uff09\u51fd\u6570\\(\\Phi(D)\\)<ul> <li>\u52bf\u80fd\u51fd\u6570\u7684\u5b9a\u4e49\u8981\u6c42\uff1a\\(\\Phi(D_0)=0\\)</li> <li>\u53cd\u5e94\u51fd\u6570\u7684\u6f5c\u5728\u590d\u6742\u5ea6</li> </ul> </li> <li>\u68c0\u67e5credit\u7684\u503c\u5408\u6cd5\u6027</li> <li>\u8ba1\u7b97\\(\\sum_{i=1}^{n} \\hat c_i\\)</li> </ul> <p>\u6700\u597d\u7684\u52bf\u80fd\u51fd\u6570\u5e94\u8be5\u786e\u4fddn\u6b21\u64cd\u4f5c\u7684credit\u503c\u5c3d\u53ef\u80fd\u5c0f</p> <p>\u4f8b\u5b50 \u5bf9Splay\u6811\u8fdb\u884c\u5747\u644a\u5206\u6790</p> <p>\u82e5\u9009\u6df1\u5ea6\u4f5c\u4e3a\u52bf\u80fd\u51fd\u6570\uff0c\u65e0\u6cd5\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u53d8\u5316\uff0c\u56e0\u6b64\u4e0d\u80fd\u9009\u62e9 \u82e5\u9009\u62e9\u6240\u9009\u8f6c\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e2a\u6570\uff0c\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u4f46\u662fX\u3001G\u7684\u53d8\u5316\u592a\u5927\uff0c\u6240\u5f97\u5230\u7684\u754c\u592a\u677e \u6700\u7ec8\u9009\u62e9\u7684\u6280\u5de7\u662f\uff1a</p> <p>\u5bf9\u8282\u70b9\u6570\u53d6\u5bf9\u6570 \u5f97\u5230\u6811\u7684\u79e9</p> <p>\u5373\uff1a\\(\\Phi(D)=Rank=\\sum\\log S(n)\\)</p> <p>\u5bf9\u52bf\u80fd\u51fd\u6570\u5206\u6790\u65f6\uff0c\u5982\u679c\u8fdb\u884c\u5b8c\u5168\u5206\u6790\uff0c\u9700\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7684credit\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u8fd9\u6837\u8ba1\u7b97\u592a\u590d\u6742\uff0c\u56e0\u6b64\u6211\u4eec\u8fdb\u884c\u653e\u7f29\uff0c\u53ea\u5bf9\u6240\u5bfb\u627e\u7684\u76ee\u6807\u8282\u70b9\u7684\u52bf\u80fd\u8fdb\u884c\u5206\u6790\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u95ee\u9898</p> <p>\u9700\u8981\u7528\u5230\u4e0b\u9762\u7684\u5f15\u7406\uff1a</p> <p>Lemma:</p> \\[ if:a+b \\leq c  \\] \\[ then:\\log a + \\log b \\leq 2\\log c + 2 \\] <p></p> <p>\u6211\u624b\u5199\u4e86\u4e00\u4e0b\u8fd9\u4e09\u4e2a\u653e\u7f29\u7684\u8fc7\u7a0b\uff1a</p> <p></p>"},{"location":"notes/cs/algorithm/ads/ADS/#red-black-tree","title":"Red-Black Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_2","title":"Intro","text":"<p>AVL\u6811\u662f\u901a\u8fc7\u5b9e\u73b0\u9ad8\u5ea6\u5e73\u8861\u6765\u8fdb\u884c\u4f18\u5316</p> <p>\u800c\u7ea2\u9ed1\u6811\u662f\u901a\u8fc7\u5b9e\u73b0\u989c\u8272\u5e73\u8861\u6765\u8fdb\u884c\u4f18\u5316</p> <p>\u5728\u6811\u7684\u4ee3\u7801\u4e2d\uff0c\u9047\u5230\u4e86\u53f6\u5b50\u7ed3\u70b9\u65f6\u9700\u8981<code>if</code>\u5224\u5b9a\u7a7a\uff0c\u5e38\u7528\u4e00\u4e2a\u54e8\u5175\u8282\u70b9\u6765\u907f\u514d\u5927\u91cf\u7684<code>if</code>\u8bed\u53e5\uff0c\u4f46\u662f\u4e3a\u4e86\u907f\u514d\u7a7a\u95f4\u7684\u6d6a\u8d39\uff0c\u5728\u7ea2\u9ed1\u6811\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2aNIL\u8282\u70b9\u6765\u4ee3\u66ff\u54e8\u5175\u8282\u70b9,\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u548c\u6839\u8282\u70b9\u90fd\u6307\u5411NIL\u8282\u70b9</p> <p>\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff1a</p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\uff0c\u8981\u4e48\u662f\u9ed1\u8272</li> <li>\u6839\u8282\u70b9\u662f\u9ed1\u8272</li> <li>\u6bcf\u4e2a\u53f6\u8282\u70b9\uff08NIL\u8282\u70b9\uff09\u662f\u9ed1\u8272</li> <li>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u662f\u9ed1\u8272</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u4ece\u8be5\u8282\u70b9\u5230\u5176\u6240\u6709\u540e\u4ee3\u53f6\u8282\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u5747\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9</li> </ul> <p>black height\uff1a\u4ece\u67d0\u8282\u70b9\uff08\u4e0d\u5305\u542b\u81ea\u8eab\uff09\u5230\u53f6\u8282\u70b9\u7684\u9ed1\u8272\u8282\u70b9\u7684\u4e2a\u6570</p> <p>Lemma: \u4e00\u4e2a\u6709N\u4e2a\u5185\u90e8\u8282\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u6811\u9ad8\u81f3\u591a\u4e3a\\(2\\log(N+1)\\)</p> <p>\u8bc1\u660e\uff1a\u8bbe\u7a7a\u6811\u7684\u6811\u9ad8\u4e3a0</p> <p>\u5f52\u7eb3\u5047\u8bbe\uff1a</p> \\[ for\\ any\\ node\\ x, sizeof(x) \\geq 2^{bh(x)}-1 \\] <p>\u5f52\u7eb3\u5960\u57fa\u663e\u7136\u5728\u7a7a\u6811\u4e0a\u6210\u7acb</p> <p>\u5f52\u7eb3\u6f14\u7ece\uff1a</p> <p>\u5bf9\u4e00\u4e2a\u975e\u7a7a\u6811\u65f6\uff1a\\(h(x) \\leq k\\) \u6210\u7acb\uff0c\u73b0\u5728\u8bc1\u660e\\(h(x) \\leq k+1\\)\u4e5f\u6210\u7acb</p> <p>\u5bf9\u4e00\u4e2ax\u6ee1\u8db3\\(h(x) \\leq k+1\\)\uff0c\u5176\u5b50\u6811\u7684\u9ed1\u9ad8\u8981\u4e48\u7b49\u4e8ex\u7684\u9ed1\u9ad8\uff0c\u8981\u4e48\u7b49\u4e8ex\u7684\u9ed1\u9ad8-1\uff08\u5b50\u6811\u7684\u6839\u8282\u70b9\u662f\u7ea2\u8272\uff09</p> <p>\u56e0\u4e3a\uff1a</p> \\[ h(child) \\leq k \\] <p>\u5219\u6709\uff1a $$ sizeof(child) \\geq 2^{bh(child)}-1 \\geq 2^{bh(x)-1}-1 $$ \u5373\u5b50\u6811\u7684\u8282\u70b9\u6570\u6709\u4e00\u4e2a\u4e0b\u754c</p> <p>\u7531\u4e8e\uff1a $$ bh(Tree) \\geq h(Tree)/2 $$ \u5219\uff1a $$ Sizeof(Tree)=N \\geq 2^{bh(Tree)}-1 \\geq 2^{h/2}-1 $$ \u5f97\u8bc1</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_2","title":"Operation","text":"<ul> <li>Insertion \u4e24\u4e2a\u6027\u8d28\u9700\u8981\u4fdd\u6301\uff1a</li> </ul> <ol> <li>Key\u503c\u4fdd\u8bc1\u4e8c\u53c9\u6811</li> <li>\u7ea2\u9ed1\u6811\u6027\u8d28</li> </ol> <p>\u9ed8\u8ba4\u63d2\u5165\u7684\u8282\u70b9\u4e3a\u7ea2\u8272\uff0c\u63d2\u5165\u540e\u4e0d\u4f1a\u7834\u574f\u7b2c\u4e94\u6761\u6027\u8d28\uff0c\u4f46\u662f\u7ee7\u7eed\u63d2\u5165\u540e\u53ef\u80fd\u4f1a\u9047\u5230\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9\uff0c\u8fd9\u65f6\u9700\u8981\u8fdb\u884c\u8865\u6551</p> <p>\u9700\u6ce8\u610f\u6027\u8d282\u53ef\u80fd\u56e0\u4e3a\u63d2\u5165\u7684\u662f\u7a7a\u6811\u88ab\u7834\u574f\uff0c\u8fd9\u65f6\u9700\u8981\u5c06\u6839\u8282\u70b9\u6d82\u9ed1</p> <p>\u63a5\u4e0b\u6765\u7684\u5206\u7c7b\u8ba8\u8bba\u5176\u5b9e\u5c31\u662f\u6839\u636e\u53d4\u53d4\u7684\u989c\u8272\u8fdb\u884c\u65cb\u8f6c</p> <p>Case 1</p> <p>\u53d4\u53d4\u8282\u70b9\u662f\u7ea2\u8272</p> <p>\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u540e\uff0c\u7236\u4eb2\u4e0e\u53d4\u53d4\u90fd\u662f\u7ea2\u8272\uff0c\u8fd9\u65f6\u5c06\u7236\u4eb2\u6d82\u9ed1\uff0c\u53d1\u73b0\u5de6\u6811\u7684\u9ed1\u9ad8\u6bd4\u53f3\u6811\u7684\u9ed1\u9ad8\u591a1\uff0c\u518d\u5c06\u53d4\u53d4\u6d82\u9ed1\uff0c\u53d1\u73b0\u6574\u68f5\u6811\u5bf9\u4e8e\u6811\u5916\u90e8\u5206\u6574\u4f53\u9ed1\u9ad8+1\uff0c\u8fd9\u65f6\u5c06\u7956\u7236\u6d82\u7ea2\uff0c\u6ee1\u8db3\u4e86\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff0c\u4f46\u662f\u4f1a\u9047\u5230\u7956\u7236\u7684\u7236\u4eb2\u662f\u7ea2\u8272\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u9700\u8981\u9012\u5f52\u5904\u7406</p> <p>\u8fd9\u4e5f\u662f\u63d2\u5165\u552f\u4e00\u9700\u8981\u8fed\u4ee3\u7684\u64cd\u4f5c</p> <p>Case 2</p> <p>\u53d4\u53d4\u7684\u989c\u8272\u662f\u9ed1\u8272\uff0c\u4e14\u63d2\u5165\u8282\u70b9\u9760\u8fd1\u53d4\u53d4\u8282\u70b9\uff0c\u6b64\u65f6\u65e0\u6cd5\u901a\u8fc7\u4f20\u9012\u7956\u7236\u7684\u9ed1\u8272\u7ef4\u6301\u9ed1\u9ad8\uff0c\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u5c06\u63d2\u5165\u8282\u70b9\u4e0e\u7236\u4eb2\u8fdb\u884c\u65cb\u8f6c\uff0c\u8fdb\u5165Case 3</p> <p>Case 3</p> <p>\u5148\u5c06\u7238\u7238\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2\uff0c\u6b64\u65f6\u5de6\u5b50\u6811\u7684\u9ed1\u9ad8\u6bd4\u53f3\u5b50\u6811\u7684\u9ed1\u9ad8\u591a1\uff0c\u56e0\u6b64\u8981\u8fdb\u884c\u53f3\u65cb\u8f6c\u5e73\u8861\u9ed1\u9ad8</p> <ul> <li>Delete </li> </ul> <p>\u603b\u4f53\u7684\u601d\u8def\u662f\u5c06\u5220\u9664\u8282\u70b9\u589e\u9ed1\uff0c\u7136\u540e\u901a\u8fc7\u8f6c\u79fb\u8fd9\u4e2a\u9ed1\u8272\u5230\u7236\u4eb2\u8282\u70b9\uff0c\u5728\u8fdb\u884c\u9ed1\u9ad8\u7684\u5e73\u8861</p> <p>Case 1</p> <p>\u5220\u9664\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u7236\u4eb2\u4e5f\u662f\u9ed1\u8272\u4f46\u662f\u5144\u5f1f\u662f\u7ea2\u8272\uff0c\u6b64\u65f6\u5c06\u5144\u5f1f\u67d3\u9ed1\uff0c\u7236\u4eb2\u67d3\u7ea2\uff0c\u4f46\u662f\u8fd9\u6837\u4f1a\u4f7f\u9ed1\u9ad8\u53f3\u79fb\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u5de6\u65cb\u8f6c</p> <p>Case 2</p> <p>\u6b64\u65f6\u5144\u5f1f\u8282\u70b9\u7684\u989c\u8272\u662f\u9ed1\u8272\u4e14\u4f84\u5b50\u662f\u53cc\u9ed1\uff0c\u8fd9\u65f6\u5019\u7529\u9505\u7ed9\u7236\u4eb2\uff0c\u5c06\u7236\u4eb2\u67d3\u9ed1\uff0c\u6b64\u65f6\u53f3\u8def\u9ed1\u8272\u591a\u4e86\u4e00\u4e2a\uff0c\u7136\u540e\u5728\u5206\u7c7b\u8ba8\u8bba\uff0c\u7236\u8282\u70b9\u672c\u6765\u662f\u7ea2\u8272\u5c31\u7ed3\u675f\u4e86\uff0c\u67d3\u9ed1\u5373\u53ef\uff1b\u7236\u8282\u70b9\u672c\u6765\u662f\u9ed1\u8272\uff0c\u5c31\u7ee7\u7eed\u9012\u5f52</p> <p>\u8fd9\u65f6\u5019\u95ee\u9898\u51fa\u73b0\u4e86\uff0c\u5982\u679c\u4f84\u5b50\u6709\u7ea2\u8272\uff0c\u90a3\u4e48\u5728Case 2\u4e2d\u6211\u4eec\u5c06\u5144\u5f1f\u67d3\u7ea2\u7684\u64cd\u4f5c\u5c31\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u8fde\u7eed\u7ea2\u8272\uff0c\u8fd9\u5c31\u8fdb\u5165\u4e86Case 3</p> <p>Case 3</p> <p>\u8fdc\u4f84\u5b50\u662f\u9ed1\u8272\uff0c\u8fd1\u4f84\u5b50\u662f\u7ea2\u8272\uff0c\u6b64\u65f6\u5c06\u7ea2\u8272\u4f84\u5b50\u4e0e\u9ed1\u8272\u7236\u4eb2\u4e92\u6362\uff0c\u4f1a\u5bfc\u81f4\u5de6\u4f84\u5b50\u8fd9\u6761\u8def\u7684\u9ed1\u9ad8\u591a1\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u53f3\u65cb\u8f6c\uff0c\u7136\u540e\u8fd9\u65f6\u8fdc\u4f84\u5b50\u5c31\u662f\u7ea2\u8272\u4e86\uff0c\u8fdb\u5165Case 4</p> <p>Case 4</p> <p>\u8fd9\u4e2a\u60c5\u51b5\u662f\uff1aX\u662f\u5f85\u5220\u9664\u8282\u70b9\uff0c\u4ed6\u7684\u8eab\u4e0a\u6709\u4e24\u4e2a\u9ed1\u8272\u6807\u8bb0\uff0c\u4ed6\u7684\u5144\u5f1f\u662f\u9ed1\u7684\uff0c\u8fdc\u4f84\u5b50\u4e00\u5b9a\u662f\u7ea2\u7684\uff0c\u7236\u4eb2\u548c\u8fd1\u4f84\u5b50\u53ef\u7ea2\u53ef\u9ed1\uff0c\u8fd9\u65f6\u5019\u7684\u64cd\u4f5c\u6b65\u9aa4\uff1a</p> <ol> <li>\u5c06\u7236\u4eb2\u548c\u5144\u5f1f\u7684\u989c\u8272\u4e92\u6362\uff0c\u4e3a\u4e86\u907f\u514d\u7236\u4eb2\u662f\u7ea2\u8272\u5bfc\u81f4\u53f3\u4fa7\u51fa\u73b0\u8fde\u7eed\u7684\u7ea2\u8272\uff0c\u5c06\u4f84\u5b50\u67d3\u9ed1</li> <li>\u8fd9\u65f6\u5019\u7684\u9ed1\u9ad8\u53f3\u8fb9\u6709\u53ef\u80fd\u4e0d\u53d8\uff0c\u4e5f\u53ef\u80fd\u589e\u59271\u5411\u53f3\u8fb9\u503e\u659c\uff0c\u8fdb\u884c\u4e00\u6b21\u5de6\u65cb\u8f6c</li> <li>\u8fd9\u65f6\u5019\u5f85\u5220\u9664\u8282\u70b9\u5c31\u4f4d\u4e8e\u53f6\u8282\u70b9\u4e0a\u4e86\u5e76\u4e14\u9ed1\u9ad8\u4e5f\u5e73\u8861\u4e86\uff0c\u5c06\u5176\u5220\u9664\u5373\u53ef</li> </ol> <p>\u5982\u679c\u4ece\u9006\u5411\u7684\u89d2\u5ea6\u601d\u8003\uff0c\u5177\u5907\u76f4\u63a5\u5220\u9664\u4e00\u4e2a\u9ed1\u8272\u8282\u70b9\u7684\u6761\u4ef6\uff0c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u662f\u53f6\u8282\u70b9\u5e76\u4e14\u4ed6\u6240\u5728\u7684\u8def\u5f84\u4e0a\u9ed1\u9ad8\u591a\u4e86\u4e00\uff0c\u8fd9\u5c31\u662f\u4e00\u76f4\u5f80\u5de6\u8fb9\u585e\u9ed1\u8272\u7684\u539f\u56e0\uff0c\u5c31\u662f\u8981\u8ba9\u4ed6\u6210\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u7684\u8282\u70b9</p> <p>\u603b\u7ed3\uff1a</p> <ol> <li>\u5148\u770b\u5144\u5f1f\u662f\u4e0d\u662f\u9ed1</li> <li>\u518d\u770b\u4f84\u5b50\u6709\u6ca1\u6709\u7ea2</li> <li>\u4f84\u5b50\u6709\u7ea2\u770b\u8fdc\u4f84\u5b50</li> <li>\u8f6c\u5316\u5230\u8fdc\u4f84\u5b50\u4e3a\u7ea2</li> <li>\u8fdc\u4f84\u4e3a\u7ea2\u4e00\u987f\u64cd\u4f5c</li> </ol> <p>Number of Rotations:</p> <p>|  | AVL | Red-Black | | Insertion | $ \\leq 2$ | $ \\leq 2$ | | Deletion | $ O(log n)$ | $ \\leq 3$ |</p>"},{"location":"notes/cs/algorithm/fds/fds/","title":"Fundamentals of Data Structure","text":"<p>\u9519\u9898\u96c6\uff1a</p> <ol> <li>For a sequentially stored linear list of length N, the time complexities for deleting the first element and inserting the last element are O(1) and O(N), respectively.</li> </ol> <p>A\uff1aFalse</p> <p>R\uff1asequencial --&gt; \u987a\u5e8f\u6620\u5c04 \u4e00\u5b9a\u662f\u6570\u7ec4 \u4e0d\u662f\u94fe\u8868</p> <p>\u987a\u5e8f\u6620\u5c04\u5c31\u662f\u5730\u5740\u6309\u987a\u5e8f\u8fde\u63a5\uff0c\u77e5\u9053\u7b2c\u4e00\u4e2a\u5c31\u77e5\u9053\u5176\u4ed6\u6240\u6709</p> <p>\u94fe\u8868\u5219\u4e0d\u77e5\u9053\uff0c\u4f46\u597d\u5904\u662f\u968f\u65f6\u8981\u5230\u7a7a\u95f4\uff0c\u4f46\u662f\u5360\u7528\u5185\u5b58\u8fc7\u591a\u65f6\u4e0d\u80fd\u7ed9\u51fa\u8fde\u7eed\u5927\u7247\u7a7a\u95f4</p> <ol> <li>If the most commonly used operations are to visit a random position and to insert and delete the last element in a linear list, then which of the following data structures is the most efficient?</li> </ol> <p>A. doubly linked list</p> <p>B. singly linked circular list</p> <p>C. doubly linked circular list with a dummy head node\uff08\u597d\u5904\u662f\u53ef\u4ee5\u524d\u8fdb\u540e\u9000\uff09</p> <p>D. sequential list</p> <p>A\uff1aD</p> <p>R\uff1aRandom access--&gt;\u4e00\u5b9a\u662f\u6570\u7ec4 </p> <p>\u94fe\u8868\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5730\u5740\u90fd\u50a8\u5b58\u5728\u524d\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u65e0\u6cd5\u8fbe\u6210\u968f\u673a\u8bbf\u95ee\uff0c\u53ea\u80fd\u6709\u4e00\u6b65\u77e5\u9053\u4e0b\u4e00\u6b65\u7684\u5730\u5740</p> <ol> <li>To merge two singly linked ascending lists, both with N nodes, into one singly linked ascending list, the minimum possible number of comparisons is:</li> </ol> <p>A\uff1aN </p> <p>R\uff1a\u7b2c\u4e00\u4e2a\u5143\u7d20\u6bd4\u8f83a1\u6b21\u540e\u63d2\u5165\uff0c\u7b2c\u4e8c\u4e2a\u6bd4a2\u6b21\u2026\u2026</p> <p>\u76f4\u5230a1+a2+\u2026\u2026 = N\u540e\uff0c\u5176\u4ed6\u7684\u5143\u7d20\u4e0d\u7528\u6bd4\u8f83\u76f4\u63a5\u653e\u5728\u6700\u540e\u9762\u5373\u53ef \u6781\u7aef\u60c5\u51b5\u662f\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6bd4\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u5c0f\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u6bd4\u8f83N\u6b21\u540e\uff0c\u5176\u4ed6\u5143\u7d20\u5168\u90e8\u63d2\u5728\u540e\u9762\uff0c\u4e5f\u540c\u6837\u662fN\u6b21</p> <ol> <li>It is always possible to represent a tree by a one-dimensional integer array.</li> </ol> <p>A: T</p> <ol> <li>If a general tree T is converted into a binary tree BT, then which of the following BT traversals gives the same sequence as that of the post-order traversal of T?</li> </ol> <p>A: In order traversal. \u627e\u4e00\u4e2a\u6811\u7684\u4f8b\u5b50\u8bd5\u4e00\u4e0b</p> <ol> <li>In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</li> </ol> <p>A: T</p> <ol> <li>\u5224\u65adBST decision tree \u7684\u5408\u6cd5\u6027\uff1a\u5bf9\u5076\u6570\u6765\u8bf4\u4e00\u5b9a\u5de6\u53f3\u5e73\u8861 \u5947\u6570\u662f\u81ea\u5df1\u9009\u5b9a\u8d70\u5de6\u8fb9\uff08\u6216\u8005\u53f3\u8fb9\uff09\uff0c\u9009\u5b9a\u597d\u4e86\u4e00\u5b9a\u5bf9\u6bcf\u4e2a\u5b50\u6811\u6765\u8bf4\u90fd\u662f\u5de6\u8fb9\u5927\u4e8e\u53f3\u8fb9\uff08\u6216\u8005\u76f8\u53cd\uff09\u4e0d\u4f1a\u524d\u540e\u77db\u76fe</li> </ol>"},{"location":"notes/cs/algorithm/fds/fds/#lec-00","title":"Lec 00","text":"<p>3 types of structures </p> <p>sorting</p> <p>hash</p> <p>preparing for ads(queue stack)</p> <p>further studying</p> <p>\u6d4b\u8bd5\u6570\u636e\u7684\u8981\u6c42\uff1a</p> <ol> <li>\u5206\u652f\u6d4b\u8bd5\uff1a\u5bf9\u6bcf\u4e2aif-else\u90fd\u8981\u8fdb\u5165</li> <li>\u8fb9\u754c\u6d4b\u8bd5\uff1a\u6570\u636e\u8303\u56f4\u7684\u6700\u503c</li> </ol> <p>\u200b   \u9700\u8981\u5728\u6700\u5927\u6570\u636e\u65f6\u627e\u5230\u6700\u5feb\u6570\u636e\u548c\u6700\u6162\u6570\u636e</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-01-algorithm-analysis","title":"Lec 01 Algorithm Analysis","text":"<p>Time &amp; space complexity : machine and compiler independent</p> <p>mostly about time </p> <p>Assumption:</p> <ul> <li>instructions are excuted sequential </li> <li>simple instruct</li> <li>integer size is fixed and infinite memory</li> </ul> <p>usually analyzing the average and worst cases time </p> <p>O: worst case(take the smallest f(N) to illustrate )</p> <p>Tx &lt;= Cfx</p> <p>\u03a9: best case(take the largest f(N) to illustrate )</p> <p>Tx &gt;= Cfx</p> <p>\u00f8: completely same</p> <p>Tx = Ofx = \u03a9fx</p> <p>o: infinitely related to O</p> <p>operation:</p> <p>T1 + T2 = maxone </p> <p>T1*T2 = multiple</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-02","title":"Lec 02","text":"<p>Q:\u6c42\u5df2\u77e5\u6570\u5217\u7684\u6700\u5927\u5b50\u5217</p> <ol> <li>\u66b4\u529b\u7a77\u4e3e O(N^3)</li> <li>\u4f18\u5316this sum\u6c42\u6cd5 \u51cf\u5c11\u4e00\u7ec4\u5faa\u73af</li> <li>Divide and conquer O(nlogn)</li> <li>On-line Algorithm\u4e0d\u8d70\u56de\u5934\u8def</li> </ol> <pre><code>this = max = 0\nfor(...): \n\u200b   if:this &gt; max: max = this \n    else if: this &lt; 0: this = 0\n</code></pre> <p>Q:binery search</p> <p>use loop O(logn)</p> <ul> <li>usually used in  static and ordered data </li> </ul>"},{"location":"notes/cs/algorithm/fds/fds/#lec-04-adt","title":"Lec 04 ADT","text":"<p>Data type = object + operation </p> <p>Abstract: </p> <p>representation is separated from implementation </p> <p>each operation is isolated </p>"},{"location":"notes/cs/algorithm/fds/fds/#polynomial-adt","title":"Polynomial ADT","text":"<p>coefficient and exponent </p> <pre><code>typedef struct // array way\n{\n  int Coeffientarray[maxdegree + 1];\n  int HighPower;\n}*Polynomial;\n</code></pre> <p>(X) when poly is sparse but the operation is dense</p> <pre><code>typedef struct poly_node *poly_ptr;\nstruct poly_node\n{\n  int Coe;\n  int Exp;\n  poly_ptr next;\n};\ntypedef *poly_ptr a;\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#multilists","title":"Multilists","text":""},{"location":"notes/cs/algorithm/fds/fds/#lec-05-linear-list","title":"Lec 05 Linear List","text":""},{"location":"notes/cs/algorithm/fds/fds/#stack-adt","title":"Stack ADT","text":"<p>\u5e2e\u52a9\u7cfb\u7edf\u4e34\u65f6\u5b58\u653e\u6216\u8005\u8c03\u6574\u987a\u5e8f\u6240\u7528\u7684\u5de5\u5177</p> <p>Last in First out(LIFO)\u540e\u8fdb\u5148\u51fa</p> <p>\u53ea\u80fd\u5bf9\u6808\u9876\u8fdb\u884c\u64cd\u4f5c</p> <p>Objects\uff1aA finite ordered list </p> <p>Operations:</p> <p>Judge Empty: </p> <p>Stack: </p> <p>Dispose: </p> <p>MakeEmpty: </p> <p>Push: give a new element in</p> <p>Top: look at the top element</p> <p>Pop: take out the top element and delete it </p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation","title":"Implementation","text":"<ul> <li>Linked List(with a header): from top to down</li> </ul> <p>\u7528\u94fe\u8868\u5b9e\u73b0\u65f6 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f4d\u4e8estack\u7684top</p> <p>head\u53ef\u4ee5\u7406\u89e3\u4e3astack\u5916\u7684\u4e00\u5757\u5185\u5b58\uff0cs\u662fhead\u7684\u540d\u5b57\uff0c\u5c31\u662f\u8fd9\u4e2ahead\u5757 \u8d77\u5230\u5b9a\u4f4d\u4f5c\u7528\uff08\u5730\u5740\uff09</p> <p>s-&gt;next = first element in stack </p> <pre><code>//push:\n  Tem-&gt;next = s-&gt;next\n  s-&gt;next = Tem\n//top\n  return s-&gt;next-&gt;element\n//pop:\n  first = s-&gt;next//\u786e\u5b9a\u7b2c\u4e00\u5757\u7684\u4f4d\u7f6e\n  s-&gt;next = s-&gt;next-&gt;next\n  free(first)\n</code></pre> <p>But malloc and free are expensive </p> <p>Solution: use a recycle bin</p> <ul> <li>Array:  much better  when knowing size</li> </ul> <pre><code>struct Stack\n{\n  int Capacity;//size\n  int Topofstack;//the top pointer's location\n\n  //\u6b64\u5904\u7684pointer \u4e0d\u4ec5\u4ec5\u6307c\u7684pointer\uff0c\u662f\u4e00\u4e2a\u50a8\u5b58\u5730\u5740\u7684\u7b26\u53f7\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0b\u6807\u7b49\u7b49\n  //\u53ea\u8981\u5b58\u653e\u7684\u662f \u4f4d\u7f6e \u90fd\u53ef\u4ee5\u662f\u6307\u9488\n  ElementType *Array;//category of element\n};\n</code></pre> <p>\u6dfb\u52a0\u5143\u7d20\u65f6top++\uff0c\u5220\u9664\u5143\u7d20\u65f6top--\uff0c\u6307\u9488\u5411\u4e0b\u79fb\u52a8\uff0c\u4f46\u662f\u53ea\u662f\u6570\u503c\u51cf\u5c0f\uff0c\u5e76\u4e0d\u4f1afree\u4e0a\u65b9\u7684\u5143\u7d20\uff0c\u53ea\u662f\u5f53\u4f5c\u4ed6\u4eec\u4e0d\u5b58\u5728</p> <p>eg: Balancing Symbols check if () and [] and {} are balanced</p> <p>\u4ece\u5de6\u5230\u53f3\u4e00\u76f4\u770b\u5de6\u62ec\u53f7\uff0c\u9047\u89c1\u7684\u7b2c\u4e00\u4e2a\u53f3\u62ec\u53f7\u4e00\u5b9a\u662f\u548c\u5de6\u62ec\u53f7\u5339\u914d\u7684\uff0c\u6b64\u65f6\u5220\u9664\u8fd9\u4e00\u5bf9\u62ec\u53f7\uff0c\u63a5\u7740\u7ee7\u7eed\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u8bfb\u5b8c\u6574\u4e2a\u8f93\u5165\uff0c\u5982\u679c\u6808\u5185\u4e3a\u7a7a\uff0c\u5219balance</p> <pre><code>Algorithm\n{\n  Stack S;\n  InitializeStack(S);\n  while (more input)\n  {\n    read a character c;\n    if (c is an opening symbol)\n      push(c, S);\n    else if (c is a closing symbol)\n      if (StackIsEmpty(S))\n        return (unbalanced);\n      else\n      {\n        t = top(S);\n        pop(S);\n        if (t does not match the corresponding opening symbol of c)\n          return (unbalanced);\n      }\n  }\n  if (StackIsEmpty(S))\n    return (balanced);\n  else\n    return (unbalanced);\n}\n</code></pre> <p>eg\uff1aPostfix Expression a+b-cd = ab+cd- a(b+c)/d = abc+d/</p> <p>Method:</p> <ul> <li>when meeting oprand, push into stack</li> <li>when meeting operator, pop two oprand and calculate, then push the result into stack</li> </ul> <p>solution to () never pop a ( until you meet a )</p> <p>eg: Function calls: system stack</p> <p>stack pointer: to the top of the stack</p> <p>function pointer: to the bottom of the current function frame</p> <p>infix to postfix</p> <p>\u8f93\u5165\u4e00\u6bb5\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u8f6c\u6362\u5230\u540e\u7f00\u8868\u8fbe\u5f0f</p> <p>\u9047\u89c1operands\u76f4\u63a5\u8f93\u51fa\uff0c\u9047\u89c1operators\u5148\u653e\u8fdb\u6808\u5185\uff0c\u7ee7\u7eed\u8f93\u51fa\u6570\u5b57\uff0c\u9047\u89c1\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u65f6\uff0c\u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u7684\u4f18\u5148\u7ea7\uff1a</p> <ol> <li> <p>\u6808\u5185\u7684\u5927\u4e8e\u7b49\u4e8e\u6808\u5916\u7684\uff0cpop\u6808\u5185\u7684\uff0c\u4e0e\u6808\u5185\u4e0b\u4e00\u4e2a\u8fdb\u884c\u6bd4\u8f83</p> </li> <li> <p>\u6808\u5916\u7684\u5927\u4e8e\u6808\u5185\u7684\uff0c\u7ee7\u7eedpush</p> </li> <li> <p>\u9047\u89c1\u62ec\u53f7\uff1a</p> </li> </ol> <p>\u6808\u5916\u7684\u62ec\u53f7\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u76f4\u63a5\u8fdb\u5165\uff0c\u9047\u89c1\u6709\u62ec\u53f7\u65f6\u5f39\u51fa\u62ec\u53f7\u5f80\u4e0a\u7684\u6240\u6709operators\uff0c\u6539\u53d8\u62ec\u53f7\u4f18\u5148\u7ea7\u65b9\u6cd5\uff1a</p> <ol> <li>\u7528\u6761\u4ef6\u5224\u65ad</li> <li>\u8bbe\u7f6e\u4e24\u5957\u62ec\u53f7\uff0c\u6808\u5185\u4e00\u5957\uff0c\u6808\u5916\u4e00\u5957</li> </ol>"},{"location":"notes/cs/algorithm/fds/fds/#queue-adt","title":"Queue ADT","text":"<p>\u4fdd\u6301\u987a\u5e8f\u4f7f\u7528</p> <p>First in First out(FIFO)</p> <p>Objects: A finite ordered list</p> <p>Operations: ...</p> <p>Enqueue: add a new element to the end of the queue</p> <p>Front: take out the first element</p> <p>Dequeue: take out the first element</p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_1","title":"Implementation","text":"<ul> <li>Array</li> </ul> <pre><code>struct QueueRecord\n{\n  int Capacity;// max size\n  int Front;// the first element\n  int Rear;// the last element\n  int Size;// current size\n  ElementType *Array;\n};\n</code></pre> <ul> <li>Circular Array</li> </ul> <p>Note: To defferentiate the empty and full, we need to waste one space, which means the max size is n-1</p> <p>Another method is to use a flag to indicate the empty and full</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-06-tree","title":"Lec 06 Tree","text":"<p>A collection of nodes.</p> <p>Consists:</p> <ol> <li>a distinguished node r, called root </li> <li>and zero or more nonempty (sub)tree</li> </ol> <ul> <li>subtrees must not connect together</li> <li>there are N -1 edge with N nodes </li> </ul> <p>degree:</p> <p>the numbers of subtrees of a node </p> <p>degree of a tree is max of all degrees </p> <p>children:</p> <p>directly connected ones(not all descents)</p> <p>siblings:</p> <p>children of the same parent</p> <p>leaf:</p> <p>degree 0 node</p> <p>path:</p> <p>a unique sequence of nodes</p> <p>length:</p> <p>the edges number</p> <p>depth:</p> <p>length of the unique path from the root</p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_2","title":"Implementation","text":"<ol> <li>first child next sibling</li> </ol> <ol> <li>binary tree</li> </ol> <p>eg </p> <ul> <li>expression tree:</li> </ul> <p>\u5148\u8fdb\u884c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff1a</p> <p>\u5229\u7528\u5806\u6808\u9012\u5f52\u5b9e\u73b0\uff1a</p> <p>\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u9047\u89c1operand push\uff0c\u9047\u89c1operator pop\u51fa\u6808\u5185\u7684\u4e24\u4e2a\u5143\u7d20\u5f62\u6210\u4e00\u4e2a\u6811\uff0c\u518d\u5c06\u8fd9\u4e2a\u6811\u7684root push\u8fdb\u5806\u6808\u4f5c\u4e3a\u540e\u7eed\u5f62\u6210\u6811\u7684\u5143\u7d20</p> <p>--&gt;\u6808\u5185\u7684\u5143\u7d20\u5c31\u662ftree</p> <ul> <li>tree traversal:</li> </ul> <p>\u91c7\u7528\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5preorder \u4e5f\u53ef\u4ee5postorder</p> <p>preorder\uff1a\u5148\u64cd\u4f5c\u518d\u9012\u5f52</p> <p>postorder\uff1a\u5148\u9012\u5f52\u518d\u64cd\u4f5c</p> <p>\u9664\u6b64\u4e4b\u5916\uff1a\u5c42\u5e8f\u904d\u5386 level order\uff1a</p> <p>\u7528queue\u5b9e\u73b0</p> <p>\u5c06\u6bcf\u4e00\u5c42\u7684node\u5168\u90e8\u8f93\u51fa\u540e\u8fdb\u5165\u4e0b\u4e00\u5c42</p> <ol> <li>\u5f53\u524d\u5c42\u5143\u7d20\u5168\u90e8enqueue</li> <li>queue\u4e0d\u4e3a\u7a7a\u65f6\uff1a</li> <li>dequeue\u4e00\u4e2a\u5143\u7d20</li> <li>enqueue\u8fd9\u4e2a\u5143\u7d20\u7684node</li> </ol> <pre><code>void levelorder(tree){\nenqueue(tree)\n    while(queue is not empty){\n        visit(T = dequeue())\n        for(each child C of T)\n            enqueue(C)\n    }\n}\n</code></pre> <p>inorder(only in binary tree)</p> <p>\u5148\u5de6\u540e\u53f3\u9012\u5f52</p> <p>for binary inorder:</p> <pre><code>void inorder(tree){\n  if Node == NULL\n    return;\n  inorder(tree-&gt;left);\n    printf tree-&gt;data;\n  inorder(tree-&gt;right);\n}\n</code></pre> <ul> <li>file structure</li> </ul> <ol> <li>\u6309\u7167\u5c42\u7ea7tab</li> </ol> <p>\u91c7\u7528preorder\uff0cvoid fun(tree, depth)</p> <p>\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5f53\u524d\u6811\uff0c\u4e00\u4e2a\u662f\u6df1\u5ea6\uff0c\u6bcf\u5c42\u9012\u5f52\u65f6\uff0c\u6df1\u5ea6\u52a0\u4e00\uff0c\u6839\u636e\u6df1\u5ea6tab</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-07-bst","title":"Lec 07 BST","text":""},{"location":"notes/cs/algorithm/fds/fds/#properties-of-bt","title":"Properties of BT","text":"<p>\u5c42\u6570\u4e3an\u7684BT \u6700\u591a\u67092^n-1\u4e2anode </p> <p>degree \u4e3a 0 \uff08\u53f6\u5b50\u7ed3\u70b9\uff09\u4e2a\u6570 = degree \u4e3a 2\u8282\u70b9\u4e2a\u6570 + 1</p> <p>proof\uff1a</p> <p>n = n0 + n1 + n2</p> <p>side = 2*n2 + n1</p> <p>side = n - 1</p> <p>\u53ef\u4ee5\u6d88\u53bbn1</p>"},{"location":"notes/cs/algorithm/fds/fds/#bst-binary-search-tree","title":"BST binary search tree","text":"<p>def\uff1a</p> <ol> <li>\u5de6\u5b50\u6811\u6570\u503c\u4e00\u5b9a\u5c0f\u4e8e\u6839\u7ed3\u70b9\uff0c\u53f3\u5b50\u6811\u4e00\u5b9a\u5927\u4e8e\u6839\u7ed3\u70b9\uff08\u5f53\u524d\u6811\u7684\uff09</li> <li>\u5de6\u53f3\u5b50\u6811\u90fd\u662fBST\uff01\uff01\uff01\uff01</li> </ol> <p>\u9002\u7528\u4e8e\uff1a\u52a8\u6001\u67e5\u627e</p> <p>\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u7531\u5c0f\u5230\u5927\u8f93\u51fa</p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_3","title":"Implementation","text":"<ol> <li>find</li> </ol> <p>\u9012\u5f52\u5b9e\u73b0\uff1a</p> <p>basecase\uff1aT = NULL</p> <p>\u5de6\u8fb9 else \u53f3\u8fb9 else \u672c\u8eab\u5c31\u662f\u6839\u7ed3\u70b9\u6570\u503c</p> <p>\u4e0e\u6811\u7684\u6df1\u5ea6\u6210\u6b63\u6bd4</p> <ol> <li>find min max</li> </ol> <p>\u9012\u5f52\u5411\u5de6\u53f3\u8fb9\u8d70</p> <ol> <li> <p>Insert</p> </li> <li> <p>check if k in</p> </li> <li> <p>\u770b\u5de6\u53f3\u8fd8\u6709\u5417 \u6ca1\u6709\u5c31\u63d2</p> <pre><code>tree insert(element x, BST t){\n  if(t == NULL){\n    T = ()malloc(sizeof(struct Treenode));\n    T-&gt;element = x;\n    T-left = T-&gt;Right = NULL;\n  }\n  else{\n    if(T-&gt;element &gt; x){\n      t-&gt;Left = insert(x, t-&gt;Left);\n    }\n    else{\n      t-&gt;right = insert(x,t-&gt;right);\n    }\n  }\n  return t\n}\n</code></pre> </li> <li> <p>delete</p> </li> <li> <p>delete a leaf: make its parent point to NULL</p> </li> <li>n1: replace it by its single child, and free it</li> <li>n2:</li> </ol> <p>\u5c3d\u91cf\u4fdd\u8bc1\u539f\u6765\u6811\u7684\u7ed3\u6784\uff1a\u7528\u66ff\u6362\u7684\u65b9\u6cd5</p> <p>\u9009\u5de6\u8fb9\u6700\u5927\u7684\u5143\u7d20\u6216\u8005\u53f3\u8fb9\u6700\u5c0f\u7684\u5143\u7d20\u653e\u5230\u5220\u9664\u4f4d\u7f6e\uff0c\u518d\u5c06\u7528\u6765\u66ff\u6362\u7684\u5143\u7d20</p> <pre><code>tree delete(element x, BST t){\n  position tmpcell\n  if(t == NULL)\n    return not found;\n  else if(x &lt; t-&gt;element)\n    t-&gt;right = delete(x, t-&gt;right);\n  else if(x &gt; t-&gt;element)\n    t-&gt;left = delete(x, t-&gt;left)//search for the position\n   else{\n     if(t-&gt;left &amp;&amp; t-&gt;left){//if n2\n       tmpcell = findmin(t-&gt;right);//use find a min on right way\n       t-&gt;element = tmpcell-&gt;element;\n       t-&gt;right = delete(t-&gt;element, t-&gt;right);\n     }\n     else{// if n0 or n1\n       tmpcell = t;\n       if(t-&gt;left == NULL)\n         t = t-&gt;right;\n       else if(t-&gt;right == NULL)\n         t = t-&gt;left;\n       free(tmpcell);\n     } \n   }\n  return t;//return t to its parent \n}\n</code></pre> <p>lazy deletion: don't free a node but add a flag to it</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-08-priority-queueheaps","title":"Lec 08 Priority Queue(Heaps)","text":"<p>delete the element with the highest / lowest priority </p>"},{"location":"notes/cs/algorithm/fds/fds/#binary-heap","title":"Binary Heap","text":"<ol> <li>Structure Property</li> </ol> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a</p> <p>\u4fdd\u8bc1\u6811\u9ad8h=logn</p> <p>\u662f\u90e8\u5206\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811--&gt;\u5b8c\u5168\u4e09\u89d2\u5f62\u4e14\u8282\u70b9\u7684\u6807\u53f7\u662f\u5b8c\u5168\u6309\u7167\u987a\u5e8f\u7684</p> <p>\u9002\u5408\u7528\u6570\u7ec4\u5b58\u653e\uff08\u5b8c\u5168\u5229\u7528\u7a7a\u95f4\uff09</p> <p>\u7528\u6570\u7ec4\u8fdb\u884c\u5b58\u50a8\uff1a</p> <p></p> <p>\u4e0d\u4f1a\u6709\u7a7a\u95f4\u6d6a\u8d39\uff08\u65e0\u504f\u659c\u6811\uff09</p> <p>\u4eceindex = 1 \u5f00\u59cb\u5b58\u50a8</p> <p>index = 0 \u7684\u4f4d\u7f6e\u4f5c\u4e3a\u54e8\u5175\uff0c\u8bbe\u7f6e\u6210\u79bb\u5f00\u6570\u503c\u8303\u56f4\u7684\u503c</p> <ul> <li>\u8fd0\u52a8\u65b9\u5f0f\uff1a\u4ee5\u6570\u7ec4\u89d2\u68071\u5f00\u59cb</li> </ul> <p>--&gt;\u4e0b\u6807x2 \u5411\u5de6\u8d70</p> <p>--&gt;\u4e0b\u6807x2 + 1\u5411\u53f3\u8d70</p> <p>\u4ece\u4e0b\u5f80\u4e0a\u8d70\uff1a\u27972 \u53d6\u6574</p> <p></p> <ol> <li>Order Property</li> </ol> <p>To def min heap and max heap: </p> <p>\u200b    \u76f4\u5c5e\u7684\u5927\u5c0f\u5173\u7cfb\u5206\u522b\u4e3a\u9012\u589e/\u9012\u51cf\uff0c\u6bd4\u8f83\u5144\u5f1f\u4e0d\u4e00\u5b9a\uff0c\u6cbf\u8def\u5f84\u5355\u8c03\uff0c\u56e0\u6b64\u641c\u7d22\u4efb\u610f\u503c\u4e00\u5b9a\u8981\u5168\u90e8\u626b\u63cf\uff0c\u6240\u4ee5HEAP\u4e0d\u9002\u7528\u4e8e\u641c\u7d22\uff08BST\u66f4\u597d\uff09</p> <p>\u200b    \u4f46\u662froot\u4e00\u5b9a\u662f\u6700\u503c\uff0c\u6240\u4ee5\u9002\u5408\u5bf9\u6700\u503c\u64cd\u4f5c</p> <p>### Operation</p> <ol> <li>Insertion: \u4e0a\u6ee4 </li> </ol> <p>\u5047\u8bbe\u653e\u5728\u6700\u672b\u5c3e\u2014&gt;\u5224\u65ad(\u4e0eparent\u5927\u5c0f)\u662f\u5426\u6210\u7acb</p> <pre><code>void Insertion(data x, Queue H){\n int i;\n  if(isFull) Error;\n  for(i = ++H-&gt;size; H-&gt;element[i/2] &gt; x; i = i/2){// \u603b\u4f1a\u6709\u54e8\u5175\u4f7f\u4e4b\u505c\u6b62                    //\u4e0eparent\u6bd4\u8f83\u5927\u5c0f\n    H-&gt;element[i] = H-&gt;element[i/2];//\u4e0a\u6ee4\u627e\u4f4d\u7f6e \u975e\u4ea4\u6362\n        ^\n        |\n//\u5728\u8fd9\u91cc\u7b2c\u4e00\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u52a0\u5165\u4e00\u4e2a\u65b0\u5355\u5143 \u56e0\u4e3ai = size\u662f\u8fb9\u754c\uff0c++size\u662f\u65b0\u7684\u7a7a\u95f4\n  }\n  H-&gt;element[i] = x;\n}\n</code></pre> <p>O(logn)</p> <ol> <li>Delete min\uff1a\u4e0b\u6ee4</li> </ol> <p>\u5305\u62ec\u62ff\u51fa\u6700\u5c0f\u503c\u548c\u91cd\u6784Heap</p> <p>\u91cd\u6784\uff1a\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u7684\u6570\u636e\uff0c\u4e0b\u6ee4\uff08\u7531root\u4f4d\uff09\u627e\u5230\u53ef\u4ee5\u653e\u4ed6\u7684\u5730\u65b9</p> <pre><code>int Deletemin(Heap H){\n  int i, child;\n  1.\u5224\u7a7a\uff1b\n  minelement = H-&gt;element[1];\n  lastelement = H-&gt;element[H-&gt;size--];//\u6682\u65f6\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u5143\u7d20\n  for(i = 1; i*2 &lt;= H-&gt;size; i = child){//\u4e0b\u6ee4\u8fc7\u7a0b\n    child = i*2;\n    if(child != H-&gt;size &amp;&amp; [child+1] &lt; [child])\n      child ++;//\u6682\u5b58\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8981\u6ee1\u8db3property\uff1a\u9700\u8981\u5c0f\u4e8e\u4e24\u4e2a\u5b69\u5b50\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\n    if(lastelement &gt; [child])\n       [i] = [child];//\u4e0b\u6ee4\n    else break;//\u627e\u5230\u4f4d\u7f6e\uff0cbreak\n  }\n  [i] = lastelement;\n  return minelement;\n}\n</code></pre> <ol> <li>Decrease/Increase Key: </li> </ol> <p>\u8c03\u6574\u4f18\u5148\u7ea7\uff0c\u5c06\u4efb\u52a1\u4e0a\u6d6e\u6216\u4e0b\u6c89\uff0cKey\u662f\u67d0\u4e2a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c\u6539\u53d8Key\u7684\u5927\u5c0f</p> <p>\u9700\u8981\u91cd\u65b0\u8c03\u6574\u5806\u4f7f\u5176\u4fdd\u6301\u7279\u6027</p> <pre><code>void DecreaseKey(int i, int value, Heap *h){\n    int j;\n    if(i &gt; h-&gt;size){\n        printf(\"Index is not in the heap\\n\");\n        return;\n    }\n    if(h-&gt;element[i] &lt; value){\n        printf(\"New value is greater than current value\\n\");\n        return;\n    }\n    for(j = i; h-&gt;element[j/2] &gt; value; j/=2){\n        h-&gt;element[j] = h-&gt;element[j/2];\n    }\n    h-&gt;element[j] = value;\n}\n</code></pre> <ol> <li>Delete\uff1a</li> </ol> <p>\u5148Decrease \u518d Deletemin</p> <ol> <li>build Heap</li> </ol> <pre><code>void BuildHeap(Array H[]){\n  int i = h-&gt;size/2;\n    for(; i &gt; 0; i--){\n        int j = i;\n        int tmp = h-&gt;element[j];\n        int k = j*2;\n        while(k &lt;= h-&gt;size){\n            if(k &lt; h-&gt;size &amp;&amp; h-&gt;element[k] &gt; h-&gt;element[k+1]){\n                k++;\n            }\n            if(tmp &gt; h-&gt;element[k]){\n                h-&gt;element[j] = h-&gt;element[k];\n                j = k;\n                k = j*2;\n            }else{\n                break;\n            }\n        }\n        h-&gt;element[j] = tmp;\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#lec-09-disjoint-set","title":"Lec 09 Disjoint set","text":"<p>\u7b49\u4ef7\u5173\u7cfb equivalent relation </p> <p>symmetric reflexive transitive</p> <p>\u7b49\u4ef7\u7c7b\uff1a \u5177\u6709\u76f8\u540c\u7b49\u4ef7\u5173\u7cfb\u7684\u4e00\u7c7b\u5bf9\u8c61</p> <ul> <li>eg\uff1a\u5bf9\u7b49\u4ef7\u7c7b\u8fdb\u884c\u5206\u7c7b</li> </ul> <p></p> <pre><code>void find(){//\u5e76\u67e5\u96c6\u7b97\u6cd5\n//1.read in relaitions\nInitial n disjoint set;\n  while(read in a~b){\n    if(!(Find(a) == Find(b))){//\u5982\u679c\u4e24\u8005\u4e0d\u5c5e\u4e8e\u540c\u4e00\u5bb6\u65cf\uff0c\n      Union two set//\u5408\u5e76\u8fd9\u4e24\u4e2a\u5bb6\u65cf\n    }\n  }\n//2.dicide if a~b\n    while(read in a and b)\n    if(Find(a) == Find(b)) output(true);\n    else output(false)\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_4","title":"Implementation","text":"<p>\u7528\u6570\u7ec4\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6307\u9488</p> <p>Union</p> <p>S[element] = element's parent </p> <p>S[root] = 0 and </p> <p></p> <p>Find</p> <pre><code>for(;S[x] &gt; 0; x = S[x])\n  return x;\n</code></pre> <p>\u4f46\u662f\u4f1a\u6709\u53ef\u80fd\u6210\u4e3a\u7ebf\u6027\u94fe\u8868\uff0c\u6811\u9ad8\u975e\u5e38\u9ad8</p> <p>Smart Union</p> <ol> <li>union by size</li> </ol> <p>\u5b58\u653esize\uff1aS[root] = -size</p> <p>\u6b64\u65f6\u7684size\u4e0d\u4f1a\u8d85\u8fc7log2(N)+1</p> <p>Path compression</p> <pre><code>type find(s, x){\n    if(S[x] &lt;= 0) return x;\n  else return S[x] = find(S[x], S);//\u9012\u5f52\u7684\u5c06\u7ecf\u8fc7\u8282\u70b9\u8fde\u5230father \u4ece\u800c\u8fbe\u5230path compress\n}\n</code></pre> <p>\u975e\u5c3e\u9012\u5f52\uff0c\u4f1a\u5728\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u4faf\u5c06\u7ecf\u8fc7\u7684\u8282\u70b9\u8fde\u5230father\u4e0a</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec10-graph-algorithm","title":"Lec10 Graph Algorithm","text":"<p>\u4e00\u4e2a\u6328\u7740\u4e00\u4e2a-&gt;\u7ebf\u6027\u8868</p> <p>\u4e00\u4e2a\u7ba1\u597d\u591a\u4e2a-&gt;\u6811</p> <p>\u6811\u662f\u56fe\u7684\u7279\u6b8a\u60c5\u51b5</p> <p>\u56fe\u662f\u591a\u5bf9\u591a</p>"},{"location":"notes/cs/algorithm/fds/fds/#def","title":"Def","text":"<p>G(V, E) \u9876\u70b9 \u8fb9</p> <p>\u53ef\u4ee5\u53ea\u6709\u9876\u70b9\u6ca1\u6709\u8fb9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9</p> <ul> <li>\u65e0\u5411\u56fe undirected</li> </ul> <p>(v1, v2)</p> <ul> <li>\u6709\u5411\u56fe directed</li> </ul> <p>&lt; v1, v2 &gt;</p> <p>complete graph : a graph has max edges </p> <p>\u8fb9\u6570\uff1a\u6709\u5411n*(n-1)</p> <p>\u200b       \u65e0\u5411n*(n-1)/2</p> <p>adjacent:\u76f8\u90bb\u7684</p> <p>\u5bf9\u6709\u5411\u56fe\uff1aA-&gt;B: A is adjacent to B, B is adjacent from A</p> <p>subgraph: \u9876\u70b9\u7684\u5b50\u96c6&amp;&amp;\u8fb9\u7684\u5b50\u96c6</p> <p>path:(v1, v2,......)</p> <p>length of path: \u8fb9\u7684\u6570\u91cf</p> <p>simple path\uff1a\u6bcf\u4e2av\u4e0d\u76f8\u7b49</p> <p>circle: simple path with vi = vj \u5934\u5c3e\u76f8\u7b49\u7684simple path</p> <p>connected graph: every pair of v is connected </p> <p>Component: \u4e00\u4e2a\u56fe\u91cc\u7684\u6700\u5927\u8fde\u901a\u5b50\u56fe(\u4e0d\u80fd\u518d\u52a0\u5165\u4e00\u4e2av/e\uff0c \u5426\u5219\u5c31\u4e0d\u76f8\u8fde)</p> <p>tree: \u65e0\u73af\u7684\u6839\u7ed3\u70b9\u4e3a\u4e00\u7684\u56fe</p> <p>DAG: \u6709\u5411\u65e0\u73af\u56fe</p> <p>Strongly connected directed graph: \u4efb\u610f\u4e00\u5bf9\u9876\u70b9\uff0c\u5f80\u8fd4\u90fd\u6709\u8def</p> <p>Weakly connected: \u4e0d\u6ee1\u8db3\u5f3a\u8fde\u901a\uff0c\u4f46\u662f\u5c06\u5176\u8f6c\u53d8\u4e3a\u65e0\u5411\u56fe\u540e\u8fde\u901a\u7684\u56fe</p> <p>Degree: \u5165\u5ea6+\u51fa\u5ea6Degree: number of edges incident to v. 2E=\u2211degree</p>"},{"location":"notes/cs/algorithm/fds/fds/#representation","title":"Representation","text":"<ul> <li>\u4e8c\u7ef4\u6570\u7ec4</li> </ul> <p>adj_set[ i ] [ j ] = 1 if i j connected else = 0</p> <ul> <li>\u94fe\u8868</li> </ul> <p>\u53ea\u5b58\u51fa\u5ea6</p> <p>n\u4e2a\u9876\u70b9\uff0c\u8981\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u4e00\u7ef4\u6570\u7ec4\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u662f\u6bcf\u4e2a\u9876\u70b9</p> <p>\u6570\u7ec4\u5143\u7d20\u662f\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u5373\u76f8\u5f53\u4e8e\u5f00n\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u5b58\u50a8\u65f6\uff1a</p> <p>A-&gt;B\uff1a\u627eA\u94fe\u8868\uff0c\u5c06B\u7684\u5934\u8282\u70b9\u63d2\u5165\u5230A\u7684\u94fe\u8868\u4e2d</p> <p></p> <ul> <li>Multilist</li> </ul> <p>\u5b58\u8fb9\uff0c\u7ed3\u6784\u4f53\u91cc\u5305\u542bmark\uff0c\u7528\u4e8e\u6807\u8bb0\u8fd9\u6761\u8def\u662f\u975e\u88ab\u8bbf\u95ee\u8fc7\uff0c\u4e24\u4e2a\u70b9\u6307\u5411\u6240\u8fde\u63a5\u7684\u8282\u70b9</p> <ol> <li>\u62d3\u6251\u6392\u5e8f</li> </ol> <p></p> <p>AOV Network activity on verticle</p> <p>\u4e00\u5b9a\u662f\u975e\u81ea\u53cd\u7684-&gt; DAG</p> <p>\u62d3\u6251\u5e8f\uff1a</p> <p>\u7406\u89e3\uff1a\u6309\u7167\u6240\u6709\u7684\u5148\u4fee\u8bfe\u90fd\u4e0d\u51b2\u7a81\u7684\u60c5\u51b5\u80fd\u6392\u51fa\u4e00\u4e2a\u8bfe\u8868</p> <pre><code>void Toposort(Graph G){\n  int counter;\n  Vertex v, w;\n  for(counter = 0; counter &lt; Numvertex; counter ++){\n    v = findNewVertexofDegreeZero();//\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u8fb9\n    if(v == NotAVertex){\n      Error(\"Graph is a cycle\"); break;\n    }\n    TopNum[v] = counter;//\u5982\u679c\u6709\u53ef\u4ee5\u5b66\u7684\u8bfe\uff0c\u5c06\u5b83\u5b66\u6389\n    for(each w adjacent from v)\n      indegree[w]--;//\u5e76\u4e14\u5c06\u4ee5\u5b83\u4e3a\u9884\u4fee\u8bfe\u7684\u8bfe\u4e2d\u5220\u6389\uff08\u51cf\u5c0f\u4ed6\u7684\u4e0b\u4e00\u95e8\u8bfe\u7684\u5165\u5ea6\uff09\n  }\n}//O(v^2)\n</code></pre> <p>\u6539\u8fdb\uff1a\u91c7\u7528\u4e00\u4e2a\u7ed3\u6784\u5b58\u50a8\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9</p> <p></p>"},{"location":"notes/cs/algorithm/fds/fds/#lec11-shortest-path-algorithm","title":"Lec11 Shortest Path Algorithm","text":"<p>\u4e24\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u548c\u6700\u5c0f-&gt;weighted path length \u6700\u5c0f\u503c</p> <ol> <li>single-source \u5355\u6e90\u6700\u77ed\u8def</li> </ol> <p>\u56fa\u5b9a\u4e00\u4e2a\u9876\u70b9\u5230\u5176\u4ed6\u70b9\u7684\uff08\u52a0\u6743\uff09\u8ddd\u79bb\u6700\u5c0f</p> <ul> <li>\u65e0\u6743\uff1a\u7b49\u4ef7\u4e0e\u6bcf\u6761\u8def\u7684\u6743\u91cd\u662f1</li> </ul> <p>Breadth-first Search: \u56fa\u5b9a\u4e00\u4e2a\u70b9 \u627e\u4e0e\u4ed6\u8ddd\u79bb\u4e3a1\u7684\u70b9 </p> <p>\u8fc7\u7a0b\u4e2d\u6807\u8bb0\u907f\u514d\u8d70\u91cd\u590d\u8def\u7ecf </p> <p>\u5b58\u50a8\u8def\u5f84\uff1a\u7528\u7236\u6307\u9488\u8bb0\u5f55\u524d\u4e00\u4e2a\u4f4d\u7f6e \u5b58\u524d\u7f6e\u9876\u70b9\u7684\u7f16\u53f7</p> <pre><code>void Unweighted(Table T){//T is initialized with source vertex S\n  queue q;\n  vertex v, w;\n  q = CreateQueue(NumVer); MakeEmpty(q);\n  Enqueue(S, q);//\u521d\u59cb\u5316\u65f6\u5c06\u8d77\u70b9\u8fdb\u961f\u5217\n  while(!IsEmpty(q)){\n    v = Dequeue(q);//\u5c06\u5f53\u524d\u8282\u70b9\u63a8\u51fa\u961f\u5217\n    T[v].Known = true;//tag the vertex which has been visited\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u4e0d\u8981\n    for(each w adjacent from v){\n      if(T[w].Dist == infinity){//\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u88ab\u8bbf\u95ee\n        T[w].Dist = T[v].Dist + 1;//\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\n        T[w].Path = v;//\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\n        Enqueue(w, q);//\u5c06\u90bb\u8fd1\u7684\u8282\u70b9\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u5f53\u524d\u4f4d\u7f6e\n      }\n    }\n  }\n  DisposeQueue(q);\n}\n</code></pre> <p>O(V+E): \u6bcf\u6b21\u8fdb\u5165\u4e00\u4e2aV \u8d70\u904dV</p> <ul> <li>\u6709\u6743\uff1a</li> </ul> <p>Dajkstra</p> <pre><code>void Dijkstra(Table T){\n  for(;;){\n    v = smallest unknown distance vertex;\n    T[v].known = true;\n    for(each w adjacent to v){\n      if(T[w].known == false){\n        if(T[v].distance + Cvw &lt; T[w].distance){\n          T[w].distance = T[v].distance + Cvw;\n          T[w].path = v;\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#lec-12-network-flow-minimum-spanning-tree","title":"Lec 12 Network Flow &amp; Minimum Spanning Tree","text":"<p>Network Flow</p> <p>Network \u6709\u6743</p> <p>Flow \u6709\u5411</p> <p>\u7531source \u5230sink \u6e90\u5230\u6c47</p> <p>\u5c06\u6bcf\u4e2a\u8fb9\u7684\u5927\u5c0f\u5f53\u4f5c\u7ba1\u9053\u7684\u6700\u5927\u6d41\u91cf</p> <p>The task is to find the maximum amount of flow that can pass from s to t</p> <ol> <li>undo</li> </ol> <p>\u627e\u5230\u4e00\u6761\u8def\u4e0a\u6700\u5927\u901a\u91cf\uff0c\u5c06\u8fd9\u6761\u8def\u4e0a\u7684\u6bcf\u6761\u8fb9\u51cf\u53bb\u8fd9\u4e2a\u503c\uff0c\u5e76\u5728\u6bcf\u6761\u8def\u4e0a\u53cd\u5411\u52a0\u4e00\u4e2a\u8fd9\u4e2a\u503c</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(fE) f\u662f\u6700\u5927\u6d41</p> <p>Minimum spanning tree </p> <p>\u4e00\u4e2a\u5b50\u56fe\u5305\u542b\u6240\u6709\u9876\u70b9\uff0c\u5305\u542b\u4e00\u90e8\u5206\u8fb9\uff0c\u6784\u6210\u4e86\u4e00\u4e2a\u6811</p> <p>use greedy:</p> <ol> <li>use only edges within graph </li> <li>use exactly V-1 edges </li> <li>no use edges that produce cycle</li> </ol> <p>Prim : grow a tree</p> <p>\u7c7b\u4f3cDijkatra \u56e0\u4e3a\u751f\u6210\u6811\u9700\u8981n\u4e2a\u70b9\uff0c\u6bcf\u4e00\u6b65\u90fd\u662f\u5b50\u751f\u6210\u6811</p> <p>\u5f00\u59cb\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u627e\u90bb\u8fb9\u6700\u5c0f\u7684\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u6b64\u65f6\u5c31\u6709\u4e86\u4e00\u4e2a\u5b50\u751f\u6210\u6811\uff0c\u63a5\u4e0b\u6765\u6bcf\u4e00\u6b65\u90fd\u9700\u8981\u9009\u62e9\u8fd9\u4e2a\u5b50\u6811\u7684\u5411\u5916\u6269\u5c55\u8fb9\uff08\u8fb9\u7684\u4e00\u5934\u5728\u6811\u4e0a\uff0c\u4e00\u5934\u4e0d\u5728\uff09</p> <p>Kruskal : maintain  a forest</p> <p>\u4ee5\u8fb9\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u6bcf\u6b21\u627e\u6700\u5c0f\u7684\u8fb9\uff0c\u540c\u65f6\u4fdd\u8bc1\u4e0d\u6784\u6210\u56de\u8def\uff0c\u8fd9\u6837\u9009\u5b8cn-1\u6761\u8fb9\u540e\uff0c\u5c31\u4f1a\u6709\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811</p> <pre><code>void Kruskal(Graph g){\n  T = {};//set as empty\n  while(|T| &lt; V-1 edges &amp;&amp; E is not empty){\n    choose a least cost edges(v, w) from E;\n    delete it from E;\n    if((v, w) wont cause a cycle)\n      add(v, w) to T;\n    else\n      discard it;\n  }\n}\n</code></pre> <p>\u9002\u7528\u4e8e</p> <p>\u53ef\u4ee5\u7528\u5806\u627e\u5230\u6700\u5c0f\u503c</p> <p>\u5224\u65ad\u662f\u5426\u6784\u6210\u56de\u8def\uff1a\u5e76\u67e5\u96c6\u7b97\u6cd5\uff0c\u6bcf\u6b21\u627e\u8fb9\u7684\u65f6\u5019\u76f8\u5f53\u4e8e\u52a0\u5165\u4e00\u4e2a\u7b49\u4ef7\u5173\u7cfb</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO()</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-13-bfs-dfs","title":"Lec 13 BFS DFS","text":"<p>\u56fe\u76f8\u5173\u95ee\u9898\u7684\u672c\u8d28\u662f\u904d\u5386</p> <p>\u5c06\u4e8c\u7ef4\u7ed3\u6784\u8f6c\u5316\u6210\u4e00\u7ef4\u7ed3\u6784\u53bb\u505a</p> <p>\u904d\u5386\u65f6\uff1a\u9700\u8981\u9009\u5b9a\u4e00\u4e2a\u57fa\u51c6\u4f4d\u7f6e\uff0c\u5728\u57fa\u51c6\u4f4d\u7f6e\u4e0a\u627e\u76f8\u8fde\u63a5\u7684\u5404\u4e2a\u70b9</p> <p>\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u76f8\u90bb\u70b9\uff0c\u5269\u4e0b\u7684\u70b9\u9700\u8981\u4fdd\u5b58</p> <p>--&gt;\u6839\u636e\u4fdd\u5b58\u65b9\u6cd5\u5206\u7c7b\uff1a</p> <ol> <li>\u7528\u961f\u5217\uff1a\u5bbd\u5ea6\u641c\u7d22</li> <li>\u7528\u5806\u6808\uff1a\u6df1\u5ea6\u641c\u7d22 \u4f46\u662f\u7a0b\u5e8f\u5b9e\u73b0\u65f6\u901a\u5e38\u7528\u9012\u5f52\u800c\u4e0d\u7528\u5806\u6808</li> </ol> <p>DFS</p> <ol> <li>undirected</li> </ol> <pre><code>void DFS(Vertex a){\n  visited[a] = true;\n  for(each w adjacent to v){\n    if(!visited[w]){\n      DFS(w);\n      printf(\"\\n\");\n    }\n  }\n}\n</code></pre> <p>\u8ba1\u7b97\u8fde\u901a\u5206\u91cf\uff1a\u5bf9\u4e00\u4e2a\u56fe\u8fdb\u884c\u904d\u5386\u540e\u67e5\u770bvisited \u5982\u679c\u6ca1\u6709visited\uff0c\u8c03\u7528DFS \u5206\u91cf= DFS\u8c03\u7528\u6b21\u6570</p> <p>\u53cc\u8054\u901a\uff1a\u62ff\u6389\u56fe\u4e2d\u4e00\u4e2a\u70b9\uff0c\u5269\u4f59\u7684\u56fe\u4ecd\u7136\u662f\u8054\u901a\u7684</p> <p>\u62ff\u6389\u540e\u56fe\u4e0d\u8fde\u901a \u79f0\u8fd9\u4e2a\u70b9\uff1a\u5173\u8282\u70b9articulation</p> <p>\u53cc\u8054\u901a\u5219\u65e0\u5173\u8282\u70b9</p> <p>\u53cc\u8054\u901a\u5206\u91cf\uff1a\u6700\u5927\u5b50\u53cc\u8054\u901a\u56fe</p> <p>Q1:\u8ba1\u7b97\u53cc\u8054\u901a\u5206\u91cf</p> <ol> <li>\u6df1\u5ea6\u904d\u5386 \u904d\u5386\u65f6\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0Num\u4f5c\u4e3a\u904d\u5386\u7684\u987a\u5e8f</li> <li>\u8ba1\u7b97Low\u503c\uff1aLow\u7684\u7406\u89e3\uff1a\u6211\u80fd\u8054\u7edc\u5230\u7684\u6700\u9ad8\u5c42\uff08\u6700\u5c0f\u7684num\uff09</li> <li>\u67e5\u770b\u6ee1\u8db3\u5173\u8282\u7684\u6761\u4ef6</li> </ol> <p></p> <p>Q2:Euler Circuit</p> <p>\u4e00\u7b14\u753b</p> <p>\u7ed3\u8bba\uff1a</p> <ol> <li>\u5982\u679c\u6240\u6709\u8282\u70b9\u7684\u5ea6\u90fd\u662f\u5076\u6570\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u6b27\u62c9\u56de\u8defEuler Circuit\uff08\u8d77\u6b62\u70b9\u76f8\u540c\uff09</li> <li>\u5982\u679c\u6709\u4e24\u4e2a\u5947\u6570\u5ea6\u8282\u70b9\uff0c\u53ef\u4ee5\u5f62\u6210\u6b27\u62c9\u8def\u5f84Euler Tour\uff08\u4e00\u7b14\u753b\u4f46\u4e0d\u7528\u8d77\u6b62\u70b9\u76f8\u540c\uff09</li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(E + V)</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-14-sorting","title":"Lec 14 Sorting","text":"<p>selection</p> <p>bubble</p> <p>insertion</p> <pre><code>void insertion(int a[], int n){\n  int tmp;\n  for(int p = 1; p &lt; n; p++){\n    tmp = a[p];\n    for(int j = p; j &gt; 0 &amp;&amp; a[j-1] &gt; tmp; j--)\n      a[j] = a[j-1];//\u79fb\u4f4d\n    a[j] = tmp;\n  }\n}//\u5e73\u5747O(n^2) \u6709\u5e8f\u65f6\u6700\u597dO(n) \u65e0\u5e8f\u65f6O(n^2)\n</code></pre> <p>Inversion \u9006\u5e8f\uff1a\u5927\u5c0f\u4e0e\u4f4d\u7f6e\u4e0d\u5339\u914d\u7684\u4e24\u9879</p> <p>\u6700\u574f\u7684\u60c5\u51b5\uff1aC(2 n)\u4e2a\u9006\u5e8f \u9700\u8981\u4ea4\u6362C(2 n)\u6b21</p> <p>\u5e73\u5747\uff1an^2/4</p> <p>Shellsort</p> <p>\u5206\u7ec4\u4f7f\u7528\u63d2\u5165</p> <p>\u6700\u574fn^(3/4) \u5e73\u5747 n^(6/7)</p> <p>Heap sort</p> <p>\u6811\u5f62\u9009\u62e9</p> <ol> <li> <p>\u9996\u5148\u5efa\u5806 \u91cd\u590d\u53bb\u9664\u5806\u9876\u5143\u7d20 O(nlongn)</p> </li> <li> <p>\u5efa\u6700\u5927\u5806\uff0c\u6bcf\u6b21\u5c06\u5806\u9876\u653e\u5230\u6570\u7ec4\u6700\u540e\u7aef\uff0c\u7136\u540e\u7ef4\u62a4\u8fd9\u4e2a\u5806</p> </li> </ol> <pre><code>\n</code></pre> <p>2NlogN-O(NloglogN)</p> <p>\u5feb\u6392\u548cmerge\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u601d\u60f3\uff1adivede and conquer and merge </p> <p>\u4f46\u662f\u4fa7\u91cd\u70b9\u4e0d\u540c\uff1a</p> <ol> <li>merge\u5728\u4e8c\u5206\u6570\u7ec4\u540e\u5f3a\u8c03\u5728\u5206\u6cbb\u4e4b\u540e\u7684\u5f52\u5e76\uff0c\u4f46\u662f\u5f52\u5e76\u7684\u65f6\u5019\u82e5\u5de6\u8fb9\u5df2\u7ecf\u5168\u90e8\u5c0f\u4e8e\u53f3\u8fb9\uff0c\u5219\u65e0\u9700merge \u8fd9\u5c31\u662f\u5feb\u6392\u7684\u76ee\u6807</li> <li>\u5feb\u6392\u5f3a\u8c03\u5728divide\u65f6\u627e\u5230\u57fa\u51c6\u5143\u7d20pivot \u4f7f\u5f97\u5206\u6cbb\u7684\u6570\u7ec4\u6574\u4e2a\u90fd\u5927\u4e8e\u6216\u5c0f\u4e8e</li> </ol> <p>Merge sort</p> <p>O(nlogn)</p> <p>Quick sort</p> <p>slower than insertion when N &lt;= 20</p> <p>\u9009\u62e9pivot\uff1a\u53ef\u4ee5\u524d\u4e2d\u540e\u4e09\u4e2a\u91cc\u9762\u53d6\u9002\u4e2d\u7684</p> <p>\u4e00\u5b9a\u662f\u9002\u4e2d\u7684\uff1a\u968f\u673a\u9009\u4e94\u4e2a \u4e2d\u95f4\u7684\u5143\u7d20</p> <p>hqm\u7684qsort\uff1a</p> <pre><code>\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#lec-16-hashing","title":"Lec 16 Hashing","text":"<p>\u5747\u5300</p> <p>\u54c8\u5e0c\u51fd\u6570\u600e\u4e48\u8bbe\u8ba1</p> <p>\u51b2\u7a81\u600e\u4e48\u89e3\u51b3</p> <p>\u54c8\u5e0c\u65b9\u6cd5\u7684\u8bc4\u4ef7</p> <p>Hashing for searching</p> <p>\u901a\u8fc7\u8ba1\u7b97\u6765\u627e\u5bf9\u8c61</p> <ul> <li>\u5b57\u5178\u95ee\u9898</li> </ul> <p>ADT</p> <p>&lt; name, attribute &gt;</p> <p>hash table:</p> <p>n \u662f\u5b9e\u9645\u8fdb\u5165\u7684\u54c8\u5e0c\u5143\u7d20 T\u662f\u53ef\u63d0\u4f9b\u7684\u4e0d\u540c\u54c8\u5e0c\u503c</p> <p>identifier density: n/T </p> <p>loading density: n/sb   sb\u662f\u54c8\u5e0c\u8868\u7684\u9762\u79ef\uff08\u53ef\u4ee5\u5b58\u653e\u7684\u6570\u91cf\uff09</p>"},{"location":"notes/cs/algorithm/fds/fds/#design-hash","title":"Design Hash","text":"<p>\u6570\u5b57\uff1a</p> <ol> <li>\u6c42\u4f59\u6cd5 u(x) = x%m</li> <li>\u5e73\u65b9\u53d6\u4e2d\uff1a</li> </ol> <p>\u5c06\u6570\u5e73\u65b9\uff0c\u53d6\u4e2d\u95f4\u7684\u4e24\u4f4d\u6570</p> <ol> <li>\u6298\u53e0\u6cd5\uff1a</li> <li>\u6570\u5b57\u5206\u6790\u6cd5</li> </ol> <p>\u5b57\u7b26\u4e32\uff1a\u5148\u53d8\u4e3a\u6570\u5b57</p> <p>\u901a\u8fc7\u4f4d\u8fd0\u7b97\u8fdb\u884c\u8f6c\u6362\uff1a</p> <pre><code>int index_hash(char *x, int tablesize){\n  unsigned int hashval = 0;\n  while(*x != '\\0')\n    hashval = (hashval &lt;&lt; 5) + *x++;//\u76f8\u5f53\u4e8e x 32\n  return hashval % tablesize;\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#collision","title":"Collision","text":"<ol> <li>\u94fe\u8868\u89e3\u51b3\uff1an\u4e2a\u5143\u7d20\uff0c\u54c8\u5e0c\u8868\u81f3\u5c11\u957f\u5ea6\u4e3a2n</li> </ol> <p>O(1) insertion</p> <ol> <li>open addressing:</li> </ol> <p>\uff08H(x) + f(i) \uff09% Tablesize</p> <p>i\u662f\u51b2\u7a81\u6b21\u6570\uff0cf\u8868\u793a\u504f\u79fb\u91cf\uff0c\u5178\u578b\u7684\u662ff(i) = i, \u79f0\u4e3a</p> <ul> <li>\u7ebf\u6027\u63a2\u6d4bprobing</li> </ul> <p>\u5e73\u5747\u6210\u529f\u67e5\u627e\u6b21\u6570\uff1a\u679a\u4e3e\u6cd5</p> <p>\u5e73\u5747\u4e0d\u6210\u529f\u67e5\u627e\u6b21\u6570\uff1a\u6839\u636e\u54c8\u5e0c\u503c\u7684\u7279\u70b9\u5206\u7c7b \u5bf9\u6bcf\u7c7b\u6c42\u5e73\u5747\u503c</p> <ul> <li>\u4e8c\u6b21\u63a2\u6d4b\uff1a</li> </ul> <p>f(i) = i^2\u907f\u514d\u521d\u59cb\u805a\u96c6\uff0c\u4f46\u662f\u6709\u65f6\u5019\u4f1a\u627e\u4e0d\u5230\u7a7a\u4f4d</p> <p>\u5728\u4e0b\u5217\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0c\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4f4d\u7f6e\uff1a</p> <p>\u534a\u6ee1\uff0cTS = \u7d20\u6570</p> <ul> <li>double hashing:</li> </ul> <p>\u5c06f(i)\u8bbe\u8ba1\u4e3a\u65b0\u7684i*H2(x)</p> <p>\u5178\u578b\uff1aH2 = R-(x%R)</p> <ul> <li>rehash</li> </ul> <p>\u5c06\u8868\u6269\u5927\u4e00\u500d\u540e\u627e\u6700\u8fd1\u7684\u7d20\u6570</p> <p>rehash\u6761\u4ef6\uff1a</p> <ol> <li>\u5143\u7d20\u8d85\u8fc7\u4e00\u534a</li> <li>\u8d85\u8fc7load</li> <li>\u63d2\u5165\u5931\u8d25</li> </ol>"},{"location":"notes/lingo/verilog/","title":"Verilog","text":"<p>\u8fd9\u91cc\u662f\u4e00\u4e9b\u6211\u5728\u5f00\u59cbCO_2024\u540e\u5f00\u59cb\u8bb0\u5f55\u7684Verilog\u7b14\u8bb0\uff0c\u53ef\u80fd\u4e0d\u662f\u592a\u7cfb\u7edf\uff0c\u4f46\u662f\u6211\u4f1a\u5c3d\u91cf\u628a\u6211\u5b66\u5230\u7684\u4e1c\u897f\u8bb0\u5f55\u4e0b\u6765\u3002</p>"},{"location":"notes/lingo/verilog/#grammar","title":"Grammar","text":"<ul> <li>Module <pre><code>module module_name(\n    input wire input_name,\n    output reg output_name\n);\n    // statements  \nendmodule\n</code></pre></li> <li>Always block <pre><code>always @(posedge clk) begin\n    // statements\nend\n</code></pre> \u5f53always\u4e2d\u7684\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0c\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u8bed\u53e5\u3002 \u5fc5\u987b\u4f7f\u7528always block\u7684\u60c5\u51b5\uff1a 1. \u65f6\u5e8f\u903b\u8f91 2. \u590d\u6742\u5230\u4e0d\u80fd\u7528assign\u7684\u903b\u8f91</li> </ul> <p><code>always</code> \u5757\u9002\u7528\u4e8e\u63cf\u8ff0\u9700\u8981\u65f6\u949f\u8fb9\u6cbf\u89e6\u53d1\u7684\u884c\u4e3a\u6216\u8005\u590d\u6742\u7684\u903b\u8f91\u8ba1\u7b97\uff0c\u800c\u5bf9\u4e8e\u7b80\u5355\u7684\u7ec4\u5408\u903b\u8f91\u548c\u4e0d\u6d89\u53ca\u65f6\u949f\u7684\u7b80\u5355\u64cd\u4f5c\uff0c\u5219 <code>assign</code> \u8bed\u53e5\u66f4\u5408\u9002\u3002</p> <ul> <li>Wire &amp; Reg <pre><code>wire a;\nassign a = b &amp; c;\n\nreg [7:0] count;\nalways @(posedge clk) begin\n  count &lt;= count + 1;\nend\n</code></pre></li> </ul> <p><code>wire</code> : \u9002\u7528\u4e8e\u7ec4\u5408\u903b\u8f91\u548c\u6a21\u5757\u95f4\u7684\u8fde\u63a5 \u4e0d\u50a8\u5b58\u503c\u53ea\u8868\u793a\u4fe1\u53f7\u7684\u8fde\u63a5 \u7528assign\u8bed\u53e5\u8d4b\u503c</p> <p><code>reg</code> :  \u9002\u7528\u4e8e\u9700\u8981\u5b58\u50a8\u72b6\u6001\u7684\u65f6\u5e8f\u903b\u8f91 \u53ef\u4ee5\u5b58\u50a8\u503c\uff0c\u901a\u5e38\u7528\u4e8e\u63cf\u8ff0\u5bc4\u5b58\u5668\u3001\u8ba1\u6570\u5668\u7b49 \u7528always\u8bed\u53e5\u8d4b\u503c,\u6cbf\u65f6\u949f\u89e6\u53d1</p> <ul> <li>= and &lt;= <code>=</code> : blocking assignment <code>&lt;=</code> : non-blocking assignment     <code>=</code> \u4f1a\u5728\u540c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u7acb\u5373\u8d4b\u503c\uff0c\u800c <code>&lt;=</code> \u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8d4b\u503c\u3002</li> </ul>"}]}