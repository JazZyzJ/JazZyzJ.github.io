{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Space!","text":""},{"location":"#this-is-the-homepage-of-jazzyzjs-personal-space","title":"This is the homepage of JazZyzJ's personal space.","text":""},{"location":"#about-me","title":"About me","text":"<p>I am an undergraduate student at Zhejiang University, CKC Honors College, majoring in Computer Science and Technology in Turing Class.</p>"},{"location":"#contact-me","title":"Contact me","text":"<ul> <li>Email:chenzijie040528@gmail.com</li> <li>Github: JazZyzJ</li> </ul>"},{"location":"#purpose-of-this-space","title":"Purpose of this space","text":"<p>I will use this site as a blog to record my learning experience and share my thoughts not only in computer science but also in a wide range of fields.  </p> <p>Welcome to give me feedbacks and suggestions!</p>"},{"location":"Tool_Pool/GNU_Make/","title":"GNU Make","text":"<p>\u5bf9\u4e8e\u5927\u578b\u7684\u9879\u76ee\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u547d\u4ee4\u884c\u4e2d\u4e00\u6761\u4e00\u6761\u5730\u8f93\u5165\u7f16\u8bd1\u547d\u4ee4\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2a\u81ea\u52a8\u5316\u7684\u7f16\u8bd1\u5de5\u5177\uff0c\u8fd9\u4e2a\u5de5\u5177\u5c31\u662f make\u3002</p> <p>\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u7684\u6e90\u6587\u4ef6\u4e0d\u8ba1\u5176\u6570\uff0c\u5e76\u4e14\u6309\u7c7b\u578b\u3001\u529f\u80fd\u3001\u6a21\u5757\u5206\u522b\u653e\u5728\u82e5\u5e72\u4e2a\u76ee\u5f55\u4e2d\uff0cmakefile\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u6765\u6307\u5b9a\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u5148\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u540e\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u751a\u81f3\u4e8e\u8fdb\u884c\u66f4\u590d\u6742\u7684\u529f\u80fd\u64cd\u4f5c\uff0c\u56e0\u4e3amakefile\u5c31\u50cf\u4e00\u4e2aShell\u811a\u672c\u4e00\u6837\uff0c\u5176\u4e2d\u4e5f\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4\uff0c\u7136\u540e\u53ea\u9700\u8981\u4e00\u4e2amake\u547d\u4ee4\uff0cmakefile\u91cc\u7684\u89c4\u5219\u5c31\u4f1a\u81ea\u52a8\u751f\u6548\u3002</p> <p>\u5373\uff1amakefile\u5173\u7cfb\u5230\u6574\u4e2a\u5de5\u7a0b\u7684\u7f16\u8bd1\u89c4\u5219, \u91c7\u7528\u81ea\u52a8\u5316\u7f16\u8bd1</p>"},{"location":"Tool_Pool/GNU_Make/#_1","title":"\u5173\u4e8e\u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u94fe\u63a5","text":"<p>\u6b63\u5e38\u7684\u6587\u4ef6\u5728\u8fdb\u884c\u7f16\u8bd1\u65f6\uff0c\u9700\u8981\u7ecf\u8fc7\u56db\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\u3001\u7f16\u8bd1\u3001\u6c47\u7f16\u548c\u94fe\u63a5\u3002\u800c\u5728makefile\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u56db\u4e2a\u8fc7\u7a0b\u7b80\u5316\u4e3a\u4e24\u4e2a\u8fc7\u7a0b\uff1a 1. \u7f16\u8bd1\uff1a\u5c06\u6240\u6709\u7684.c\u6587\u4ef6\u7f16\u8bd1\u6210.o\u6587\u4ef6 \u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u7684\u662f\u8bed\u6cd5\u7684\u6b63\u786e\uff0c\u51fd\u6570\u4e0e\u53d8\u91cf\u7684\u58f0\u660e\u7684\u6b63\u786e\u3002</p> <ol> <li>\u94fe\u63a5\uff1a\u5c06\u6240\u6709\u7684.o\u6587\u4ef6\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6 \u94fe\u63a5\u65f6\uff0c\u4e3b\u8981\u662f\u94fe\u63a5\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u3002 \u94fe\u63a5\u5668\u5e76\u4e0d\u7ba1\u51fd\u6570\u6240\u5728\u7684\u6e90\u6587\u4ef6\uff0c\u53ea\u7ba1\u51fd\u6570\u7684\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\uff08Object File\uff09\uff0c\u5728\u5927\u591a\u6570\u65f6\u5019\uff0c\u7531\u4e8e\u6e90\u6587\u4ef6\u592a\u591a\uff0c\u7f16\u8bd1\u751f\u6210\u7684\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\u592a\u591a\uff0c\u800c\u5728\u94fe\u63a5\u65f6\u9700\u8981\u660e\u663e\u5730\u6307\u51fa\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\u540d\uff0c\u8fd9\u5bf9\u4e8e\u7f16\u8bd1\u5f88\u4e0d\u65b9\u4fbf\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u7ed9\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\u6253\u4e2a\u5305\uff0c\u5728UNIX\u4e0b\uff0c\u662fArchive File\uff0c\u4e5f\u5c31\u662f<code>.a</code>\u6587\u4ef6\u3002</li> </ol>"},{"location":"Tool_Pool/GNU_Make/#makefile","title":"makefile","text":"<p>make\u547d\u4ee4\u6267\u884c\u65f6\uff0c\u9700\u8981\u4e00\u4e2amakefile\u6587\u4ef6\uff0c\u4ee5\u544a\u8bc9make\u547d\u4ee4\u9700\u8981\u600e\u4e48\u6837\u7684\u53bb\u7f16\u8bd1\u548c\u94fe\u63a5\u7a0b\u5e8f\u3002</p> <p>\u57fa\u7840\u7684\u89c4\u5219\u662f\uff1a 1. \u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u6ca1\u6709\u7f16\u8bd1\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u6240\u6709c\u6587\u4ef6\u90fd\u8981\u7f16\u8bd1\u5e76\u88ab\u94fe\u63a5\u3002 2. \u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u7684\u67d0\u51e0\u4e2ac\u6587\u4ef6\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u7f16\u8bd1\u88ab\u4fee\u6539\u7684c\u6587\u4ef6\uff0c\u5e76\u94fe\u63a5\u76ee\u6807\u7a0b\u5e8f\u3002 3. \u5982\u679c\u8fd9\u4e2a\u5de5\u7a0b\u7684\u5934\u6587\u4ef6\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7f16\u8bd1\u5f15\u7528\u4e86\u8fd9\u51e0\u4e2a\u5934\u6587\u4ef6\u7684c\u6587\u4ef6\uff0c\u5e76\u94fe\u63a5\u76ee\u6807\u7a0b\u5e8f\u3002</p> <p>makefile\u7684\u89c4\u5219\uff1a <pre><code>target ... : prerequisites ...\n    command\n    ...\n    ...\n</code></pre> - target: \u76ee\u6807\u6587\u4ef6\uff0c\u53ef\u4ee5\u662fObject File\uff0c\u4e5f\u53ef\u4ee5\u662f\u6267\u884c\u6587\u4ef6, \u8fd8\u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u7b7e. - prerequisites: \u751f\u6210target\u6240\u9700\u8981\u7684\u6587\u4ef6\u6216\u8005\u76ee\u6807. - command: \u751f\u6210target\u7684\u547d\u4ee4(\u547d\u4ee4\u884c)\uff0c\u4efb\u610fShell\u547d\u4ee4.(\u5fc5\u987b\u4ee5\u4e00\u4e2aTab\u952e\u5f00\u59cb)</p> <p>target\u8fd9\u4e00\u4e2a\u6216\u591a\u4e2a\u7684\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u4e8eprerequisites\u4e2d\u7684\u6587\u4ef6\uff0c\u5176\u751f\u6210\u89c4\u5219\u5b9a\u4e49\u5728command\u4e2d, \u4e5f\u5c31\u662f\u8bf4 prerequisites\u4e2d\u5982\u679c\u6709\u4e00\u4e2a\u4ee5\u4e0a\u7684\u6587\u4ef6\u6bd4target\u6587\u4ef6\u8981\u65b0\u7684\u8bdd\uff0ccommand\u6240\u5b9a\u4e49\u7684\u547d\u4ee4\u5c31\u4f1a\u88ab\u6267\u884c\u3002</p> <p>\u4e00\u4e2a\u5b9e\u4f8b</p> <pre><code>edit : main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n    cc -o edit main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n\nmain.o : main.c defs.h\n    cc -c main.c\nkbd.o : kbd.c defs.h command.h\n    cc -c kbd.c\ncommand.o : command.c defs.h command.h\n    cc -c command.c\ndisplay.o : display.c defs.h buffer.h\n    cc -c display.c\ninsert.o : insert.c defs.h buffer.h\n    cc -c insert.c\nsearch.o : search.c defs.h buffer.h\n    cc -c search.c\nfiles.o : files.c defs.h buffer.h command.h\n    cc -c files.c\nutils.o : utils.c defs.h\n    cc -c utils.c\nclean :\n    rm edit main.o kbd.o command.o display.o \\\n        insert.o search.o files.o utils.o\n</code></pre> <p>\u5728\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528<code>make -f &lt;makefile_name&gt;</code>\u6765\u6307\u5b9amakefile\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0cmake\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u76ee\u5f55\u4e0b\u7684<code>Makefile</code>\u6587\u4ef6\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec<code>make</code>\u4e00\u4e0b\u5c31\u4f1a\u751f\u6210<code>edit</code>\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528<code>make clean</code>\u5c31\u4f1a\u5220\u9664<code>edit</code>\u6587\u4ef6\u3002</p>"},{"location":"Tool_Pool/GNU_Make/#_2","title":"\u53c2\u8003","text":"<p>GNU Make: https://seisman.github.io/how-to-write-makefile/overview.html</p>"},{"location":"notes/cs/","title":"Computer Science Notes","text":"<p>Abstract</p> <p>\"This is a collection of notes on computer science.\"</p> <p>--&gt;</p>"},{"location":"notes/cs/HPC/","title":"HPC learning notes","text":"<p>Abstract</p> <p>This is a collection of notes on high performance computing. I took a course called HPC101 in the summer of 2024, maybe I'll not work on HPC in the future, but I'll keep these notes for reference. BTW HPC101 is definitely a good course, and I wanted to gain something from it so I took these notes.</p>"},{"location":"notes/cs/HPC/#table-of-contents","title":"Table of Contents","text":""},{"location":"notes/cs/Sys/CO/","title":"CO","text":"<p>Abstract</p> <p>\"\u672c\u6765\u4e0d\u60f3\u5199CO\u7684\u7b14\u8bb0\u7684\uff0c\u4e0a\u5b66\u671f\u8ba1\u903b\u7684\u7b14\u8bb0\u4e00\u76f4\u662f\u5728PPT\u65c1\u8fb9\u5199\u7684\uff0c\u4f46\u662f\u8fd9\u5b66\u671f\u611f\u89c9\u6709\u70b9\u61c8\u6020\uff0cmade\u6851\u4e0a\u8bfe\u8fd8\u4e0d\u559c\u6b22\u63d0\u524d\u53d1PPT\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u8fd8\u662f\u6574\u7406\u4e00\u4e0b\u4e0a\u8bfe\u7684\u77e5\u8bc6\uff0c\u505a\u4e00\u70b9\u63d0\u70bc\u548c\u6d53\u7f29\uff0c\u65b9\u4fbf\u81ea\u5df1\u590d\u4e60\u548c\u56de\u987e\u3002\"</p> <p>\u8fd9\u5b66\u671f\u7684CO\u4e3b\u8981\u7248\u5757\u5f88\u660e\u786e\uff1a</p> <ul> <li>\u8ba1\u7b97\u673a\u6982\u8981</li> <li>\u8ba1\u7b97\u673a\u7b97\u672f\u8fd0\u7b97</li> <li>\u6307\u4ee4</li> <li>\u5904\u7406\u5668</li> <li>\u5185\u5b58\u5c42\u6b21\u67b6\u6784</li> <li>IO</li> </ul>"},{"location":"notes/cs/Sys/CO/arithmetic/","title":"Arithmetic","text":""},{"location":"notes/cs/Sys/CO/arithmetic/#numbers","title":"Numbers","text":"<ul> <li>Two's Complement</li> </ul> <p>\u6b63\u6570\u6700\u9ad8\u4f4d\u4e3a0\uff0c\u8d1f\u6570\u6700\u9ad8\u4f4d\u4e3a1\u3002</p> <p>\u6b63\u6570\u6b63\u5e38\u8868\u793a\uff0c\u8d1f\u6570\u53d6\u53cd\u52a01\u3002</p>"},{"location":"notes/cs/Sys/CO/arithmetic/#add-sub","title":"Add &amp; Sub","text":""},{"location":"notes/cs/Sys/CO/arithmetic/#multiplication","title":"Multiplication","text":"<p>\u4e58\u6cd5\u5668\u7684\u5b9e\u73b0\u5c31\u662f\u52a0\u6cd5\u5668\uff0c\u4f46\u662f\u9700\u8981\u8fdb\u884c\u79fb\u4f4d\u548c\u591a\u6b21\u52a0\u6cd5\u3002</p> <p>Version 1</p> <p>\u5b9e\u73b0\u4e00\u4e2a64\u4f4d\u7684\u4e58\u6cd5\u5668\uff0c\u9700\u8981128\u4f4d\u7684\u52a0\u6cd5\u5668\uff1a</p> <p></p> <p>\u8fd8\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\uff0c\u5c31\u662f\u6a21\u4eff\u624b\u5199\u4e58\u6cd5\u7684\u8fc7\u7a0b\uff1a\u975e\u5e38\u7684\u590d\u6742\u7f13\u6162\uff0c\u8fd0\u7528128\u4f4d\u52a0\u6cd5\u5668\uff0c\u4f46\u662f\u771f\u6b63\u5728\u76f8\u52a0\u7684\u53ea\u670964\u4f4d\u3002</p> <p>\u5728\u4e58\u6570(Multiplier)\u7684\u5f53\u524d\u4f4d\u4e3a1\u65f6\uff0c\u5c06\u88ab\u4e58\u6570(Multiplicand)\u52a0\u5230\u4e58\u79ef(Product)\u4e0a\uff0c\u7136\u540e\u4e58\u6570\u53f3\u79fb\uff0c\u88ab\u4e58\u6570\u5de6\u79fb\u3002\uff08\u8fd9\u91cc\u4e58\u6570\u53f3\u79fb\u662f\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u53ea\u770b\u4e58\u6570\u7684\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a1\uff0c\u5728\u770b\u5b8c\u4e86\u4e4b\u540e\u9700\u8981\u770b\u4e0b\u4e00\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u53f3\u79fb\uff09</p> <p>\u5728\u4e58\u6570(Multiplier)\u7684\u5f53\u524d\u4f4d\u4e3a0\u65f6\uff0c\u4e58\u6570\u53f3\u79fb\uff0c\u88ab\u4e58\u6570\u5de6\u79fb\u3002</p> <p>\u8fdb\u884c64\u6b21\u5faa\u73af\u540e\u7ed3\u675f\u3002</p> <p>Version 2</p> <p></p> <p>\u6539\u53d8\u601d\u8def\uff0c\u79fb\u52a8\u4e58\u79ef\uff0c\u8fd9\u6837\u907f\u514d\u4e86\u4f7f\u7528\u8f83\u5927\u7684\u52a0\u6cd5\u5668\u3002</p> <p>\u8fd9\u91cc\u9700\u8981\u4e00\u4e2a128\u4f4d\u7684\u5bc4\u5b58\u5668\u4f5c\u4e3a\u4e58\u79ef\u5bc4\u5b58\u5668\uff0c\u5206\u4e3a\u9ad864\u4f4d\u548c\u4f4e64\u4f4d\uff0c\u521a\u5f00\u59cb\u7b2c\u4e00\u4e2a\u4e58\u79ef\u653e\u5728\u6700\u9ad8\u4f4d\u3002</p> <p>\u5728\u6bcf\u6b21\u5faa\u73af\u4e2d\uff0c\u5982\u679c\u4e58\u6570\u6700\u4f4e\u4f4d\u4e3a1\uff0c\u5c06\u88ab\u4e58\u6570\u52a0\u5230\u4e58\u79ef\u5bc4\u5b58\u5668\u7684\u7684\u9ad864\u4f4d\uff0c\u7136\u540e\u4e58\u79ef\u5bc4\u5b58\u5668\u53f3\u79fb\uff0c\u4e58\u6570\u53f3\u79fb\uff1b</p> <p>\u5982\u679c\u4e58\u6570\u6700\u4f4e\u4f4d\u4e3a0\uff0c\u4e58\u79ef\u5bc4\u5b58\u5668\u53f3\u79fb\uff0c\u4e58\u6570\u53f3\u79fb\u3002</p> <p>\u7ecf\u8fc764\u6b21\u5faa\u73af\u540e\uff0c\u4e58\u79ef\u5bc4\u5b58\u5668\u7684\u4f4e64\u4f4d\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u4e86\u3002</p> <p>Version 3</p> <p></p> <p>\u5728\u5148\u524d\u7684\u7248\u672c\u4e2d\uff0c\u4e58\u79ef\u5bc4\u5b58\u5668\u6700\u7ec8\u4f1a\u6709\u4e00\u534a\u7684\u7a7a\u95f4\u662f\u6d6a\u8d39\u6389\u7684\uff0c\u8fd9\u4e00\u534a\u7684\u957f\u5ea6\u6b63\u597d\u4e0e\u4e58\u6570\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528128\u4f4d\u4e58\u79ef\u5bc4\u5b58\u5668\u521d\u59cb\u7684\u53f3\u534a\u90e8\u5206\u6765\u5b58\u50a8\u4e58\u6570\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e58\u6570\u5bc4\u5b58\u5668\u4e86\u3002</p> Example <p></p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u662fVersion 3\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u8fd0\u7528\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u9002\u914d\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u548c\u957f\u5ea6\uff0c\u6bd4\u5982\u8fd9\u4e2a\u4e66\u5199\u8fc7\u7a0b\u4e2d\u5c31\u662f\u75286-bit\u7684\u516b\u8fdb\u5236\u6570\u8fdb\u884c\u8fd0\u7b97\uff0c\u540c\u65f6\u4e0b\u65b9\u8fd8\u7ed9\u51fa\u4e86\u540c\u6837\u6570\u636e\u5982\u679c\u662f8-bit\u7684\u5341\u516d\u8fdb\u5236\u6570\u8fdb\u884c\u8fd0\u7b97\u7684\u7ed3\u679c\u3002</p> <p>\u5bf9\u6709\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u9700\u8981\u5b58\u50a8\u7b26\u53f7\u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u6700\u540e\u6839\u636e\u7b26\u53f7\u4f4d\u786e\u5b9a\u7ed3\u679c\u7684\u7b26\u53f7\u3002</p> <p>\u4f46\u662f\u6ce8\u610f</p> <p>Warning</p> <p>\u4e58\u6cd5\u4e0d\u80fd\u7528\u8865\u7801\u8ba1\u7b97</p> <ul> <li>Improved Multiplier</li> </ul> <p>Booth's Algorithm</p> <p>\u6211\u4e0d\u60f3\u5199\u4e86\uff0c\u653e\u4e86xyx\u5b66\u957f\u7684\u7b14\u8bb0\uff1a \ud83d\udd17</p>"},{"location":"notes/cs/Sys/CO/arithmetic/#division","title":"Division","text":"<p>Version 1 \u9664\u6cd5\u6700\u521d\u7684\u7248\u672c\u4e5f\u662f\u6a21\u4eff\u624b\u5199\u9664\u6cd5\uff1a</p> <p></p> <p>\u8fdb\u884c\u9664\u6cd5\u65f6\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u5224\u65ad\u4f59\u6570\u7684\u6b63\u8d1f\u6765\u8fdb\u884c\u7684</p> <p>\u9664\u6570\u521d\u59cb\u65f6\u5b58\u653e\u5728\u9664\u6570\u5bc4\u5b58\u5668\u7684\u9ad8\u4f4d\u534a\u8fb9\uff0c\u4f59\u6570\u5bc4\u5b58\u5668\u521d\u59cb\u65f6\u662f\u5b58\u653e\u88ab\u9664\u6570\u5e76\u653e\u5728\u4f4e\u4f4d\u534a\u8fb9\u7684\uff0c</p> <p>\u4ece\u4f59\u6570\u5bc4\u5b58\u5668\u4e2d\u51cf\u53bb\u9664\u6570\uff0c\u5982\u679c\u7ed3\u679c\u4e3a\u6b63\uff0c\u5de6\u79fb\u5546\u5bc4\u5b58\u5668\uff0c\u5c06\u6700\u65b0\u7684\u53f3\u4f4d\u8bbe\u4e3a1\uff0c\u5982\u679c\u7ed3\u679c\u4e3a\u8d1f\uff0c\u5c06\u9664\u6570\u5bc4\u5b58\u5668\u52a0\u56de\u5230\u4f59\u6570\u5bc4\u5b58\u5668\uff0c\u5de6\u79fb\u5546\u5bc4\u5b58\u5668\uff0c\u5c06\u6700\u65b0\u7684\u53f3\u4f4d\u8bbe\u4e3a0\u3002</p> <p>\u8fd9\u4e4b\u540e\u5c06\u9664\u6570\u5bc4\u5b58\u5668\u53f3\u79fb\u4e00\u4f4d\uff0c\u91cd\u590d65\u6b21\u5faa\u73af\u540e\u7ed3\u675f\u3002</p> <p>Version 2</p> <p></p> <p>\u9664\u6570\u4e0d\u52a8\uff0c\u88ab\u9664\u6570\u653e\u5728128\u4f4d\u4f59\u6570\u7684\u4f4e\u4f4d\u534a\u8fb9</p> <p>\u5faa\u73af\u5f00\u59cb\u65f6\uff0c\u5148\u5c06\u4f59\u6570\u90e8\u5206\u5de6\u79fb\u4e00\u4f4d\uff0c\u7136\u540e\u51cf\u53bb\u9664\u6570\uff0c\u5982\u679c\u7ed3\u679c\u4e3a\u6b63\uff0c\u5de6\u79fb\u4f59\u6570\u5bc4\u5b58\u5668\uff0c\u5c06\u6700\u65b0\u7684\u53f3\u4f4d\u8bbe\u4e3a1\uff0c\u5982\u679c\u7ed3\u679c\u4e3a\u8d1f\uff0c\u5c06\u9664\u6570\u5bc4\u5b58\u5668\u52a0\u56de\u5230\u4f59\u6570\u5bc4\u5b58\u5668\uff0c\u5de6\u79fb\u4f59\u6570\u5bc4\u5b58\u5668\uff0c\u5c06\u6700\u65b0\u7684\u53f3\u4f4d\u8bbe\u4e3a0\u3002</p> <p>\u8fd9\u6837\u6700\u540e\u4f59\u6570\u5bc4\u5b58\u5668\u4f4e\u534a\u4f4d\u5c31\u662f\u5546\uff0c\u9ad8\u534a\u4f4d\u5c31\u662f\u4f59\u6570\u3002</p> 7/2 <p></p> <ul> <li>Signed Division</li> </ul> <p>Reminder \u9700\u8981\u4e0e\u88ab\u9664\u6570\u540c\u53f7</p>"},{"location":"notes/cs/Sys/CO/arithmetic/#floating-point","title":"Floating Point","text":"<p>32\u4f4d\u5904\u7406\u5668\u7684\u6570\u8868\u793a\u8303\u56f4\uff1a</p> <p>\\(-2^{31} \u5230 2^{31}-1\\)</p> <p>\u6d6e\u70b9\u6570\u7684\u8868\u793a\uff1a</p> <ul> <li>Sign</li> <li>Significand \u589e\u52a0\u7cbe\u786e\u5ea6</li> <li>Exponent \u589e\u52a0\u8303\u56f4</li> </ul> <p>\u4e8c\u8fdb\u5236\u6570\u7684\u6807\u51c6\u8868\u793a\u65b9\u6cd5\uff1a</p> <p>\\(1.xxx * 2^{yyy}\\)</p> <p>\u5bf9\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cy\u67098\u4f4d\uff0cx\u670923\u4f4d</p> <p>\u5bf9\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cy\u670911\u4f4d\uff0cx\u670952\u4f4d</p> <p></p> <p>\u7b2c\u4e00\u4f4d\u76841\u662f\u4e00\u5b9a\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8ba1\u5165\u5b58\u50a8\uff0cExponent\u662f\u5e26\u6709Bias\u7684</p> <p>\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570Bias\u4e3a127\uff0c\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570Bias\u4e3a1023</p> <p>\u56e0\u6b64\u6700\u540e\u603b\u7684\u8868\u793a\u65b9\u6cd5\u662f\uff1a</p> \\[ (-1)^{\\text{Sign}} * (1 + \\text{Significand(Fraction)}) * 2^{\\text{Exponent - Bias}} \\] 0.75 \u548c -0.4375 <p></p> <p></p> <ul> <li>Single Precision Range</li> </ul> <p>\u6307\u6570\u4e2d 00000000 \u548c 11111111 \u662f\u7279\u6b8a\u503c</p> <p>\u5f53Exponent\u4e3a11111111\uff0cFraction\u4e3a00000000\u65f6\uff0c\u8868\u793a\u65e0\u7a77\u5927</p> <p>\u5f53Exponent\u4e3a11111111\uff0cFraction\u4e0d\u4e3a00000000\u65f6\uff0c\u8868\u793aNaN(Not a Number)</p> <p>\u56e0\u6b64\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u8303\u56f4\u662f\uff1a</p> <p>Smallest Number: \\(1.0 * 2^{1-127} \\approx 1.2 * 10^{-38}\\)</p> <p>Largest Number: \\(1.111... * 2^{254-127} \\approx 2 * 2^{127} \\approx 3.4 * 10^{38}\\)</p> <p>\u6bcf\u4e00\u4f4d\u90fd\u662f1\u7684\u65f6\u5019\uff081.111...\uff09\uff0c\u8868\u793a\u65e0\u9650\u63a5\u8fd1\u4e8e2</p>"},{"location":"notes/cs/Sys/CO/arithmetic/#floating-point-arithmetic","title":"Floating Point Arithmetic","text":"<ul> <li>Addition and Subtraction</li> </ul> <ol> <li>Alignment</li> </ol> <p>\u5c06\u4e24\u4e2a\u6570\u8fdb\u884c\u5bf9\u9f50\uff0c\u901a\u5e38\u662f\u5c06\u8f83\u5c0f\u7684\u6570\u5f80\u5927\u7684\u9760\u8fd1\uff0c\u56e0\u4e3a\u5982\u679c\u5c06\u5927\u7684\u5411\u5c0f\u7684\u5bf9\u9f50\uff0c\u635f\u5931\u7684\u4f4d\u6570\u662f\u66f4\u9ad8\u7684\u4f4d\u6570\uff0c\u635f\u5931\u7684\u7cbe\u5ea6\u66f4\u591a</p> <ol> <li> <p>Addition</p> </li> <li> <p>Normalization</p> </li> <li> <p>Rounding</p> </li> </ol> 0.5 + -0.4375 <p></p> <ul> <li>Multiplication</li> </ul> <p>\u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5c06\u6307\u6570\u76f8\u52a0\uff0c\u5c3e\u6570\u76f8\u4e58\u5373\u53ef\u3002</p> <p>\u9664\u6cd5\u4e5f\u662f\u7c7b\u4f3c\u7684</p>"},{"location":"notes/cs/Sys/CO/arithmetic/#accurate-arithmetic","title":"Accurate Arithmetic","text":"<p>\u4e3a\u4e86\u63d0\u9ad8\u820d\u5165\u7684\u7cbe\u5ea6\uff0cIEEE 754 \u6807\u51c6\u89c4\u5b9a\u4e3a\u6d6e\u70b9\u6570\u989d\u5916\u6dfb\u52a0 2 \u4f4d\uff0c\u4ece\u5de6\u5230\u53f3\u5206\u522b\u79f0\u4e3aGuard\u548cRound\uff0c\u8fd9\u4e24\u4f4d\u6570\u5b57\u4fdd\u7559\u4e86\u6d6e\u70b9\u6570\u8ba1\u7b97\u7684\u4e2d\u95f4\u8fc7\u7a0b\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u5730\u907f\u514d\u7cbe\u5ea6\u4e0a\u7684\u635f\u5931\u3002</p> <ul> <li>Sticky Bit\uff1aSticky \u4f4d\u7528\u4e8e\u8bb0\u5f55\u79fb\u51fa\u7684\u5c3e\u6570\u4e2d\u7684\u975e\u96f6\u4fe1\u606f\uff0c\u662f\u6307\u53ea\u8981\u5728Round\u53f3\u8fb9\u51fa\u73b0\u8fc71\uff0c\u90a3\u4e48sticky\u4f4d\u5c31\u4e3a1</li> </ul> <p>\u6d6e\u70b9\u6570\u7684\u820d\u5165</p> <ol> <li>\u5982\u679cGuard\u4f4d\u4e3a0\uff0c\u90a3\u4e48\u76f4\u63a5\u820d\u53bbRound\u548cSticky\u4f4d</li> <li>\u5982\u679cGuard\u4f4d\u4e3a1\uff0cRound\u4f4d\u4e3a1\u6216\u8005Sticky\u4f4d\u4e3a1\uff1a\u7ed3\u679c\u5411\u4e0a\u820d\u5165\uff0c\u5982\u679c\u90fd\u4e3a0\uff0c\u7ed3\u679c\u5411\u4e0b\u820d\u5165\uff08\u4fdd\u6301\u4e0d\u53d8\uff09</li> </ol> Example <p></p>"},{"location":"notes/cs/Sys/CO/instruction/","title":"Instruction","text":"<p>Outline:</p> <ul> <li>\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u64cd\u4f5c Operation</li> <li>\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u64cd\u4f5c\u6570 Operand</li> <li>\u6709\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570 Signed and Unsigned Numbers</li> <li>\u6307\u4ee4\u7684\u8868\u793a Instruction Representation</li> <li>\u903b\u8f91\u64cd\u4f5c Logical Operations</li> <li>\u51b3\u7b56\u6307\u4ee4 Making Decisions</li> <li>\u8ba1\u7b97\u673a\u5bf9\u8fc7\u7a0b\u7684\u652f\u6301 Procedure Support</li> <li>\u6307\u4ee4\u7684\u5bfb\u5740 Instruction Addressing</li> </ul> <p>\u6307\u4ee4-&gt;Statement</p> <p>\u6307\u4ee4\u96c6-&gt;Syntax</p>"},{"location":"notes/cs/Sys/CO/instruction/#operation","title":"Operation","text":"<p>\u5728RISC-V\u4e2d\uff0c\u6bcf\u4e00\u6761\u6307\u4ee4\u53ea\u652f\u6301\u4e00\u4e2a\u64cd\u4f5c</p>"},{"location":"notes/cs/Sys/CO/instruction/#operands","title":"Operands","text":"<p>\u5728\u7b97\u672f\u8fd0\u7b97\u4e2d\uff0c\u64cd\u4f5c\u6570\u53ea\u80fd\u662f\u5bc4\u5b58\u5668\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u505a\u8fd0\u7b97\u65f6\uff0c\u4e00\u5b9a\u8981\u5148\u628a\u6570\u636e\u5b58\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u518d\u5bf9\u4e24\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u8fd0\u7b97\u3002</p> <p>RISC-V\u4e2d\u7684\u5bc4\u5b58\u5668\u662f <code>32 x 64-bit</code> \u7684Register File(\u5b9e\u9a8c\u4e2d\u5b9e\u73b0\u7684\u662f32 x 32-bit)</p> <p>64bit\u662fdouble word\uff0c32bit\u662fword</p> <p>32\u4e2a\u5bc4\u5b58\u5668\uff1a</p> <p></p>"},{"location":"notes/cs/Sys/CO/instruction/#memory-operand","title":"Memory Operand","text":"<p>Main Memory\u7528\u6765\u5b58\u50a8\u590d\u6742\u7684\u6570\u636e\uff0c\u5728\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u65f6\uff0c\u9700\u8981<code>load</code>\u5c06\u6570\u636e\u4eceMemory\u4e2d\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u9700\u8981<code>store</code>\u56deMemory\u4e2d\u3002</p> <p>Memory is byte addressed: \u6bcf\u4e2a\u5730\u5740\u90fd\u662f\u4e00\u4e2a8-bit\u7684byte\uff0c\u8bbf\u95ee\u65f6\u662f\u6309\u7167byte\u8bbf\u95ee\u7684\u3002</p> <ul> <li>Endian</li> </ul> <p>\u5927\u5c0f\u7aef\uff1a\u5c31\u662f\u6307\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u987a\u5e8f\u3002</p> Big or Little Endian <p></p> <ul> <li>Word Alignment </li> </ul> <p>RISC-V\u4e2d\uff0c\u4e0d\u8981\u6c42\u8fdb\u884c\u5730\u5740\u5bf9\u9f50\uff0c\u4f46\u662f\u5bf9\u9f50\u7684\u60c5\u51b5\u662f\u66f4\u597d\u7684</p> <p>\u4e00\u4e2aword\u662f\u56db\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u5bf9\u9f50\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u662f4\u7684\u500d\u6570\uff0c\u4e5f\u5c31\u662f0\uff0c4\uff0c8\u2026\u2026\uff0c\u8fd9\u4e9b\u5730\u5740\u7684\u4e8c\u8fdb\u5236\u7801\u90fd\u662f\u672b\u7aef\u4e24\u4e2abit\u4e3a0\u7684\uff0c\u800c\u5982\u679c\u6309\u7167halfword\u8bbf\u95ee\uff0c\u5730\u5740\u7684\u672b\u7aef\u4e00\u4e2abit\u4e3a0\u5373\u53ef\u3002</p> Memory Alignment <p></p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u8bb2\u89e3\u600e\u6837\u8fdb\u884c\u4e00\u6b21\u8fd0\u7b97\uff1a\u8bb2\u89e3\u7684\u4f8b\u5b50\u90fd\u662f\u6309\u7167double word\uff088 bytes 64-bit\uff09\u8fdb\u884c\u64cd\u4f5c\u7684\u3002</p> <pre><code>    A[12] = h + A[8]\n    //h in x21, base address of A in x22\n</code></pre> <pre><code>    ld x9, 64(x22) \n    add x9, x21, x9\n    sd x9, 96(x22)\n</code></pre> <p><code>ld</code>\u6307\u4ee4\u768464\u662f\u504f\u79fb\u91cf\uff08offset\uff09\uff0cx22\u662f\u57fa\u5730\u5740\uff0cx9\u662f\u76ee\u6807\u5bc4\u5b58\u5668</p> <p>\u56e0\u4e3a\u6211\u4eec\u7684\u57fa\u5740\u662fx22\uff0c\u7b2c\u516b\u4e2adouble word\u7684\u5730\u5740\u5c31\u662f8 * 8 = 64\uff0c\u6240\u4ee5\u504f\u79fb\u91cf\u662f64</p> <p>\u540c\u7406\u5728<code>sd</code>\u6307\u4ee4\u4e2d\uff0c96\u662f\u504f\u79fb\u91cf</p>"},{"location":"notes/cs/Sys/CO/instruction/#immediate-operand","title":"Immediate Operand","text":"<p>\u5982\u679c\u8bf4\u4e00\u4e2a\u5e38\u6570\u5b58\u5728\u4e8e\u4e00\u4e2a\u5730\u5740\u4e2d\uff0c\u90a3\u4e48\u5728\u5bf9\u4e00\u4e2a\u5bc4\u5b58\u5668\u589e\u52a0\u4e00\u4e2a\u5e38\u6570\u65f6\uff0c\u5c31\u9700\u8981\u4f7f\u7528<code>ld</code>\u6307\u4ee4\uff0c\u5c06\u5e38\u6570\u4eceMemory\u4e2d\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u518d\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\u3002</p> <p>\u4e3a\u4e86\u51cf\u5c11\u6307\u4ee4\u4e2a\u6570\uff08\u4e0d\u4f7f\u7528ld\u6307\u4ee4\uff09\uff0cRISC-V\u4e2d\u5f15\u5165\u4e86\u7acb\u5373\u6570\uff08Immediate\uff09\uff0c\u7acb\u5373\u6570\u662f\u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u518d\u4eceMemory\u4e2d\u52a0\u8f7d\u3002</p> <pre><code>    ld x9, AddressConstant4(x3) // x9 = constant 4\n    add x22, x22, x9\n\n    ||\n\n    addi x22, x22, x9\n</code></pre>"},{"location":"notes/cs/Sys/CO/instruction/#representation-of-instructions","title":"Representation of Instructions","text":"<p>\u6240\u6709\u7684\u6307\u4ee4\u5728\u673a\u5668\u4e2d\u90fd\u662f\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u7684\uff0c\u88ab\u79f0\u4f5cMachine Code\u673a\u5668\u7801\uff0c\u4efb\u4f55\u7684\u6307\u4ee4\u5728\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u90fd\u662f\u5bf9Machine Code\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u90e8\u5206\u5c06\u4f1a\u8bb2\u89e3\u5982\u4f55\u5bf9\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\u4f7f\u5176\u6210\u4e3aMachine Code\u3002</p> <p>\u6211\u4eec\u5c06x0-x31\u5bc4\u5b58\u5668\u6620\u5c04\u52300-31\u8fd9\u4e9b\u6570\u5b57\uff0c\u56e0\u6b64\u5bc4\u5b58\u5668\u7684\u540d\u5b57\u5c31\u53d8\u6210\u4e860-31</p> <p>RISC-V\u4e2d\uff0c\u6307\u4ee4\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c32-bit</p> <p>\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u6211\u4eec\u752816\u8fdb\u5236\u8868\u793a\u6307\u4ee4\uff0c\u56e0\u4e3a16\u8fdb\u5236\u8868\u793a\u7684\u6307\u4ee4\u66f4\u77ed\uff0c\u66f4\u65b9\u4fbf\u3002</p> <p>\u6709\u56db\u79cd\u57fa\u7840\u7684\u6307\u4ee4\u683c\u5f0f(R/I/S/U),\u518d\u6839\u636e\u7acb\u5373\u6570\u89e3\u7801\u7684\u4e0d\u540c\u5206\u51fa\u4e24\u79cd(B/J),\u5171\u516d\u79cd</p> \u5e38\u89c1\u6307\u4ee4\u7f16\u7801 <p></p>"},{"location":"notes/cs/Sys/CO/instruction/#r-type","title":"R-Type","text":"<p>\u4f7f\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\u7684\u6307\u4ee4</p> \\[ rd = rs1 \\text{ op } rs2 \\] <p>\u5bf9\u4e8e\u79fb\u4f4d\u8fd0\u7b97\uff0crs2\u662fshift amount</p> <ul> <li>opcode: \u64cd\u4f5c\u7801\uff0c\u6709128\u79cd\u64cd\u4f5c\uff0c\u4f5c\u4e3a\u6307\u4ee4\u7684\u5927\u7c7b\u533a\u5206</li> <li>rd: \u76ee\u6807\u5bc4\u5b58\u5668</li> <li>rs1: \u7b2c\u4e00\u4e2a\u6e90\u5bc4\u5b58\u5668</li> <li>rs2: \u7b2c\u4e8c\u4e2a\u6e90\u5bc4\u5b58\u5668</li> <li>funct3\u30017: \u529f\u80fd\u7801\uff0c\u4f5c\u4e3aopcode\u7684\u8865\u5145</li> </ul> <p>\u6bd4\u5982\u8bf4\u52a0\u6cd5\u548c\u51cf\u6cd5\uff0c\u4ed6\u4eec\u7684opcode\u90fd\u662f0110011\uff0c\u4f46\u662f\u4ed6\u4eec\u7684funct3\u4e0d\u540c\uff0c\u52a0\u6cd5\u662f000\uff0c\u51cf\u6cd5\u662f001</p>"},{"location":"notes/cs/Sys/CO/instruction/#i-type","title":"I-Type","text":"<p>\u4f7f\u7528\u5bc4\u5b58\u5668\u548c\u7acb\u5373\u6570\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\u7684\u6307\u4ee4\uff0c\u4ee5\u53caload\u6307\u4ee4</p> \\[ rd = rs1 \\text{ op } imm \\] <ul> <li>rs1: \u6e90\u5bc4\u5b58\u5668</li> <li>rd: \u76ee\u6807\u5bc4\u5b58\u5668</li> <li>imm: \u7acb\u5373\u6570 \u7531rs2\u548cfunct7\u5408\u5e76\u768412\u4f4d\u7acb\u5373\u6570 2's Complement, sign extended</li> <li>funct3: \u529f\u80fd\u7801</li> </ul> <p>\u7acb\u5373\u6570\u662f<code>{{20{inst[31]}}, inst[31:20]}</code>\uff0c\u4e5f\u5c31\u662f\u5bf9<code>imm[11:0]</code>\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\u523032\u4f4d</p> <p>\u79fb\u4f4d\u64cd\u4f5c\u4e5f\u5c5e\u4e8e\u662fI-Type\u7684\u4e00\u79cd\uff0c\u4f46\u662f\u79fb\u4f4d\u64cd\u4f5c\u5c06I-Type\u7684imm\u5206\u4e3a\u4e86\u4e24\u90e8\u5206\uff0c\u9ad86\u4f4d\u7684\u90e8\u5206\u662ffunct6,\u4f4e6\u4f4d\u7684\u90e8\u5206\u662fimmed</p> <p>\u5bf9<code>sll srl</code>\u6307\u4ee4\u662f\u79fb\u4f4d\u5e76\u88650</p> <p>\u5bf9<code>slli srli</code>\u6307\u4ee4\u662f\u79fb\u4f4di\u4f4d,\u4e5f\u5c31\u662f\u4e58\u6216\u9664\u4ee52\u7684i\u6b21\u65b9(unsigned)</p> <p>\u5728\u7b97\u6570\u903b\u8f91\u79fb\u4f4d(<code>sra</code>)\u4e2d,\u7b26\u53f7\u4f4d\u4fdd\u6301\u4e0d\u53d8,\u56e0\u6b64\u79fb\u4f4d\u540e\u9700\u8981\u8865\u5168\u7b26\u53f7\u4f4d</p>"},{"location":"notes/cs/Sys/CO/instruction/#s-type","title":"S-Type","text":"<p>store\u7c7b\u6307\u4ee4</p> \\[ rs1 = [rs2 + imm] \\] <ul> <li>rs1: \u653ebase address</li> <li>rs2: \u653esource operand</li> <li>funct3: \u5bf9\u5b58\u50a8\u7684\u6570\u636e\u7c7b\u578b(byte, halfword, word)\u8fdb\u884c\u533a\u5206</li> </ul> <p>\u7acb\u5373\u6570\u662f<code>{{20{inst[31]}}, inst[31:25], inst[11:7]}</code></p>"},{"location":"notes/cs/Sys/CO/instruction/#b-typesb","title":"B-Type(SB)","text":"<p>\u7531S-Type\u6307\u4ee4\u5206\u5316\u800c\u6765\uff0c\u533a\u522b\u662f\u7acb\u5373\u6570\u7684\u8bfb\u53d6\u65b9\u5f0f\u4e0d\u540c\uff0c\u662f\u6240\u6709\u5206\u652f\u7c7b\u6307\u4ee4\u7684\u7f16\u7801\u65b9\u5f0f</p> <p>\u5de6\u8fb9\u9ad8\u4f4dimm\u662f<code>imm[12, 10:5]</code>\uff0c\u53f3\u8fb9\u4f4e\u4f4dimm\u662f<code>imm[4:1, 11]</code></p> <p>\u7acb\u5373\u6570\u662f<code>{{19{inst[31]}}, inst[31], inst[7], inst[30:25], inst[11:8], 1'b0}</code></p>"},{"location":"notes/cs/Sys/CO/instruction/#u-type","title":"U-Type","text":"<p>\u53ea\u6709lui\u6307\u4ee4\u548cauipc\u6307\u4ee4\uff0c\u7528\u4e8e\u5b58\u653e\u9ad8\u4f4d\u7acb\u5373\u6570</p> <p>\u7acb\u5373\u6570\u662f<code>{inst[31:12], 12'b0}</code></p> <p>\u5c31\u662f\u586b\u5145\u9ad820\u4f4d\uff0c\u4f4e12\u4f4d\u4e3a0</p>"},{"location":"notes/cs/Sys/CO/instruction/#j-typeuj","title":"J-Type(UJ)","text":"<p>\u4ec5\u6709jal\u6307\u4ee4\uff0c\u7528\u4e8e\u5b58\u653e\u8df3\u8f6c\u5730\u5740</p> <p>\u7531U-Type\u6307\u4ee4\u5206\u5316\u800c\u6765\uff0c\u533a\u522b\u662f\u7acb\u5373\u6570\u7684\u8bfb\u53d6\u65b9\u5f0f\u4e0d\u540c</p> <p>\u5c06U-Type\u7684\u7acb\u5373\u6570\u90e8\u5206\u6539\u4e3a\u4e86\uff1a</p> <p><code>{{11{inst[31]}}, inst[31], inst[19:12], inst[20], inst[30:21], 1'b0}</code></p>"},{"location":"notes/cs/Sys/CO/instruction/#instructions-for-making-decisions","title":"Instructions for Making Decisions","text":""},{"location":"notes/cs/Sys/CO/instruction/#branch","title":"Branch","text":"<pre><code>beq reg1, reg2, Label // branch if equal\n</code></pre> <p>\u5982\u679c<code>reg1 == reg2</code>\uff0c\u5219\u8df3\u8f6c\u5230Label\u5904\u6267\u884c</p> <pre><code>bne reg1, reg2, Label // branch if not equal\n</code></pre> <p>\u5982\u679c<code>reg1 != reg2</code>\uff0c\u5219\u8df3\u8f6c\u5230Label\u5904\u6267\u884c</p> <pre><code>blt reg1, reg2, Label // branch if less than\n</code></pre> <p>\u5982\u679c<code>reg1 &lt; reg2</code>\uff0c\u5219\u8df3\u8f6c\u5230Label\u5904\u6267\u884c</p> <pre><code>bge reg1, reg2, Label // branch if greater than or equal\n</code></pre> <p>\u5982\u679c<code>reg1 &gt;= reg2</code>\uff0c\u5219\u8df3\u8f6c\u5230Label\u5904\u6267\u884c</p> if-else <p></p> while loop <p></p>"},{"location":"notes/cs/Sys/CO/instruction/#slt","title":"SLT","text":"<pre><code>slt rd, rs1, rs2 // set on less than\n</code></pre> <p>\u901a\u5e38\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5b58\u653e\u5728\u4e00\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\u4e2d\u4f5c\u4e3a\u6807\u8bb0\uff0c\u5982\u679c<code>rs1 &lt; rs2</code>\uff0c\u5219\u5c06\u4e34\u65f6\u5bc4\u5b58\u5668\u7f6e1\uff0c\u5426\u5219\u7f6e0\uff0c\u8fd9\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\u548c0\u76f8\u6bd4\u662f\u5426\u76f8\u7b49\u53ef\u4ee5\u4f5c\u4e3a<code>beq</code>\u6307\u4ee4\u7684\u5224\u65ad\u6761\u4ef6</p>"},{"location":"notes/cs/Sys/CO/instruction/#jump","title":"Jump","text":"<pre><code>jalr rd, imm(rs1) // jump and link register\n</code></pre> <p>\u5f53\u524dpc\u5730\u5740\u7684\u4e0b\u4e00\u4e2a\u5730\u5740(pc+4)\u5b58\u653e\u5728rd\u4e2d(\u4e3a\u4e86\u80fd\u56de\u6765)\uff0c\u7136\u540e\u8df3\u8f6c\u5230rs1+imm\u5904</p> <p>pc = (imm+rs1) &amp; 0xFFFFFFFE \u5373\u6700\u4f4e\u4f4d\u4f1a\u88ab\u8bbe\u4e3a 0</p> switch <p></p> <p>x6\u5185\u5b58\u50a8\u7684\u662f\u5bf9\u5e94\u7684\u51e0\u4e2acase\u4e2d\u7684\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u2014\u2014\u8df3\u8f6c\u8868</p> <p>\u8df3\u8f6c\u8bed\u53e5\u5148\u5bf9\u8df3\u8f6c\u8fb9\u754c\u8fdb\u884c\u68c0\u67e5\uff0c\u68c0\u67e5\u65e0\u8bef\u540e\u628ak\u5de6\u79fb\u4e09\u4f4d\u653e\u5230\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u4e0e\u8df3\u8f6c\u5730\u5740\u7684\u57fa\u5740\u76f8\u52a0</p> <p>\u8fd9\u91ccload\u6307\u4ee4\u7684\u4f5c\u7528\uff1a</p> <p>\u5148\u524d\u6211\u4eec\u7528x7\u4f5c\u4e3a\u4e00\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\u7528\u4e8e\u5b58\u50a8\u8df3\u8f6c\u8868\u4e2d\u9700\u8981\u8df3\u8f6c\u7684\u5730\u5740\uff0c\u8fdb\u884cload\u540e\uff0cx7\u4ecd\u7136\u662f\u4e00\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u4f46\u662f\u8fd9\u65f6x7\u88c5\u8f7d\u7684\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u4e2d\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u662fjalr\u9700\u8981\u8df3\u8f6c\u5230\u7684\u7a0b\u5e8f\u7684\u4f4d\u7f6e\uff08\u4ecd\u7136\u662f\u4e2a\u5730\u5740\uff09</p> <pre><code>jal rd, imm // jump and link\n</code></pre> <p>rd = pc+4, pc = pc+imm \u5373\u5c06\u5f53\u524d\u6307\u4ee4\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u5b58\u5165 rd\uff0c\u7136\u540e\u76f8\u5bf9\u8df3\u8f6c\u5230 imm \u5904</p>"},{"location":"notes/cs/Sys/CO/instruction/#basic-block","title":"Basic Block","text":"<p>\u57fa\u672c\u5757\uff1a\u6700\u5c0f\u7684\u7a0b\u5e8f\u4ee3\u7801\u5757\uff0c\u4e00\u4e2a\u5757\u5185\u7684\u6307\u4ee4\u662f\u987a\u5e8f\u6267\u884c\u7684\uff0c\u5757\u4e0e\u5757\u4e4b\u95f4\u901a\u8fc7\u8df3\u8f6c\u6307\u4ee4\u8fde\u63a5\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u6307\u4ee4\u8df3\u8f6c\u5230\u57fa\u672c\u5757\u7684\u5185\u90e8</p>"},{"location":"notes/cs/Sys/CO/instruction/#procedure-support","title":"Procedure Support","text":"<p>\u5bf9\u51fd\u6570\u7684\u652f\u6301:</p> <ul> <li>Place parameters</li> <li>Transfer control(jump)</li> <li>Acquire storage resources</li> <li>Perform tasks</li> <li>Place results </li> <li>Return control</li> </ul>"},{"location":"notes/cs/Sys/CO/instruction/#caller","title":"Caller","text":"<p>use <code>jal</code>\u6307\u4ee4 jump and link</p> <pre><code>jal x1 ProcedureAddress\n</code></pre> <ul> <li>x1: \u5b58\u653epc+4\uff0c\u4e5f\u5c31\u662f\u8c03\u7528\u51fd\u6570\u540e\u9700\u8981\u8fd4\u56de\u7684\u5730\u5740\uff0c\u540c\u65f6\u8df3\u8f6c\u5230<code>PC = PC+ProcedureAddress</code>\u7684\u4f4d\u7f6e</li> </ul>"},{"location":"notes/cs/Sys/CO/instruction/#callee","title":"Callee","text":"<p>use <code>jalr</code>\u6307\u4ee4 jump and link register</p> <pre><code>jalr x0, 0(x1)\n</code></pre> <ul> <li>x0: \u56fa\u5b9a\u4e3a0</li> <li>x1: \u8df3\u56de\u5230\u8fd4\u56de\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u7684\u5730\u5740</li> </ul> <p>x0 \u662f\u5728 rd\u7684\u4f4d\u7f6e\u4e0a\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u672c\u6765\u662f\u5b58\u653ePC+4\u7684\uff0c\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u7528x0\u6765\u63a5\u6536\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u8fd4\u56de\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u4eec\u7528\u4e0d\u4f1a\u88ab\u6539\u53d8\u7684x0\u6765\u63a5\u6536</p>"},{"location":"notes/cs/Sys/CO/instruction/#arguments","title":"Arguments","text":"<p>\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570</p> <p>\u7528\u7684\u662fx10-x17\u8fd98\u4e2a\u5bc4\u5b58\u5668\uff0c\u5728\u8fd9\u91cc\u8fd9\u51e0\u4e2a\u5bc4\u5b58\u5668\u88ab\u79f0\u4e3aa0-a7\u5bc4\u5b58\u5668</p> <p>x1\u5bc4\u5b58\u5668\u662f\u4fdd\u7559\u8fd4\u56de\u5730\u5740\u7684\u5bc4\u5b58\u5668\uff0c\u5728\u8fd9\u91cc\u88ab\u79f0\u4e3ara\u5bc4\u5b58\u5668</p>"},{"location":"notes/cs/Sys/CO/instruction/#leaf-function","title":"Leaf Function","text":"<p>\u662f\u4e3a\u4e86\u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u80fd\u591f\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\u548c\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf</p> <p>\u6808\u7684\u5730\u5740\u5206\u914d\u662f\u4ece\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u7684</p> <p>\u6808\u9876\u7684\u6307\u9488\u662fsp\u5bc4\u5b58\u5668\uff0c\u6307\u5411\u538b\u5165\u6808\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e</p> <ul> <li>Push\uff1a</li> </ul> <pre><code>addi sp, sp, -8\nsd xxx, 0(sp)\n</code></pre> <ul> <li>Pop</li> </ul> <pre><code>ld xxx, 0(sp)\naddi sp, sp, 8\n</code></pre> <p></p> leaf function <p></p> <p>\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u8fdb\u884c\u8fd0\u7b97\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7528\u5230\u4e86x5\uff0cx6\uff0cx20\u8fd9\u4e09\u4e2a\u975e\u53c2\u6570\u5bc4\u5b58\u5668\u4f5c\u4e3ag+h\uff0ci+j\u7684\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u4f46\u662f\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u4fdd\u5b58\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\uff0c\u56e0\u6b64\u5982\u679c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u51fd\u6570\u4e2d\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u5c06\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u538b\u5165\u6808\u4e2d\uff0c\u7136\u540e\u5728\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u518d\u5c06\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5f39\u51fa\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u51fd\u6570\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6808\u5728\u8fd9\u91cc\u8d77\u5230\u4e86\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\u5b58\u50a8\u7684\u4f5c\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u79f0\u8c03\u7528\u8005\u548c\u88ab\u8c03\u7528\u8005\u4e4b\u95f4\u7684\u8fd9\u6bb5\u6808\u4e3a\u8c03\u7528\u6808\u3002</p> <p>\u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6d6a\u8d39\u4e86\u5927\u91cf\u6307\u4ee4\u5728\u6808\u7684\u538b\u5165\u548c\u5f39\u51fa\u4e0a\uff0c\u6548\u7387\u4e0d\u9ad8\uff0c\u6211\u4eec\u7ea6\u5b9a\uff1a</p> <p>\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u5212\u5206\uff1a</p> <ul> <li>t0-t6: \u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u5b58\u653e\u4e34\u65f6\u53d8\u91cf(\u5185\u90e8\u4e34\u65f6\u7528 \u4e0d\u4fdd\u5b58)</li> <li>s0-s11: \u4fdd\u5b58\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u5b58\u653e\u9700\u8981\u4fdd\u5b58\u7684\u53d8\u91cf(\u5916\u90e8\u7528 \u4f1a\u4fdd\u5b58)</li> </ul> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c3d\u91cf\u4f7f\u7528t0-t6\u8fd9\u4e9b\u4e0d\u7528\u5165\u6808\u7684\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u9700\u8981\u4fdd\u5b58\u7684\u53d8\u91cf\u592a\u591a\uff0c\u90a3\u4e48\u518d\u4f7f\u7528s0-s11\u8fd9\u4e9b\u9700\u8981\u5165\u6808\u7684\u5bc4\u5b58\u5668\u3002</p> <p>\u4e0b\u9762\u662f\u5bc4\u5b58\u5668\u7684\u5e38\u7528\u7528\u9014\uff1a</p> \u5bc4\u5b58\u5668 \u540d\u79f0 \u7528\u9014\u63cf\u8ff0 saver x0 zero \u786c\u4ef60 x1 ra \u8fd4\u56de\u5730\u5740 caller x2 sp \u6808\u6307\u9488 callee x3 gp \u5168\u5c40\u6307\u9488 x4 tp \u7ebf\u7a0b\u6307\u9488 x5 t0 \u4e34\u65f6\u53d8\u91cf/\u5907\u7528\u94fe\u63a5\u5bc4\u5b58\u5668 caller x6-7 t1-2 \u4e34\u65f6\u53d8\u91cf caller x8 s0/fp \u4fdd\u5b58\u5bc4\u5b58\u5668/\u5e27\u6307\u9488 callee x9 s1 \u4fdd\u5b58\u5bc4\u5b58\u5668 callee x10-11 a0-1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c caller x12-17 a2-7 \u51fd\u6570\u53c2\u6570 caller x18-27 s2-11 \u4fdd\u5b58\u5bc4\u5b58\u5668 callee x28-31 t3-6 \u4e34\u65f6\u53d8\u91cf caller"},{"location":"notes/cs/Sys/CO/instruction/#nested-function","title":"Nested Function","text":"<p>leaf func\u4e2d\u7684\u6808\u662f\u5355\u6b21\u7684\uff0c\u521a\u5f00\u59cbpush\uff0c\u7ed3\u675fpop</p> n! <p></p> <p>\u5bf9\u6574\u4f53\u7684\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790\uff1a</p> <ol> <li>\u9012\u5f52\u8c03\u7528     \u5728\u8fdb\u884c\u9012\u5f52\u65f6\uff0c\u7531\u4e8en\u4e00\u76f4&gt;0\uff0c\u56e0\u6b64\u4f1a\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb\uff0c\u76f4\u5230n==0\u4e3a\u6b62\uff0c\u4e5f\u5c31\u662f\u5728fact\u90e8\u5206bge\u524d\u548cL1\u90e8\u5206jal\u8bed\u53e5\u4e4b\u95f4\u6765\u56de\u8df3\u8f6c\u5230n==0</li> <li> <p>\u6062\u590d\u5e76\u8ba1\u7b97     \u5230n==0\u540e\uff0c\u5148\u8fdb\u884c\u4e00\u6b21\u5bf9base case\u7684\u5904\u7406\uff0c\u4e5f\u5c31\u662ffact(0) = 1\uff0c\u7136\u540e\u8fdb\u884c\u6062\u590d\uff0c\u6062\u590d\u7684\u8fc7\u7a0b\u662fL1\u90e8\u5206jal\u8bed\u53e5\u7684\u8fd4\u56de\uff0c\u4e00\u76f4\u5728L1\u90e8\u5206jal\u8bed\u53e5\u548cjalr\u8bed\u53e5\u4e4b\u95f4\u6765\u56de\u8df3\u8f6c\uff0c\u76f4\u5230\u8fd4\u56de\u5230\u6808\u9876</p> </li> <li> <p>\u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c     \u6700\u7ec8jalr\u8bed\u53e5\u8fd4\u56de\u540e\uff0cx10\u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c</p> </li> </ol> <p>\u4ee5n=3\u4e3a\u4f8b\uff1a</p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p></p> <p>FP\u662f\u5e27\u6307\u9488frame pointer\uff0c\u7528\u6765\u6307\u5411\u5f53\u524d\u51fd\u6570\u7684\u6808\u5e27\u7684\u6808\u5e95\uff0c\u53ea\u6709\u5f53\u8df3\u8f6c\u51fd\u6570\u65f6\uff0c\u624d\u4f1a\u6539\u53d8FP\u7684\u503c</p>"},{"location":"notes/cs/Sys/CO/instruction/#memory-layout","title":"Memory Layout","text":"<ul> <li>Text: program code \u5c31\u662f\u653e\u6307\u4ee4</li> <li>Static data: global variables</li> <li>Dynamic data: heap \u52a8\u6001\u6570\u636e-malloc\u7528\u7684</li> <li>Stack: automatic variables \u81ea\u52a8\u53d8\u91cf</li> </ul>"},{"location":"notes/cs/Sys/CO/instruction/#comunicate","title":"Comunicate","text":"<p>\u4e0d\u540c\u7f16\u7801\u6709\u4e0d\u540c\u7684\u6570\u636e\u957f\u5ea6\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u4e0d\u540c\u7684load\u548cstore\u6307\u4ee4</p> <ul> <li>lb: load byte </li> <li>lh: load halfword</li> <li>lw: load word</li> <li> <p>ld: load doubleword</p> </li> <li> <p>lbu: load byte unsigned</p> </li> <li>lhu: load halfword unsigned</li> </ul> <p>\u56e0\u4e3a\u5bc4\u5b58\u5668\u662f64\u4f4d\u7684\uff0c\u56e0\u6b64\u8bfb\u53d6\u51fa\u6765\u7684\u6570\u636e\u9700\u8981\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff08<code>lb</code>\uff09\u6216\u96f6\u6269\u5c55\uff08<code>lbu</code>\uff09</p> <p>\u6bd4\u5982\u5728\u8bfb\u53d6A[i]\u65f6\uff0c\u5982\u679cA\u662fint\u578b\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8bfb\u53d64\u4e2a\u5b57\u8282\uff0c\u5982\u679cA\u662fshort\u578b\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8bfb\u53d62\u4e2a\u5b57\u8282</p> <ul> <li>sb: store byte</li> <li>sh: store halfword</li> <li>sw: store word</li> <li>sd: store doubleword</li> </ul> <p>store\u6307\u4ee4\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\u6216\u96f6\u6269\u5c55\u4e86\uff0c\u6211\u4eec\u53ea\u662f\u628a\u5bf9\u5e94\u90e8\u5206\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u4e0a</p> <p>\u4e0a\u8ff0\u56db\u4e2a\u6307\u4ee4\u5c31\u662f\u5b58\u5728\u5bc4\u5b58\u5668\u7684rightmost 8/16/32/64 bits</p> string copy <p></p> <p>\u4f46\u662fi\u5e94\u8be5\u5b58\u5728\u4e34\u65f6\u5bc4\u5b58\u5668\u800c\u4e0d\u662fs3\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u6808\u6765\u5b58\u4e86</p>"},{"location":"notes/cs/Sys/CO/instruction/#addressing","title":"Addressing","text":""},{"location":"notes/cs/Sys/CO/instruction/#wide-immediate","title":"Wide Immediate","text":"<p>\u5bf9\u4e8ejal\u6307\u4ee4\uff0c\u5982\u679c\u7acb\u5373\u6570\u662f32\u4f4d\u7684\u5c31\u8d85\u8fc7\u4e86\u4ed6\u7684\u8df3\u8f6c\u8303\u56f4\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4f7f\u7528<code>lui</code>\u8fd9\u4e2a\u6307\u4ee4\u5148\u5c06\u6240\u9700\u8981\u8df3\u8f6c\u7684\u6307\u4ee4\u7684\u5730\u5740\u7684\u9ad820\u4f4d\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u7528<code>jalr</code>\u6307\u4ee4\u5c06\u8fd9\u4e2a\u5bc4\u5b58\u5668\u548c\u504f\u79fb\u91cf\u76f8\u52a0\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u8df3\u8f6c\u5730\u5740</p> 32-bit immediate <p></p> <p>\u8fd9\u91cc\u662f\u52a0\u4e0a977\u800c\u4e0d\u662f976\uff0c\u56e0\u4e3a\u5728lui\u65f6\u6269\u5c55\u4e86\u7b26\u53f7\u4f4d\uff0c\u5176\u5b9e\u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\u4e3a\u4ec0\u4e48\u52a0\u4e0a1\uff0c\u4f46\u662f\u65e2\u7136\u8bf4\u4e86\u5c31\u8bb0\u4f4f\u5427\uff08\u6700\u8fd1\u4e8b\u60c5\u592a\u591a \u5988\u7684 \u6446\u4e86\u3002\u3002\u3002\uff09</p> <p>po\u4e00\u5f20\u4e66\u4e0a\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u91ca\u5427 \u6211\u89c9\u5f97\u5927\u4f53\u610f\u601d\u5c31\u662f\u770b\u7b2c11\u4f4d\u662f0\u8fd8\u662f1\uff0c\u5982\u679c\u662f0\uff0c\u90a3\u4e48\u5c31\u52a0976\uff0c\u5982\u679c\u662f1\uff0c\u90a3\u4e48\u5c31\u52a0977</p> <p></p>"},{"location":"notes/cs/Sys/CO/instruction/#branch-addressing","title":"Branch Addressing","text":"<p>\u662f\u76f8\u5bf9\u5730\u5740\u8df3\u8f6c</p> <ul> <li>PC-relative addressing\uff1a</li> </ul> \\[ \\begin{align} Target &amp;= PC + Branch\\_offset \\\\            &amp;= PC + 2\\times imm \\end{align} \\] <p>\u5728B-Type\u6307\u4ee4\u4e2d\uff0c\u7acb\u5373\u6570\u662f<code>{{19{inst[31]}}, inst[31], inst[19:12], inst[20], inst[30:25], inst[11:8], 1'b0}</code>\uff0c\u53ef\u4ee5\u770b\u5230\u6700\u4f4e\u4f4d\u662f0\uff0c\u56e0\u6b64Branch_offset\u4e00\u5b9a\u662f\u5076\u6570</p> <p>Instruction to Code</p> <p></p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u9700\u8981\u8fdb\u884c2000\u7684\u8df3\u8f6c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u8fdb\u884c\u7f16\u7801\u65f6\uff0cinstruction\u4e2d\u7684\u7acb\u5373\u6570\u88ab\u7f16\u7801\u5230\u4e86\u5bc4\u5b58\u5668\u7684\u9ad811\u4f4d\uff0c\u7b2c0\u4f4d\u662f0\uff0c\u56e0\u6b64\u5728instruction\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7f16\u78011000\u7684\u7acb\u5373\u6570\uff0c\u5c31\u53ef\u4ee5\u5b8c\u62102000\u7684\u8df3\u8f6c</p> Encode while loop <p></p> <p></p> <ul> <li>bne: \u8fdb\u884c\u8df3\u8f6c\u662f\u7531\u81ea\u8eab\u5230Exit\u7684\u5730\u5740\uff0coffset = 80024-80012 = 12\uff0c\u4f46\u662f\u7f16\u7801\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728rd\u4e5f\u5c31\u662foffset\u4e2d\u7f16\u78010110 = 6</li> </ul> <p>beq\u4e5f\u662f\u540c\u7406\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cbeq\u7684offset\u662f\u8d1f\u7684\uff0c</p> <p>RISC-V Addressing Summary</p> <p></p> <pre><code>1. addi x5, x6, 4 \n2. add x5, x5, x6\n3. ld x5, 100(x6)\n4. beq x5, x0, L1\n</code></pre>"},{"location":"notes/cs/Sys/CO/instruction/#disassembly","title":"Disassembly","text":"<p>\u53cd\u6c47\u7f16\uff1a\u5c06Machine Code\u8f6c\u6362\u4e3aAssembly Code</p> Table <p></p>"},{"location":"notes/cs/Sys/CO/instruction/#synchronization-and-prgram-translation","title":"Synchronization and Prgram Translation","text":"<p>\u8fd9\u91ccmade\u8bf4\u662f\u4e86\u89e3\u4e00\u4e0b\u7684\uff0c\u8865\u96ea\u5566</p> <p>\u653e\u4e00\u4e0bnoughtq\u7684\u7b14\u8bb0\u94fe\u63a5\ud83d\udd17\u5427 \u5199\u7684\u8d85\u7ea7\u597d </p>"},{"location":"notes/cs/Sys/CO/instruction/#c-in-risc-v","title":"C in RISC-V","text":""},{"location":"notes/cs/Sys/CO/instruction/#sort","title":"Sort","text":""},{"location":"notes/cs/Sys/CO/processor/","title":"Single-Cycle Processor","text":""},{"location":"notes/cs/Sys/CO/processor/#intro","title":"Intro","text":"<p>\u6307\u4ee4\u6267\u884c\u7684\u6b65\u9aa4\u6982\u8ff0\uff1a</p> <ul> <li>\u6700\u5f00\u59cb\u7684\u4e24\u6b65\u662f\u76f8\u540c\u7684\uff1a</li> </ul> <ol> <li> <p>Fetch \u4ece\u6307\u4ee4\u5185\u5b58\u4e2d\u62ff\u51fa\u6307\u4ee4</p> </li> <li> <p>Decode and Read Operands \u89e3\u7801\u5e76\u8bfb\u5bc4\u5b58\u5668</p> <ul> <li>\u5728\u8fdb\u884c\u6307\u4ee4\u89e3\u7801\u5b8c\u6210\u524d\u5c31\u53ef\u4ee5\u8bfb\u53d6\u6570\u636e\uff0c\u56e0\u4e3a\u6570\u636e\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff0c\u5e76\u4e14\u8bfb\u6570\u636e\u4e0d\u4f1a\u7834\u574f\u6570\u636e\uff0c\u6240\u4ee5\u65e0\u8bba\u662f\u5426\u4f7f\u7528\uff0c\u90fd\u4f1a\u5148\u62ff\u51fa\u5bf9\u5e94\u7684register operands\u3002</li> </ul> </li> <li> <p>Executive Control</p> <p>\u6240\u6709\u7684\u6307\u4ee4\u90fd\u4f1a\u7ecf\u8fc7ALU\uff0c\u6839\u636e\u6307\u4ee4\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684ALU\u64cd\u4f5c\uff1a</p> <ul> <li>\u5185\u5b58\u5f15\u7528\u6307\u4ee4\uff1aMemory Reference </li> <li>\u7b97\u672f\u903b\u8f91\u6307\u4ee4\uff1aArithmetic and Logic </li> <li>\u6761\u4ef6\u5206\u652f\u6307\u4ee4\uff1a\u5224\u65ad\u4e24\u6570\u662f\u5426\u76f8\u7b49</li> </ul> </li> <li> <p>Memory Access </p> <p>\u901a\u8fc7load\u548cstore\u6307\u4ee4\u8bbf\u95ee\u6570\u636e</p> <ul> <li>\u5185\u5b58\u5f15\u7528\u6307\u4ee4\uff1a\u8bbf\u95ee\u5185\u5b58\u8fdb\u884c\u8bfb\u5199</li> <li>\u7b97\u672f\u903b\u8f91\u6307\u4ee4/\u52a0\u8f7d\u6307\u4ee4\uff1a\u5c06\u5185\u5b58\u6216\u8005\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668</li> <li>\u6761\u4ef6\u5206\u652f\u6307\u4ee4\uff1a\u6839\u636e\u6bd4\u8f83\u7ed3\u679c\u66f4\u65b0PC\uff1aPC+4 \u6216\u5230\u6307\u5b9a\u76ee\u6807\u5730\u5740</li> </ul> </li> <li> <p>Write results</p> </li> <li> <p>Update PC</p> </li> </ol> <p>simple processor</p> <p></p> <p>\u4e09\u4e2a\u7ea2\u8272\u5706\u5708\u662f\u591a\u8def\u9009\u62e9\u5668\uff0c\u56e0\u4e3a\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u6765\u6e90\u8fdb\u884c\u9009\u62e9\uff0c\u6bd4\u5982ALU\u4e2d\u7684\u8f93\u5165\u65e2\u53ef\u4ee5\u662fR\u578b\u6307\u4ee4\u4e2d\u7684\u4e24\u4e2a\u6e90\u5bc4\u5b58\u5668\uff0c\u4e5f\u53ef\u4ee5\u662fI\u578b\u6307\u4ee4\u4e2d\u7684\u4e00\u4e2a\u6e90\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a\u7acb\u5373\u6570\u3002</p> <p>with control</p> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#clock-methodology","title":"Clock Methodology","text":""},{"location":"notes/cs/Sys/CO/processor/#datapath","title":"Datapath","text":"<p>\u6784\u5efa\u6570\u636e\u901a\u8def\u65f6\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u662f\u6307\u4ee4\u4e2d\u7684\u5b58\u50a8\u6570\u636e\u800c\u4e0d\u662f\u63a7\u5236\u4fe1\u53f7\u3002</p>"},{"location":"notes/cs/Sys/CO/processor/#instruction-fetch","title":"Instruction Fetch","text":"<p>64bit\u5bc4\u5b58\u5668\uff0c\u9700\u898164\u4e2aD\u89e6\u53d1\u5668\u3002</p>"},{"location":"notes/cs/Sys/CO/processor/#r-inst","title":"R Inst","text":"<ul> <li>Register File: \u5bc4\u5b58\u5668\u5806\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u5bc4\u5b58\u5668<ul> <li>\u8fdb\u884c\u9009\u62e9\u7684wire\u662f5\u4f4d\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u670932\u4e2a\u3002</li> <li>\u8bfb\u53d6\u6570\u636e\u53ea\u9700\u8981\u8fdb\u884c\u9009\u62e9\uff08\u5728R\u578b\u6307\u4ee4\u524d\u5df2\u7ecf\u6709ld\u6307\u4ee4\u5c06\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668\uff09\uff0c\u5199\u5165\u6570\u636e\u9700\u8981\u53d7<code>RegWrite</code>\u4fe1\u53f7\u63a7\u5236  </li> </ul> </li> <li>ALU: \u8fdb\u884c\u7b97\u672f\u903b\u8f91\u8fd0\u7b97<ul> <li>\u6709\u4e00\u4e2a\u56db\u4f4d\u7684MUX\u8fdb\u884c\u63a7\u5236\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u53ea\u9700\u8981\u4e09\u4f4d\uff0c\u6709\u4e00\u4f4d\u662f\u6d6a\u8d39\u7684\uff08\u4f46\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u56db\u4f4d\uff0c\u56e0\u4e3aMUX\u7684\u8f93\u5165\u7aef\u53e3\u6570\u5fc5\u987b\u662f2\u7684\u5e42\u6b21\uff09</li> </ul> </li> </ul>"},{"location":"notes/cs/Sys/CO/processor/#load-store-inst","title":"Load Store Inst","text":"<p>\u9664\u4e86R\u578b\u6307\u4ee4\u7528\u5230\u7684\u4e24\u4e2a\u5143\u4ef6\uff0c\u8fd8\u9700\u8981\u4e24\u4e2a</p> <ul> <li>Data Memory: \u6570\u636e\u5185\u5b58,\u4e0d\u540c\u4e8eRegister File\uff0cData Memory\u540c\u65f6\u5177\u6709\u8bfb\u5199\u63a7\u5236<ul> <li>\u8bfb\u53d6\u6570\u636eld\u9700\u8981\u53d7<code>MemRead</code>\u4fe1\u53f7\u63a7\u5236\uff0c\u5199\u5165\u6570\u636esd\u9700\u8981\u53d7<code>MemWrite</code>\u4fe1\u53f7\u63a7\u5236<ul> <li>\u5185\u5b58\u7684\u8bfb\u53d6\u9700\u8981\u63a7\u5236\u4fe1\u53f7\u7684\u539f\u56e0\u662f\uff1a\u5e76\u4e0d\u662f\u6240\u6709\u6307\u4ee4\u90fd\u4f1a\u6709\u8bbf\u5b58\u64cd\u4f5c\uff0c\u6240\u4ee5\u90a3\u4e9b\u7528\u4e0d\u5230\u5185\u5b58\u503c\u7684\u6307\u4ee4\u5c31\u6ca1\u5fc5\u8981\u8bfb\u53d6\u5185\u5b58\u6570\u636e\uff0c\u56e0\u6b64\u9700\u8981\u63a7\u5236\u4fe1\u53f7\u6765\u5173\u95ed\u8fd9\u6247\u95e8\uff1b\u800c\u6240\u6709\u6307\u4ee4\u90fd\u8981\u4ece\u5bc4\u5b58\u5668\u5806\u91cc\u8bfb\u53d6\u6570\u636e\uff0c\u56e0\u6b64\u5bc4\u5b58\u5668\u5806\u7684\u8bfb\u53d6\u65e0\u9700\u63a7\u5236\u4fe1\u53f7</li> </ul> </li> </ul> </li> <li>Imm Gen: \u4ece 32 \u4f4d\u6307\u4ee4\u4e2d\u63d0\u53d6\u51fa\u4e0e\u7acb\u5373\u6570\u76f8\u5173\u7684\u4f4d\uff0c\u5c06\u8fd9\u4e9b\u4f4d\u6309\u6b63\u786e\u7684\u987a\u5e8f\u62fc\u63a5\u8d77\u6765\uff0c\u540c\u65f6\u5bf9\u5176\u7b26\u53f7\u6269\u5c55\u81f3 64 \u4f4d</li> </ul>"},{"location":"notes/cs/Sys/CO/processor/#branch-inst","title":"Branch Inst","text":"<p>\u8fd9\u91cc\u53ea\u8003\u8651\u4e86beq\u6307\u4ee4</p> <ul> <li>\u5bc4\u5b58\u5668\u7528\u4e8e\u5b58\u653e\u4e24\u4e2a\u88ab\u6bd4\u8f83\u7684\u6e90\u64cd\u4f5c\u6570\uff0c\u8fdb\u5165ALU\u8fdb\u884c\u6bd4\u8f83</li> <li>ALU\uff1a\u7b2c\u4e00\u4e2aALU\u7684\u4f5c\u7528\u662f\u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u4e14\u6709\u4e00\u4e2azero\u7528\u4e8e\u5224\u65ad\u662f\u5426\u76f8\u7b49\u8fdb\u800c\u9009\u62e9PC+4\u8fd8\u662fbranch target address\uff1b\u7b2c\u4e8c\u4e2aALU\u53ea\u6709\u52a0\u6cd5\uff0c\u7528\u4e8e\u8ba1\u7b97branch target address</li> <li>Shift left 1:\u6839\u636e\u4e4b\u524d\u5b66\u5230\u7684\uff0c\u5728\u8fdb\u884cbranch target address\u8ba1\u7b97\u65f6\uff0c\u6211\u4eec\u6240\u9700\u7684offset\u5728\u7acb\u5373\u6570\u4e2d\u662f\u771f\u5b9e\u503c\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u5bf9\u4e8eImm Gen\u8f93\u51fa\u7684\u7acb\u5373\u6570\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u5de6\u79fb\u4e00\u4f4d\u7684\u64cd\u4f5c\u4e582</li> </ul>"},{"location":"notes/cs/Sys/CO/processor/#compose","title":"Compose","text":"<ul> <li>\u6bcf\u4e2a\u6570\u636e\u901a\u8def\u90fd\u662f\u5355\u5468\u671f\u7684</li> </ul> <p>datapath</p> <p></p> All types' datapath R-typeI-typeS-typeB-typeJ-type <p></p> <p>R-type \u7684\u6307\u4ee4\u662f\u5b8c\u5168\u5efa\u7acb\u5728Register File\u4e0a\u7684\uff0c\u6ca1\u6709\u4e0e\u5185\u5b58\u7684\u4ea4\u4e92\uff0c\u4f7f\u7528R\u6307\u4ee4\u4e00\u5b9a\u662f\u5728\u5185\u5b58\u8bfb\u53d6\u540e\u8fdb\u884c\u7684\u3002</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#control-unit","title":"Control Unit","text":"<p>\u53ea\u67097+4\u6839\u4fe1\u53f7</p> <p>\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5904\u7406\u516b\u4e2a\u4fe1\u53f7</p> <p>8 signals</p> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#alu-control","title":"ALU Control","text":"<p>ALU\u7684\u63a7\u5236\u4fe1\u53f7\u4e00\u5171\u67094\u4f4d\uff1a</p> <ul> <li>\u5176\u4e2d2\u4f4d\u5206\u522b\u6765\u81eafunct3\u548cfunct7</li> <li>\u53e6\u59162\u4f4d\u662f\u6765\u81eaALUop\uff0c\u5b83\u6765\u81ea\u4e3b\u63a7\u5236\u5355\u5143 (main control unit)\uff0c\u7528\u4e8e\u6307\u5b9a\u5177\u4f53\u6267\u884c\u4f55\u79cd\u6307\u4ee4\uff0c\u4e0d\u540c\u7684\u503c\u5bf9\u5e94\u4e0d\u540c\u7684\u7c7b\u578b\uff1a<ul> <li>00\uff1a\u52a0\u8f7d/\u5b58\u50a8\u6307\u4ee4</li> <li>01\uff1a\u6761\u4ef6\u5206\u652f\u6307\u4ee4</li> <li>10\uff1aR\u578b\u6307\u4ee4</li> <li>11\uff1aI\u578b\u6307\u4ee4\uff08addi andi\uff09\u597d\u50cf\u4f1a\u7528\u5230\uff1f</li> </ul> </li> </ul> ALU control Instruction opcode ALUOp Operation Funct7 Funct3 Desired ALU action ALU control Input ld 00 load doubleword XXXXXXX XXX add 0010 sd 00 store doubleword XXXXXXX XXX add 0010 beq 01 branch if equal XXXXXXX XXX subtract 0110 R-type 10 and 0000000 111 AND 0000 R-type 10 or 0000000 110 OR 0001 R-type 10 add 0000000 000 add 0010 R-type 10 sub 0100000 000 subtract 0110 R-type 10 slt 0000000 010 slt 0111 R-type 10 srl 0000000 101 srl 0101 R-type 10 xor 0000000 011 xor 0011 <p>\u91c7\u7528\u4e24\u7ea7\u89e3\u7801\uff0c\u6839\u636eopcode\u5c31\u53ef\u4ee5\u5224\u65ad7\u6839\u4fe1\u53f7\u7ebf\u7684\u503c\uff0c\u8fd9\u65f6\u5019 ALU \u518d\u770bfunct3\u548cfunct7\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u5269\u4e0b\u76844\u6839\u4fe1\u53f7\u7ebf\u7684\u503c\u3002</p> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#main-control-unit","title":"Main Control Unit","text":"<p>\u4f59\u4e0b\u7684\u516d\u4e2a\u63a7\u5236\u4fe1\u53f7\u7684\u4f5c\u7528\u5982\u4e0b\uff1a</p> <p></p> <ul> <li>ALUSrc: \u51b3\u5b9aALU\u7684\u7b2c\u4e8c\u4e2a\u8f93\u5165\uff0c0\u65f6\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c1\u65f6\u4ece\u7acb\u5373\u6570\u4e2d\u8bfb\u53d6\u6570\u636e</li> <li>PCSrc: \u51b3\u5b9aPC\u7684\u503c\uff0c0\u65f6\u9009\u62e9PC+4\uff0c1\u65f6\u9009\u62e9branch target address</li> <li>MemtoReg: 00\u65f6\u5c06ALU\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u76ee\u6807\u5bc4\u5b58\u5668\uff0c01\u65f6\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8fd4\u56de\u7ed9\u76ee\u6807\u5bc4\u5b58\u5668\uff0c</li> </ul> <p>\u6700\u7ec8\uff1a</p> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#_1","title":"Processor","text":""},{"location":"notes/cs/Sys/CO/processor/#operation-of-datapath","title":"Operation of Datapath","text":"<p>\u7070\u8272\u7684\u5143\u4ef6\u4ee3\u8868\u6ca1\u6709\u88ab\u4f7f\u7528</p> R-typeL/S-typeB-type <p> </p> <pre><code>add x1, x2, x3\n</code></pre> <ol> <li>IF\uff1a\u53d6\u6307\uff0c\u9012\u589ePC</li> <li>ID\uff1a\u89e3\u7801\uff0c\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u53d6\u5bc4\u5b58\u5668</li> <li>EX\uff1a\u6267\u884c\uff0cALU\u6839\u636e\u64cd\u4f5c\u7801\u786e\u5b9a\u8fd0\u7b97\u7c7b\u578b\uff0c\u7136\u540e\u5bf9\u4e0a\u4e00\u6b65\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97</li> <li>MEM\uff1a\u65e0</li> <li>WB\uff1a\u5199\u56de\uff0c\u5c06\u7ed3\u679c\u5199\u5165x1</li> </ol> <p> </p> <pre><code>ld x1, offset(x2)\n</code></pre> <ol> <li>IF\uff1a\u53d6\u6307\uff0c\u9012\u589ePC</li> <li>ID\uff1a\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u53d6x2</li> <li>EX\uff1aALU\u8ba1\u7b97x2\u7684\u6570\u636e\u548c\u7ecf\u8fc7imm\u7b26\u53f7\u6269\u5c55\u7684offset\u7684\u548c\uff0c\u5f97\u5230\u5185\u5b58\u5730\u5740</li> <li>MEM\uff1a\u6839\u636e\u5730\u5740\u5f97\u5230\u5bf9\u5e94\u6570\u636e</li> <li>WB\uff1a\u5c06\u6570\u636e\u5199\u5165x1</li> </ol> <p> </p> <pre><code>beq x1, x2, offset\n</code></pre> <ol> <li>IF\uff1a\u53d6\u6307\uff0c\u9012\u589ePC</li> <li>ID\uff1a\u4ece\u5bc4\u5b58\u5668\u5806\u4e2d\u8bfb\u53d6x1\u548cx2</li> <li>EX\uff1aALU\u5c06\u4e24\u4e2a\u8bfb\u53d6\u7684\u6570\u636e\u76f8\u51cf\uff0c\u540c\u65f6\u5c06PC\u4e0e\u5de6\u79fb\u4e00\u4f4d\u540e\u7684offset\u76f8\u52a0\uff0c\u5f97\u5230branch target address\uff0c\u6839\u636eALU\u7684zero\u4fe1\u53f7\u5224\u65ad\u5982\u4f55\u66f4\u65b0PC</li> </ol>"},{"location":"notes/cs/Sys/CO/processor/#pipelining-process","title":"Pipelining Process","text":"<p>\u6d41\u6c34\u7ebfPipeline\u7684\u672c\u8d28\u662f\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u901a\u8fc7\u5c06\u6307\u4ee4\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u89e3\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e2a\u9636\u6bb5\u5728\u4e0d\u540c\u7684\u65f6\u949f\u5468\u671f\u5185\u6267\u884c\uff0c\u4ece\u800c\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u5185\u5b8c\u6210\u591a\u6761\u6307\u4ee4\u7684\u6267\u884c\u3002</p> <p>\u5728RISC-V\u4e2d\uff0c\u6d41\u6c34\u7ebfPipeline\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\uff1a</p> <ul> <li>IF: Instruction Fetch \u4ece\u6307\u4ee4\u5185\u5b58\u4e2d\u53d6\u51fa\u6307\u4ee4</li> <li>ID: Instruction Decode \u89e3\u7801\u6307\u4ee4</li> <li>EX: Execute \u6267\u884c\u6307\u4ee4</li> <li>MEM: Memory Access \u8bbf\u95ee\u5185\u5b58</li> <li>WB: Write Back \u5199\u56de\u5bc4\u5b58\u5668</li> </ul> <p>pipeline</p> <p></p> <p>     \u56fe\u5f62\u5de6\u534a\u8fb9\u9634\u5f71\u662f\u5199\u5165\uff0c\u53f3\u534a\u8fb9\u9634\u5f71\u662f\u8bfb\u53d6\uff0c\u5168\u9634\u5f71\u662f\u90fd\u6709\uff08\u8fd9\u91cc\u5047\u8bbe\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\uff0c\u5143\u4ef6\u7684\u524d\u534a\u4e2a\u5468\u671f\u53ef\u4ee5\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u540e\u534a\u4e2a\u5468\u671f\u53ef\u4ee5\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff09 </p> <p>\u5bc4\u5b58\u5668\u8bfb\u5199</p> <p>\u6ce8\u610f\u5230\u5bf9\u4e8e\u5bc4\u5b58\u5668\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u53ea\u5360\u7528\u65f6\u949f\u5468\u671f\u7684\u4e00\u534a\uff0c\u4f46\u662fID\u548cWB\u7684\u5b8c\u6210\u5206\u522b\u662f\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u524d\u540e\u4e24\u4e2a\u90e8\u5206\uff0c\u53ea\u662f\u56e0\u4e3a\u6709\u65f6\u5bf9\u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\u662f\u540c\u65f6\u8fdb\u884c\u7684\uff0c\u4e3a\u4e86\u907f\u514d\u51b2\u7a81\uff0c\u6240\u4ee5\u624d\u5c06ID\u548cWB\u7684\u5b8c\u6210\u65f6\u95f4\u9519\u5f00\uff0c\u8fd9\u4e00\u64cd\u4f5c\u662f\u901a\u8fc7\u5c06\u8bfb\u5199\u7684\u64cd\u4f5c\u5206\u522b\u7531clk\u7684\u4e0a\u5347\u6cbf\u548c\u4e0b\u964d\u6cbf\u5b8c\u6210\u5b9e\u73b0\u7684</p> comparison example <p>     \u5728\u89c4\u5b9a\u597d\u6bcf\u4e2a\u90e8\u4ef6\u6240\u9700\u8981\u7684\u65f6\u95f4\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5355\u5468\u671fCPU\u548c\u6d41\u6c34\u7ebfCPU\u7684\u6267\u884c\u6307\u4ee4\u65f6\u95f4\u8fdb\u884c\u6bd4\u8f83 </p> <p></p> <p>\u6267\u884c\uff1a <pre><code>ld x1, 100(x4)\nld x2, 200(x4)\nld x3, 400(x4)\n</code></pre></p> <p></p> <p>     \u5355\u5468\u671fCPU\u7684\u65f6\u949f\u5468\u671f\u662f\u53d6\u51b3\u4e8e\u6700\u957f\u6307\u4ee4\u7684\u65f6\u95f4\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u65f6\u949f\u5468\u671f\u5c31\u662f800ps\uff0c\u6267\u884c3\u4e2ald\u6307\u4ee4\u9700\u89812400ps </p> <p>     \u6d41\u6c34\u7ebfCPU\u7684\u6267\u884c\u662f\u5206\u9636\u6bb5\u7684\uff0c\u65f6\u949f\u5468\u671f\u53d6\u51b3\u4e8e\u6700\u957f\u7684\u9636\u6bb5\uff0c\u5728\u8fd9\u91cc\u662f200ps\uff0creg\u64cd\u4f5c\u867d\u7136\u53ea\u7528100ps\uff0c\u4f46\u662f\u4ecd\u7136\u9700\u8981\u8fdb\u884c200ps\u7684\u64cd\u4f5c\uff0c\u6700\u7ec8\u9700\u89817 * 200ps = 1400ps </p> <p>\u4f46\u662f\u4e0d\u662f\u6240\u6709\u6307\u4ee4\u90fd\u9700\u8981\u6267\u884c\u6240\u6709\u9636\u6bb5\u7684\u6307\u4ee4\u7684\uff0c\u6bd4\u5982load\u548cstore\u6307\u4ee4\u5c31\u4e0d\u9700\u8981\u6267\u884cEX\u548cMEM\u9636\u6bb5\u3002</p> <p>\u6027\u80fd\u65b9\u9762\uff1a\u7406\u60f3\u6761\u4ef6\u4e0b</p> \\[ \\text{Time between instructions}_{pipelined} = \\frac{\\text{Time between instructions}_{non-pipelined}}  {\\text{Number of stages}} \\] <p>\u65f6\u949f\u5468\u671f</p> <p>     \u6d41\u6c34\u7ebfCPU\u7684\u65f6\u949f\u5468\u671f = \u8017\u65f6\u6700\u957f\u7684\u9636\u6bb5\u6240\u82b1\u7684\u65f6\u95f4 </p> <ul> <li>\u53ea\u6709\u5f53\u6bcf\u4e2a\u9636\u6bb5\u7684\u65f6\u95f4\u76f8\u7b49\u7684\u7406\u60f3\u60c5\u51b5\u53d1\u751f\uff0c\u624d\u4f1a\u6709\u4e0a\u8ff0\u7684\u6027\u80fd\u63d0\u5347</li> <li>\u540c\u65f6\u5bf9\u4e8eLatency\uff0c\u6bcf\u4e2a\u6307\u4ee4\u662f\u4e0d\u51cf\u7684</li> </ul> <p>Success</p> <p>Pipeline \u662f\u901a\u8fc7\u589e\u52a0\u901a\u91cf\uff08throughput\uff09\u6765\u63d0\u9ad8\u6027\u80fd\u7684\uff0c\u800c\u4e0d\u662f\u51cf\u5c11Latency</p>"},{"location":"notes/cs/Sys/CO/processor/#hazards","title":"Hazards","text":"<p>Harzard\uff08\u7ade\u4e89\uff09\uff1a</p> <p>\u662f\u6307\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u6307\u4ee4\u65e0\u6cd5\u6309\u7167\u9884\u671f\u987a\u5e8f\u7ee7\u7eed\u6267\u884c\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\uff1a</p> <ul> <li> <p>Structure Hazards</p> <ul> <li>\u9700\u8981\u7684\u8d44\u6e90\u88ab\u5360\u7528\uff0c\u5bfc\u81f4\u6307\u4ee4\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c</li> <li>\u5982\u591a\u6761\u52a0\u8f7d\u5b58\u50a8\u6307\u4ee4\u5728\u540c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u5bf9\u540c\u4e00\u5757\u5185\u5b58\u8fdb\u884c\u8bbf\u95ee</li> </ul> </li> <li> <p>Data Hazards</p> <ul> <li>\u9700\u8981\u7b49\u5f85\u4e0a\u4e00\u6761\u6307\u4ee4\u5b8c\u6210\u6570\u636e\u5199\u5165\u6216\u8005\u8bfb\u53d6\u5b8c\u6210\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u6dfb\u52a0\u989d\u5916\u7684\u786c\u4ef6\u524d\u9012\uff08forwarding\uff09\u6216\u79f0\u4e3a\u65c1\u8def\uff08bypassing\uff09</li> </ul> <p> </p> <p>\u53ea\u6709\u5f53\u76ee\u6807\u9636\u6bb5\u6bd4\u6e90\u9636\u6bb5\u665a\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u524d\u9012</p> <ul> <li>\u8fd9\u4e00\u60c5\u51b5\u5bf9\u4e8eR\u578b\u6307\u4ee4\u662f\u9002\u7528\u7684\uff0c\u4f46\u662f\u5982\u679c\u5148\u6267\u884c\u52a0\u8f7d\u6307\u4ee4\uff0c\u540e\u6267\u884c\u4f9d\u8d56\u4e8e\u8be5\u52a0\u8f7d\u6307\u4ee4\u6570\u636e\u7684\u6307\u4ee4\uff0c\u5373\u4f7f\u52a0\u4e86\u4e00\u4e2a\u524d\u9012\uff0cCPU \u8fd8\u662f\u4e0d\u5f97\u4e0d\u6682\u505c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a\u52a0\u8f7d\u4f7f\u7528\u6570\u636e\u5192\u9669(load-use data hazard)\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</li> </ul> <p> </p> <p>\u4e2d\u95f4\u7684\u6c14\u6ce1\u79f0\u4e3a\u6d41\u6c34\u7ebf\u505c\u987f\uff08pipeline stall\uff09\u6216\u8005bubble</p> <p>\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u5c42\u9762\u7684\u4f18\u5316\u6765\u89e3\u51b3\uff1a</p> \u987a\u5e8f\u8c03\u6574 <pre><code>a = b + c;\nc = b + f;\n</code></pre> <p>\u5f97\u5230\u4e00\u4e2a\u81ea\u7136\u7684\u6c47\u7f16\u4ee3\u7801\uff1a</p> <pre><code>ld  x1, 0(x31)\nld  x2, 8(x31)\nadd x3, x1, x2\nsd  x3, 24(x31)\nld  x4, 16(x31)\nadd x5, x1, x4\nsd  x5, 32(x31)\n//\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u9ad8\u4eae\u7684\u4e24\u7ec4\u4ee3\u7801\u90fd\u53d1\u751f\u4e86load-use data hazard\uff0c\u9700\u8981\u589e\u52a0\u4e24\u4e2astall\n</code></pre> <pre><code>ld  x1, 0(x31)\nld  x2, 8(x31)\nld  x4, 16(x31)\nadd x3, x1, x2\nsd  x3, 24(x31)\nadd x5, x1, x4\nsd  x5, 32(x31)\n//\u56e0\u4e3a\u5728\u8fd9\u91cc\u6211\u4eec\u63d0\u524d\u4e86f\u7684\u8bfb\u53d6\uff0c\u6b63\u597d\u7ed9\u4e86b\u8bfb\u53d6\u6307\u4ee4\u65f6\u95f4\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u589e\u52a0stall\u4e86\n</code></pre> <p></p> <p>\u8fd9\u79cd\u8ba1\u7b97\u4e5f\u662f\u8981\u638c\u63e1\u7684\uff0c\u9700\u8981\u81ea\u5df1\u5224\u65ad\u662f\u5426\u52a0\u5165stall</p> </li> <li> <p>Control Hazards</p> <ul> <li>\u9700\u8981\u51b3\u5b9a\u7684\u63a7\u5236\u4fe1\u53f7\u4f9d\u8d56\u4e8e\u5148\u524d\u7684\u6307\u4ee4\uff0c\u5bfc\u81f4\u65e0\u6cd5\u786e\u5b9a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u5c06\u5bc4\u5b58\u5668\u7684\u6bd4\u8f83\u548c\u76ee\u6807\u5730\u5740\u7684\u8ba1\u7b97\u63d0\u524d\u5230ID\u9636\u6bb5</li> <li>\u4f46\u662f\u8fd9\u6837\u4ecd\u7136\u4f1a\u6709\u4e00\u4e2abubble\u7684\u4ea7\u751f\uff1a</li> </ul> <p> </p> <ul> <li>\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\u5206\u652f\u9884\u6d4b\uff1a</li> <li>\u4e00\u79cd\u65b9\u6cd5\u662f\u9759\u6001\u9884\u6d4b<ul> <li>\u65e0\u8bba\u4ec0\u4e48\u6761\u4ef6\u90fd\u8fdb\u884c\u8df3\u8f6c\uff0c\u5982\u679c\u6210\u529f\u5219\u7ee7\u7eed\u8fdb\u884c\uff0c\u5982\u679c\u5931\u8d25\u5c31\u64a4\u56de\u9519\u8bef\u6307\u4ee4\uff0c\u8fd9\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u65f6\u949f\u5468\u671f\uff0c\u6548\u679c\u5c31\u548c\u63d2\u5165bubble\u4e00\u6837\u4e86\uff0c\u8fd9\u6837\u81f3\u5c11\u63d0\u9ad850%\u6548\u7387</li> </ul> </li> <li>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u52a8\u6001\u9884\u6d4b</li> </ul> </li> </ul>"},{"location":"notes/cs/Sys/CO/processor/#datapath-in-pipeline","title":"DataPath in Pipeline","text":"<p>\u6839\u636e\u6307\u4ee4\u6267\u884c\u7684\u9636\u6bb5\uff0c\u5c06\u5148\u524d\u7684datapath\u8fdb\u884c\u5212\u5206\uff1a</p> <p></p> <p>\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6307\u4ee4\u6267\u884c\u7684\u987a\u5e8f\u90fd\u662f\u4ece\u5de6\u5230\u53f3\uff0c\u4f46\u662f\u4e5f\u6709\u4f8b\u5916\uff1a</p> <ul> <li>\u6700\u540e\u7684\u5199\u56de\u9636\u6bb5\uff0c\u5c06\u5185\u5b58\u7684\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668\u662f\u4ece\u53f3\u5f80\u5de6\u7684\uff08\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u5192\u9669\uff09</li> <li> <p>PC\u5bc4\u5b58\u5668\u7684\u8f93\u5165\u6570\u636e\uff08\u4e24\u79cd\u9009\u62e9\uff09\u662f\u4ece\u53f3\u5f80\u5de6\u4f20\u9012\u7ed9PC\u9009\u62e9MUX\u7684\uff08\u53ef\u80fd\u4f1a\u5bfc\u81f4\u63a7\u5236\u5192\u9669\uff09</p> </li> <li> <p>\u5728\u6d41\u6c34\u7ebf\u4e2d\u6211\u4eec\u9700\u8981\u50a8\u5b58\u8fdb\u5165\u6267\u884c\u7684\u6307\u4ee4\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u5bc4\u5b58\u5668\uff0c\u53eb\u505a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\uff0c\u4f4d\u4e8e\u4e24\u4e2a\u9636\u6bb5\u4e4b\u95f4</p> </li> </ul> <p>ld process of pipeline</p> IFIDEXMEMWB <p></p> <ul> <li>\u5c06PC\u5bc4\u5b58\u5668\u7684\u6307\u4ee4\u5730\u5740\u4f20\u7ed9IF/ID\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\uff0c\u4f9b\u4e0b\u4e00\u6761\u6307\u4ee4\u4f7f\u7528</li> <li>\u540c\u65f6\u4f20\u9012\u6307\u4ee4\u5185\u5bb9</li> </ul> <p></p> <ul> <li>\u9664\u4e86\u7ee7\u7eed\u4f20\u9012\u6307\u4ee4\u5730\u5740\uff0c\u8fd8\u8981\u4f20\u9012\u5bc4\u5b58\u5668\u5806\u7684\u6570\u636e\u548c\u7acb\u5373\u6570</li> </ul> <p></p> <ul> <li>\u5c06\u8ba1\u7b97\u597d\u7684\u5185\u5b58\u5730\u5740\u653e\u5165EX/MEM</li> </ul> <p></p> <ul> <li>\u4eceEX/MEM\u8bfb\u53d6\u5185\u5b58\u5730\u5740\uff0c\u7136\u540e\u5c06\u5bf9\u5e94\u7684\u5185\u5b58\u6570\u636e\u5199\u5165MEM/WB</li> </ul> <p></p> <ul> <li>\u4eceMEM/WB\u8bfb\u53d6\u5185\u5b58\u6570\u636e\uff0c\u7136\u540e\u5c06\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668</li> </ul> <p>save register number</p> <p>\u5728\u6700\u540e\u5199\u56de\u6570\u636e\u65f6\uff0c\u6211\u4eec\u7684\u6307\u4ee4\u4e2d\u5df2\u7ecf\u6ca1\u6709\u9700\u8981\u5199\u56de\u7684\u5bc4\u5b58\u5668\u7f16\u53f7\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6539\u8fdb\u4e86\u8fd9\u4e2a\u8bbe\u8ba1\uff0c\u5c06\u5bc4\u5b58\u5668\u7f16\u53f7\u653e\u5728\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u6837\u5728WB\u9636\u6bb5\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</p>"},{"location":"notes/cs/Sys/CO/processor/#control-in-pipeline","title":"Control in Pipeline","text":"<p>\u5728\u5355\u5468\u671fCPU\u4e2d\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u7cfb\u5217\u63a7\u5236\u4fe1\u53f7\u6765\u8fdb\u884c\u63a7\u5236\uff0c\u5728\u8fd9\u91cc\u6d41\u6c34\u7ebfCPU\u4e5f\u9700\u8981\u63a7\u5236\u6307\u4ee4\uff0c\u5e76\u4e14\u8fd9\u4e9b\u63a7\u5236\u6307\u4ee4\u4e5f\u662f\u968f\u7740\u6d41\u6c34\u578b\u5bc4\u5b58\u5668\u7684\u4f20\u9012\u800c\u4f20\u9012\u7684</p> <p>\u53ef\u4ee5\u770b\u5230\u63a7\u5236\u4fe1\u53f7\u968f\u7740\u6d41\u6c34\u7ebf\u7684\u8fdb\u884c\u9010\u6e10\u88ab\u4f7f\u7528\uff0c\u88ab\u4f7f\u7528\u7684\u4fe1\u53f7\u5c06\u4e0d\u518d\u88ab\u4f20\u9012\uff0c\u8282\u7ea6\u4e86\u7a7a\u95f4</p> <p>\u5728\u52a0\u5165\u63a7\u5236\u5668\u540e\uff1a</p> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#data-harzards-fixing","title":"Data Harzards Fixing","text":"<p>data hazard\u7684\u89e3\u51b3\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u8fdb\u884c\u524d\u9012forwarding\uff0c\u53e6\u4e00\u79cd\u662f\u8fdb\u884c\u505c\u987fstall</p>"},{"location":"notes/cs/Sys/CO/processor/#forwarding","title":"Forwarding","text":"<pre><code>sub x2, x1, x3\nand x12, x2, x5\nor  x13, x6, x2\nadd x14, x2, x2\nsd  x15, 100(x2)\n</code></pre> <p>\u753b\u51fa\u6d41\u6c34\u7ebf\u56fe\uff1a</p> <p>\u56fe\u4e2d\u4e0b\u65b9\u56db\u4e2a\u84dd\u8272\u7684\u5bc4\u5b58\u5668\u662f\u9700\u8981\u524d\u9012\u6570\u636e\u7684\u5bc4\u5b58\u5668\uff0c\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f97\u5230\u6700\u7ec8\u7684x2\u6570\u503c\u662f\u5728MEM/WB\u9636\u6bb5\uff0c\u4e5f\u5c31\u662f\u56fe\u4e2d\u6240\u793a\u7b2c\u4e00\u4e2a\u84dd\u8272\u5bc4\u5b58\u5668\uff0c\u4f46\u662f\u663e\u7136\u4e0a\u65b9\u7684\u4e24\u4e2a\u9700\u8981x2\u5bc4\u5b58\u5668\u6570\u503c\u7684\u6307\u4ee4\u65e0\u6cd5\u524d\u9012\uff0c\u800c\u6211\u4eec\u5728EX\u9636\u6bb5\u5176\u5b9e\u5df2\u7ecf\u5f97\u5230\u4e86x2\u7684\u6570\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06x2\u7684\u6570\u503c\u524d\u9012\u7ed9\u4e0a\u65b9\u4e24\u4e2a\u6307\u4ee4</p> <p>\u6211\u4eec\u89c2\u5bdf\u5230\u4e24\u4e2a\u524d\u9012\u7684\u53d1\u751f\uff1a</p> <ul> <li>\"1\"\u578b\u662f\u76f8\u90bb\u7684\u524d\u9012\uff1a</li> </ul> \\[ \\text{EX/MEM.RegRd} \\rightarrow \\text{ID/EX.RegRs1(Or Rs1)} \\] <ul> <li>\"2\"\u578b\u662f\u76f8\u90bb\u4e24\u4e2a\u6307\u4ee4\u4e4b\u95f4\u7684\u524d\u9012\uff1a</li> </ul> \\[ \\text{MEM/WB.RegRd} \\rightarrow \\text{ID/EX.RegRs2(Or Rs2)} \\] <p>\u524d\u9012\u7684\u5224\u65ad</p> <p>\u9664\u4e86\u4e0a\u8ff0\u4e24\u4e2a\u5224\u65ad\uff0c\u8fd8\u9700\u8981\u8865\u5145\u4e00\u4e9b\u5224\u65ad\u6761\u4ef6</p> <ul> <li>\u5e76\u4e0d\u662f\u6240\u6709\u6307\u4ee4\u90fd\u5305\u542b\u5199\u5165\u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u63d0\u524d\u68c0\u6d4b<code>RegWrite</code>\u4fe1\u53f7\u662f\u5426\u4e3a1\uff0c\u4e0d\u662f\u7684\u8bdd\u76f4\u63a5\u4e0d\u7528\u524d\u9012</li> <li> <p>\u5982\u679c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u6570\u503c\u662f0\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u8fdb\u884c\u524d\u9012\uff0c\u56e0\u4e3a0\u503c\u7684\u5bc4\u5b58\u5668\u6ca1\u6709\u4efb\u4f55\u610f\u4e49</p> </li> <li> <p>\u540c\u6837\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662fdubble data harzard\uff0c\u5982\u679c\u8fde\u7eed\u4e09\u6761\u6307\u4ee4\u90fd\u5728\u4f7f\u7528\u540c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6700\u65b0\u7684\u6307\u4ee4\u8fdb\u884c\u524d\u9012\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u6307\u4ee4\uff1a</p> </li> </ul> <p><pre><code>add x2, x2, x3\nadd x2, x2, x4\nadd x2, x2, x5\n</code></pre> \u6211\u4eec\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u5c31\u662f\u4e0b\u65b9\u4f2a\u4ee3\u7801\u7684\u9ad8\u4eae\u90e8\u5206</p> <p>\u6700\u7ec8\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u4e2aforwarding unit\u7684\u903b\u8f91\u5199\u6210\u4e00\u4e2a\u5927\u7684\u5224\u65ad\u6a21\u5757\uff1a</p> <pre><code>//For EX to ID\nif (EX/MEM.RegWrite == 1 and EX/MEM.RegRd != 0)\n    if (EX/MEM.RegRd == ID/EX.RegRs1)\n        ForwardA = 10\n    if (EX/MEM.RegRd == ID/EX.RegRs2)\n        ForwardB = 10\n\n//For MEM to ID\nif (MEM/WB.RegWrite == 1 and MEM/WB.RegRd != 0)\n    and not (EX/MEM.RegWrite == 1 and (EX/MEM.RegRd == ID/EX.RegRs1 or EX/MEM.RegRd == ID/EX.RegRs2))\n    if (MEM/WB.RegRd == ID/EX.RegRs1)\n        ForwardA = 01\n    if (MEM/WB.RegRd == ID/EX.RegRs2)\n        ForwardB = 01\n</code></pre> <p>\u6211\u4eec\u5728\u8fd9\u6bb5\u5224\u8bfb\u4e2d\u4f7f\u7528\u4e86<code>ForwardA</code>\u548c<code>ForwardB</code>\u6765\u8868\u793a\u524d\u9012\u7684\u7c7b\u578b\uff0c\u5176\u5b9e\u5c31\u662f\u6dfb\u52a0\u4e00\u4e2aMux\u6765\u9009\u62e9ALU\u7684\u8f93\u5165\u4f4d\u7f6e\u662fA\u8fd8\u662fB</p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u5b8c\u6574\u7684datapath\uff1a</p>"},{"location":"notes/cs/Sys/CO/processor/#stalling","title":"Stalling","text":"<p>\u5148\u524d\u6211\u4eec\u8bb2\u5230\u8fc7\uff0c\u5f53\u53d1\u751fload-use data hazard\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u505c\u987f\uff0c\u4e5f\u5c31\u662f\u63d2\u5165stall\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f</p> <p>load-use data hazard</p> <p> </p> <p>\u53ef\u4ee5\u770b\u5230\u5728ld\u6307\u4ee4\u5f97\u5230\u6570\u636e\u7684\u4f4d\u7f6e\u662f\u5728MEM/WB\u9636\u6bb5\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u80fd\u5728ALU\u8ba1\u7b97\u51fa\u7ed3\u679c\uff08imm + x1 \u7684\u5730\u5740\uff09\u540e\u7684\u76f4\u63a5\u62ff\u51fa\uff0c\u56e0\u4e3aALU\u7684\u8ba1\u7b97\u7ed3\u679c\u5730\u5740\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\u624d\u662fx2\u7684\u503c</p> <p>\u8fd9\u65f6\u65e0\u8bba\u600e\u6837\u524d\u9012\u90fd\u8fbe\u4e0d\u5230\u76ee\u7684\uff0c\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2astall</p> <p>\u7ed9\u51fa\u5224\u65ad\u6761\u4ef6\uff1a</p> <pre><code>if (ID/EX.MemRead == 1 and (ID/EX.RegRs(1 or 2) == IF/ID.RegRd))\nstall pipeline \n</code></pre> <ul> <li>\u6211\u5728\u5b66\u4e60\u8fd9\u91cc\u65f6\u5e76\u6ca1\u6709\u5f88\u7406\u89e3\uff0c\u56e0\u4e3a\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u662f\u770b\u5230\u4e86ld\u6307\u4ee4\u6267\u884c\u7ed3\u675f\u540e\u7684\u60c5\u51b5\uff0c\u4f46\u5176\u5b9e\u5728ld\u6307\u4ee4\u6267\u884c\u5230ID/EX\u9636\u6bb5\u65f6\uff0cadd\u6307\u4ee4\u5c31\u5df2\u7ecf\u8bd1\u7801\u5b8c\u6210\u4e86\uff0c\u6211\u4eec\u5728CC2-CC3\u8fd9\u4e2a\u65f6\u523b\u5c31\u5df2\u7ecf\u8981\u8fdb\u884c\u5224\u65ad</li> </ul> <p>\u8fd9\u6837\u6211\u4eecstall\u540e\u7684\u6d41\u6c34\u7ebf\u8fdb\u7a0b\u5c31\u53d8\u4e3a\u4e86\uff1a</p> <p>hygg\u7684\u4f5c\u4e1a\u9898\u4e2d\u8fd9\u5f20\u56fe\u7247\u4e0d\u9519\uff0c\u5bf9\u9f50\u7684\u662f\u6bcf\u4e2a\u6307\u4ee4\u9636\u6bb5\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u770b\u51fastall\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u5411hygg\u5b66\u4e60\uff08\uff09</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u89e3\u51b3\u600e\u4e48\u8fdb\u884cstall\uff1a</p> <ul> <li>\u505c\u6b62IF\uff1a\u4e0d\u80fd\u6539\u53d8PC\u5bc4\u5b58\u5668\u7684\u6570\u503c\uff08\u8fdb\u884c\u91cd\u590d\u8bfb\u53d6\uff09\uff0c\u6240\u4ee5\u8981\u4e3a PC \u5bc4\u5b58\u5668\u6dfb\u52a0\u5199\u4fe1\u53f7 <code>PCWrite</code></li> <li>\u505c\u6b62ID\uff1a\u4e0d\u80fd\u6539\u53d8 IF/ID \u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u7684\u503c\uff08\u8bfb\u53d6\u91cd\u590d\u7684\u503c\uff09\u6240\u4ee5\u8981\u4e3a\u8be5\u5bc4\u5b58\u5668\u6dfb\u52a0\u5199\u4fe1\u53f7 <code>IF/IDWrite</code></li> <li>\u786e\u4fdd\u7a7a\u64cd\u4f5cnops\uff1a\u4fdd\u8bc1\u6d41\u6c34\u7ebf\u4e0d\u6539\u53d8\u72b6\u6001\uff0c\u9700\u8981\u8ba9\u6240\u6709\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a0\uff08\u5b9e\u9645\u4e0a\u53ea\u9700\u8981<code>RegWrite</code>\u548c<code>MemWrite</code>\u4e3a0\uff0c\u5176\u4ed6\u65e0\u6240\u8c13\uff09</li> </ul> <p></p>"},{"location":"notes/cs/Sys/CO/processor/#control-hazards-fixing","title":"Control Hazards Fixing","text":"<p>\u5982\u56fe\uff0c\u5728beq\u6307\u4ee4\u4e2d\uff0c\u6211\u4eec\u6b63\u5e38\u60c5\u51b5\u4e0b\u9700\u8981\u5728WB\u9636\u6bb5\u624d\u80fd\u77e5\u9053beq\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\uff0c\u8fd9\u4e4b\u4e2d\u4f1a\u6709\u4e09\u4e2a\u6307\u4ee4\u7684\u6267\u884c\uff08\u88ab\u6d6a\u8d39\uff09\uff0c\u56e0\u6b64\u5206\u652f\u6307\u4ee4\u7684\u4f18\u5316\u662f\u5f88\u91cd\u8981\u7684</p> <ul> <li>\u4e00\u4e2a\u601d\u8def\u662f\uff1aCalculate in advance</li> </ul> <p>\u6b63\u5e38\u60c5\u51b5\u4e0b\u7528ALU\u6765\u8ba1\u7b97\u51fabeq\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4f46\u5b9e\u9645\u4e0a\u5728ID\u9636\u6bb5\u5df2\u7ecf\u6709imm\u548cx1\u7684\u503c\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5728ID\u9636\u6bb5\u540e\u589e\u52a0\u4e00\u4e2a\u4e13\u95e8\u7684\u5206\u652f\u52a0\u6cd5\u5668\u5c31\u53ef\u4ee5\u63d0\u524d\u7b97\u51fa\uff0c\u53ef\u4ee5\u51cf\u5c11\u4e24\u4e2a\u6307\u4ee4\u7684\u6d6a\u8d39</p> 12 <p></p> <p></p> <ul> <li>\u4e00\u4e2a\u66f4\u597d\u7684\u601d\u8def\u662f\uff1aBranch Prediction\uff0c\u6709\u4e24\u79cd<ul> <li>Static Prediction</li> <li>Dynamic Prediction</li> </ul> </li> </ul> <p>\u9759\u6001\u9884\u6d4b\u5c31\u662f\u4e00\u76f4\u8ba4\u4e3a\u81ea\u5df1\u8df3\u8f6c\u6216\u8005\u4e0d\u8df3\u8f6c\uff0c\u52a8\u6001\u9884\u6d4b\u5219\u662f\u6839\u636e\u5386\u53f2\u60c5\u51b5\u8fdb\u884c\u5224\u65ad</p> <p>1-bit predictor\uff1a</p> <p>\u75280 1\u6765\u533a\u522b\u4e0a\u6b21\u7684\u5206\u652f\u6307\u4ee4\u662f\u5426\u53d1\u751f\u8df3\u8f6c\uff0c\u5982\u679c\u9884\u6d4b\u5931\u8d25\uff0c\u53cd\u8f6c\u8fd9\u4e2abit\u3002</p> <p>2-bit predictor\uff1a</p> <p>\u76f8\u5f53\u4e8e\u53ea\u6709\u8fde\u7eed\u4e24\u6b21\u5224\u65ad\u9519\u8bef\u624d\u4f1a\u66f4\u6539\u5224\u65ad\uff0c\u53ef\u4ee5\u4f18\u5316while loop\u7684\u72af\u9519\u6b21\u6570</p>"},{"location":"notes/cs/algorithm/Approximation/","title":"Intro","text":"<p>Dealing with HARD problems</p> <p>\u76ee\u6807\uff1a\u5f97\u5230\u4e00\u4e2a\u8fd1\u4f3c\u89e3</p>"},{"location":"notes/cs/algorithm/Approximation/#approximation-ratio","title":"Approximation Ratio","text":"<p>\u6211\u4eec\u901a\u8fc7\u8fd1\u4f3c\u6bd4\\(\\rho(n)\\)\u6765\u8861\u91cf\u8fd1\u4f3c\u7b97\u6cd5\u7684\u597d\u574f\uff0c\u79f0\u4e00\u4e2a\u7b97\u6cd5\u662f\\(\\rho(n)\\)-\u8fd1\u4f3c\u7b97\u6cd5\u3002\u5b83\u7684\u610f\u4e49\u662f\uff1a\u89c4\u6a21\u4e3an\u7684\u8f93\u5165\u4e0b\uff0c\u8fd1\u4f3c\u89e3\\(C\\)\u4e0e\u6700\u4f18\u89e3\\(C^*\\)\u7684\u6bd4\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4</p> \\[ max(\\frac{C}{C^*}, \\frac{C^*}{C}) \\leq \\rho(n) \\] <p>\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u4e0e\u95ee\u9898\u89c4\u6a21\u76f8\u5173\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\\(\\rho(n)\\)\u968f\u7740n\u7684\u589e\u5927\u800c\u589e\u5927</p>"},{"location":"notes/cs/algorithm/Approximation/#approximation-scheme","title":"Approximation Scheme","text":"<p>\u6700\u4f18\u89e3\u7684\u8fd1\u4f3c\u65b9\u6848(Approximation Scheme)\uff0c\u6307\u7684\u662f\u4e00\u7c7b\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u5bf9\u7ed9\u5b9a\\(\\epsilon &gt; 0\\)\uff0c\u5b83\u662f\u4e00\u4e2a(1+\\(\\epsilon\\))\u8fd1\u4f3c\u7b97\u6cd5</p> <ul> <li>\u591a\u9879\u5f0f\u65f6\u95f4\u8fd1\u4f3c\u65b9\u6848\uff08PTAS\uff09\uff1a\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\\(\\epsilon &gt; 0\\)\uff0c\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u8ba1\u7b97\uff0c\u8bb0\u4f5c\\(O(n^{f(\\frac{1}{\\epsilon})})\\)<ul> <li>\u5b8c\u5168\u591a\u9879\u5f0f\u65f6\u95f4\u8fd1\u4f3c\u65b9\u6848\uff08FPTAS\uff09\uff1a\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\\(\\epsilon &gt; 0\\)\uff0c\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u8ba1\u7b97\uff0c\u8bb0\u4f5c\\(O\\left(n^{O(1)}\\left(\\frac{1}{\\varepsilon}\\right)^{O(1)}\\right)\\)</li> </ul> </li> </ul> <p>\u8bbe\u8ba1\u7b97\u6cd5\u65f6\uff0c\u8003\u8651\u5982\u4e0b\u4e09\u4e2a\u65b9\u9762\uff1a</p> <ul> <li>\u6700\u4f18\u6027\uff08Optimality\uff09\uff1a\u89e3\u7684\u8d28\u91cf</li> <li>\u6548\u7387\uff08Efficiency\uff09\uff1a\u8ba1\u7b97\u6210\u672c</li> <li>\u5168\u90e8\u5b9e\u4f8b\uff08All instances\uff09\uff1a\u901a\u7528\u6027</li> </ul> <p>\u5bf9\u8fd9\u51e0\u4e2a\u65b9\u9762\u8fdb\u884ctrade-off</p> <ul> <li>A+B\uff1a\u5bf9\u4e8e\u7279\u6b8a\u60c5\u51b5\u7684\u7cbe\u51c6\u5feb\u901f\u7b97\u6cd5</li> <li>A+C\uff1a\u9488\u5bf9\u5168\u90e8\u5b9e\u4f8b\u7684\u7cbe\u51c6\u7b97\u6cd5</li> <li>B+C\uff1a\u8fd1\u4f3c\u7b97\u6cd5</li> </ul>"},{"location":"notes/cs/algorithm/Approximation/#example","title":"Example","text":""},{"location":"notes/cs/algorithm/Approximation/#bin-packing","title":"Bin Packing","text":"<p>3 Solutions</p> Next fitFirst fitBest fit <p>Next fit\uff1a\u6309\u7167\u8f93\u5165\u987a\u5e8f\u4e00\u4e2a\u4e2a\u653e\u7269\u54c1\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u80fd\u591f\u653e\u5728\u4e0e\u4e0a\u4e00\u4e2a\u7269\u54c1\u76f8\u540c\u7684\u7bb1\u5b50\u4e2d\uff0c\u653e\u5165\uff0c\u5426\u5219\u65b0\u5f00</p> <pre><code>void NextFit() {\nread item1;\nwhile (read item2) {\n    if (item2 can be packed in the same bin as item1)\n        place item2 in the bin;\n    else\n        create a new bin for item2;\n    item1 = item2;\n} // end-while\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n)\\)</p> <p>\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8fd1\u4f3c\u6bd4\u4e3a2\u7684\u89e3</p> <p>First fit\uff1a\u6309\u7167\u8f93\u5165\u987a\u5e8f\u4e00\u4e2a\u4e2a\u653e\u7269\u54c1\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u80fd\u591f\u653e\u5728\u5f53\u524d\u4efb\u610f\u4e00\u4e2a\u7bb1\u5b50\u4e2d\uff0c\u653e\u5165\uff0c\u5426\u5219\u65b0\u5f00</p> <pre><code>void FirstFit() {\nwhile (read item) {\n    scan for the first bin that is large enough for item;\n    if (found)\n    place item in that bin;\nelse\n    create a new bin for item;\n    } // end-while\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(nlogn)\\)</p> <p>\u53ef\u4ee5\u5f97\u5230\u8fd1\u4f3c\u6bd4\u4e3a1.7\u7684\u89e3</p> <p>Best fit\uff1a\u6309\u7167\u8f93\u5165\u987a\u5e8f\u4e00\u4e2a\u4e2a\u653e\u7269\u54c1\uff0c\u5f53\u524d\u7269\u54c1\u9700\u8981\u653e\u5728\u5269\u4f59\u7a7a\u95f4\u6700\u5c0f\u7684\u7bb1\u5b50\u4e2d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u65b0\u5f00</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(nlogn)\\)</p> <p>\u53ef\u4ee5\u5f97\u5230\u8fd1\u4f3c\u6bd4\u5927\u4e8e1.7\u7684\u89e3</p> <p>Failure</p> <p>\u4e0d\u7528\u592a\u591a\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff1a\u56e0\u4e3a\u6700\u574f\u60c5\u51b5\u4e0bspecial case \u4e0d\u4f1a\u592a\u591a</p> <ul> <li>On-line Algorithm</li> </ul> <p>\u88c5\u7bb1\u95ee\u9898\u4e2d\u662f\u5728\u7ebf\u7b97\u6cd5\uff0c\u5e76\u4e14\u6ca1\u6709\u56de\u6eaf\uff0c\u8fd9\u6837\u662f\u5f88\u96be\u5bf9\u6297\u6570\u636e\u5206\u5e03\u7684\u2014\u2014\u56e0\u4e3a\u770b\u4e0d\u5230\u6570\u636e\u7684\u6574\u4f53\u60c5\u51b5</p> <p>Failure</p> <p>\u5bf9\u4e8e\u6240\u6709\u5728\u7ebf\u7b97\u6cd5\uff0c\u88c5\u7bb1\u95ee\u9898\u90fd\u5230\u4e0d\u4e86\\(\\frac{5}{3}\\)\u8fd9\u4e2a\u8fd1\u4f3c\u6bd4</p> <ul> <li>Off-line Algorithm</li> </ul> <p>\u5728\u79bb\u7ebf\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u8bba\uff1a\u4ee4\\(M\\)\u4e3a\u6876\u7684\u4e2a\u6570\uff0c\u5219\uff1a</p> \\[M \\leq \\frac{11}{9}OPT + 6\\] <p>\u4f7f\u7528First fit Decreasing \u7b97\u6cd5\uff0c\u5373\u5148\u5bf9\u7269\u54c1\u6309\u5927\u5c0f\u964d\u5e8f\u6392\u5217\uff0c\u518d\u4f7f\u7528First fit\u7b97\u6cd5\uff0c\u5219\u6709</p> \\[FFD(L) \\leq \\frac{3}{2}OPT(L)\\]"},{"location":"notes/cs/algorithm/Approximation/#knapsack-problem","title":"Knapsack Problem","text":""},{"location":"notes/cs/algorithm/Approximation/#_1","title":"\u5c0f\u6570\u80cc\u5305","text":"<p>Question</p> <p>\u4ee4\u80cc\u5305\u5bb9\u91cf\u4e3a\\(M\\)\uff0c\u7ed9\u5b9a\\(n\\)\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\\(i\\)\u6709\u91cd\u91cf\\(w_i\\)\u548c\u4ef7\u503c\\(p_i\\)\uff0c\u88ab\u653e\u8fdb\u80cc\u5305\u7684\u6bd4\u4f8b\u4e0d\u8d85\u8fc7\\(x_i\\)\uff0c\u6b64\u65f6\u8be5\u7269\u54c1\u7684\u4ef7\u503c\u4e3a\\(p_i x_i\\)\uff0c\u76ee\u6807\u662f\u4ee4\\(\\sum_{i=1}^{n} p_i x_i\\)\u6700\u5927</p> <ul> <li>\u89e3\u51b3\u65b9\u6cd5\u662f\u6bcf\u6b21\u6309\u7167\u4ef7\u503c\u5bc6\u5ea6\uff1a\\(\\frac{p_i}{w_i}\\)\u964d\u5e8f\u6392\u5217\uff0c\u7136\u540e\u8d2a\u5fc3\u9009\u62e9</li> </ul>"},{"location":"notes/cs/algorithm/Approximation/#0-1","title":"0-1 \u80cc\u5305","text":"<p>\u5728\u5148\u524d\u6211\u4eec\u4f7f\u7528\u7684\u8d2a\u5fc3\u7b97\u6cd5\u8fd9\u91cc\u5c31\u4e0d\u4e00\u5b9a\u4f1a\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u56e0\u6b64\u90a3\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u5c31\u662f\u4e00\u4e2a\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u4e0b\u9762\u5bf9\u5176\u8fd1\u4f3c\u6bd4\\(2\\)\u8fdb\u884c\u8bc1\u660e\uff1a</p> <p>\u8bc1\u660e</p> <p>\u663e\u7136\uff1a\u6240\u6709\u7269\u54c1\u4e2d\u4ef7\u503c\u6700\u5927\u7684\u4e00\u4e2a\u7269\u54c1\u7684\u4ef7\u503c\u80af\u5b9a\u5c0f\u4e8e\u6700\u4f18\u89e3\u7684\u603b\u4ef7\u503c\uff0c\u4e5f\u5c0f\u4e8e\u5c0f\u6570\u80cc\u5305\u7684\u6700\u4f18\u89e3</p> \\[ p_{max} \\leq P_{opt} \\leq P_{frac} \\] <p>\u5e76\u4e14\uff1a\u6700\u5927\u4ef7\u503c\u7269\u54c1\u7684\u4ef7\u503c\u5c0f\u4e8e\u8d2a\u5fc3\u89e3\u7684\u603b\u4ef7\u503c\uff08\u53ef\u4ee5\u53cd\u8bc1\u6765\u7406\u89e3\u6700\u5927\u4ef7\u503c\u7269\u54c1\u4e00\u5b9a\u4f1a\u88ab\u8d2a\u5fc3\u9009\u62e9\uff0c\u5f53\u7136\u8fd9\u91cc\u5047\u8bbe\u6bcf\u4e2a\u7269\u54c1\u7684\u5927\u5c0f\u90fd\u5c0f\u4e8e\u80cc\u5305\u5927\u5c0f\uff09</p> \\[ p_{max} \\leq P_{greedy} \\] <p>\u8fd8\u6709\u4e00\u4e2a\u5f0f\u5b50\uff1a</p> \\[ P_{opt} \\leq P_{greedy} + p_{max} \\] <p>\u8fd9\u662f\u56e0\u4e3a\u4e00\u4e2a\u524d\u63d0\uff1a\u5728\u5c0f\u6570\u89e3\u4e2d\uff0c\u5176\u5b9e\u53ea\u4f1a\u6709\u4e00\u4e2a\u7269\u54c1\u88ab\u62c6\u5206\u653e\u5165\uff0c\u4e5f\u5c31\u662f\u8bf4\u8d2a\u5fc3\u89e3\u548c\u5c0f\u6570\u89e3\u7684\u5dee\u503c\u5c31\u662f\u6ca1\u6709\u88ab\u62c6\u5206\u653e\u5165\u80cc\u5305\u7684\u7269\u54c1\u7684\u4ef7\u503c\uff0c\u8fd9\u4e2a\u7269\u54c1\u80af\u5b9a\u662f\u653e\u5165\u80cc\u5305\u7684\u7269\u54c1\u4e2d\u7684\u4ef7\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5728\u8fd9\u91cc\u8fdb\u884c\u653e\u7f29\uff0c\u5c06\u8fd9\u4e2a\u62c6\u5206\u7684\u7269\u54c1\u4ef7\u503c\u66ff\u6362\u4e3a\u4ef7\u503c\u6700\u5927\u7684\u7269\u54c1\uff0c\u8fd9\u65f6\\(P_{greedy} + p_{max}\\)\u4e00\u5b9a\u5927\u4e8e\\(P_{frac}\\)\uff0c\u8fdb\u800c\u5927\u4e8e\\(P_{opt}\\)</p> <p>\u5bf9\u8fd9\u4e2a\u5f0f\u5b50\u9664\u4ee5\\(P_{greedy}\\)\uff0c\u5f97\u5230\uff1a</p> \\[ P_{opt} \\leq 2P_{greedy} \\]"},{"location":"notes/cs/algorithm/Approximation/#k-center-problem","title":"K-Center Problem","text":"<p>K-Center Problem</p> <p>\u7ed9\u5b9a\\(n\\)\u4e2a\u70b9\uff0c\u5728\u5730\u56fe\u4e0a\u9009\u62e9\\(k\\)\u4e2a\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u5230\u6700\u8fd1\u7684\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\u6700\u5c0f</p> <p> </p> <p>\u8fd9\u91cc\u8fd0\u7528\u8d2a\u5fc3\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898</p> <ul> <li> <p>\u8ba9\u7b2c\u4e00\u4e2a\u70b9\u9009\u62e9\u4e3a\u6240\u6709\u70b9\u7684\u4e2d\u70b9\uff1a\u663e\u7136\u4e0d\u884c\uff0c\u5982\u679c\u6709\u4e24\u5768\u70b9\u79bb\u5f97\u5f88\u8fdc\u90a3\u8fd9\u4e2a\u70b9\u5c31\u975e\u5e38\u4e0d\u5408\u9002</p> </li> <li> <p>\u968f\u673a\u9009\u53d6\u7b97\u6cd5\uff1a</p> </li> </ul> <p>\u5f15\u7406</p> <p>\u5728\u6539\u8fdb\u7684\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u6311\u9009\u67d0\u4e2a\u5730\u5740\u4f5c\u4e3a\u4e2d\u5fc3\u70b9\u3002\u8fd9\u79cd\u505a\u6cd5\u4e4b\u6240\u4ee5\u53ef\u884c\uff0c\u662f\u56e0\u4e3a\u67d0\u4e2a\u4e2d\u5fc3\u70b9\u8986\u76d6\u534a\u5f84\u4e3ar\u7684\u533a\u57df\uff0c\u53ef\u4ee5\u8fd1\u4f3c\u4e3a\u4ee5\uff08\u63a5\u8fd1\uff09\u533a\u57df\u8fb9\u754c\u4e0a\u4e00\u70b9s\u4e3a\u65b0\u7684\u4e2d\u5fc3\u70b9\uff0c2r\u4e3a\u534a\u5f84\u7684\u533a\u57df\u3002\u867d\u7136\u8fd9\u4e2a\u533a\u57df\u660e\u663e\u6bd4\u539f\u533a\u57df\u5927\uff0c\u4f46\u5b83\u4fdd\u8bc1\u80fd\u591f\u8986\u76d6\u539f\u533a\u57df\u6240\u80fd\u8986\u76d6\u7684\u70b9\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u4e0d\u5fc5\u901a\u8fc7\u7e41\u7410\u7684\u8ba1\u7b97\u7b97\u51fa\u4e2d\u5fc3\u70b9\uff0c\u800c\u662f\u4ece\u539f\u6709\u7684\u5730\u5740\u4e2d\u9009\u62e9\u4e2d\u5fc3\u70b9\uff0c\u65b9\u4fbf\u4e86\u5f88\u591a\u3002</p> <p> </p> <ol> <li> <p>\u4ece\u8f93\u5165\u70b9\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u4e2d\u5fc3\uff0c\u7136\u540e\u5220\u9664\u8be5\u70b9\u4e3a\u4e2d\u5fc3\uff0c\\(2r\\)\u4e3a\u534a\u5f84\u7684\u6240\u6709\u70b9</p> <ul> <li>\u8fd9\u91cc\u7684\u53c2\u6570\\(r\\)\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\u6765\u8ba1\u7b97\uff0c\u5148\u4ee4\\(r = \\frac{max(d(i,j))}{2}\\)\uff0c\u7136\u540e\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\u5219\u7f29\u5c0f\\(r\\)\uff0c\u5426\u5219\u589e\u5927\\(r\\)</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logr_{max})\\)</li> </ul> </li> <li> <p>\u5728\u5269\u4f59\u7684\u70b9\u4e2d\u7ee7\u7eed\u9009\u62e9\u7b2c\u4e8c\u4e2a\u4e2d\u5fc3\uff0c\u4ee5\u6b64\u7c7b\u63a8</p> </li> </ol> <ul> <li>\u5982\u679c\u4e00\u4e2a\u503c\\(r\\)\u662f\u6700\u4f18\u7684\uff0c\u90a3\u4e48\u8fd9\u4e00\u7b97\u6cd5\u5f97\u5230\u7684\u89e3\u662f\u6700\u4f18\u89e3\u7684\u4e24\u500d\u2014\u2014\u5373\u8fd9\u662f\u4e00\u4e2a\\(\\rho(n) = 2\\)\u7684\u8fd1\u4f3c\u7b97\u6cd5</li> </ul> <pre><code>Centers Greedy-2r(Sites S[], int n, int K, double r) {\n    Sites S`[] = S[];  // S` is the set of the remaining sites\n    Centers C[] = NULL;\n    while (S`[] != NULL) {\n        Select any s form S` and add it to C;\n        Delete all s` from S` that are at dist(s`, s) &lt;= 2r;\n    } // end-while\n    if (|C| &lt;= K) \n        return C;\n    else\n        ERROR(\"No set of K centers with covering radius at most r\");\n}\n</code></pre>"},{"location":"notes/cs/algorithm/DandC/","title":"Divide and Conquer","text":"<p>\u6838\u5fc3\u601d\u60f3\uff1a\u5c06\u8f83\u5927\u7684\u95ee\u9898\u5206\u89e3\u4e3a\u8f83\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u5206\u522b\u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u7136\u540e\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\u4e3a\u539f\u95ee\u9898\u7684\u89e3</p> <p>Recursively:</p> <p>Divide the problem into a number of subproblems</p> <p>Conquer the subproblems by solving them recursively</p> <p>Combine the solutions to the subproblems into the solution for the original problem</p> \\[ T(n) = aT(n/b) + f(n) \\] \\[ N \u662f\u539f\u95ee\u9898\u7684\u89c4\u5b9a\u5927\u5c0f, f(n) \u662f\u5212\u5206\u548c\u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\u6d88\u8017\u7684\u65f6\u95f4 \\]"},{"location":"notes/cs/algorithm/DandC/#example","title":"Example","text":""},{"location":"notes/cs/algorithm/DandC/#maximum-subarray","title":"Maximum Subarray","text":"<p>\u5e38\u89c1\u5957\u8def\u662f\u5747\u5300\u7684\u4e00\u5206\u4e3a\u4e8c</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u6570\u7ec4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5206\u522b\u6c42\u51fa\u5de6\u534a\u90e8\u5206\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u53f3\u534a\u90e8\u5206\u7684\u6700\u5927\u5b50\u6570\u7ec4\uff0c\u7136\u540e\u8003\u8651\u8de8\u8d8a\u4e2d\u70b9\u7684\u6700\u5927\u5b50\u6570\u7ec4</p> <p>\u6a2a\u8de8\u5b50\u5e8f\u5217\u7684\u6c42\u7b97\u65b9\u6cd5\uff1a</p> <p>\u4ece\u4e2d\u95f4\u5411\u4e24\u8fb9\u626b\u63cf\uff0c\u5206\u522b\u6c42\u51fa\u7531\u4e2d\u95f4\u5411\u5de6\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u7531\u4e2d\u95f4\u5411\u53f3\u7684\u6700\u5927\u5b50\u6570\u7ec4\uff0c\u7136\u540e\u5408\u5e76</p>"},{"location":"notes/cs/algorithm/DandC/#nearest-neighbor","title":"Nearest Neighbor","text":"<p>\u5e73\u9762\u4e0a\u7ed9\u5b9a\u7684N\u4e2a\u70b9\u4e2d\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9</p> <p>Solution</p> <p>\u5728\u5148\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e5f\u91c7\u7528\u4e86\u5c06\u95ee\u9898\u5747\u5300\u4e00\u5206\u4e3a\u4e8c\u7684\u65b9\u6cd5\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u540c\u6837\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002</p> <ul> <li>\u9996\u5148\u6839\u636e\u8fd9\u4e9b\u70b9\u7684x\u5750\u6807\uff0c\u5c06\u8fd9\u4e9b\u70b9\u4e00\u5206\u4e3a\u4e8c\uff0c\u5206\u522b\u6c42\u51fa\u5de6\u534a\u90e8\u5206\u548c\u53f3\u534a\u90e8\u5206\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9</li> <li>\u7136\u540e\u8003\u8651\u8de8\u8d8a\u4e2d\u70b9\u7684\u6700\u8fd1\u4e24\u4e2a\u70b9\uff1a</li> <li>\u5982\u679c\u8003\u8651\u5206\u5272\u7ebf\u5de6\u53f3\u4e24\u8fb9\u6240\u6709\u7684\u70b9\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(N^2)\\)\uff0c\u663e\u7136\u592a\u5927\u4e86</li> <li>\u6211\u4eec\u7b2c\u4e00\u6b65\u8003\u8651\u7684\u662f\u9009\u53d6\u4e00\u4e2a\u675f\u72b6\u5e26\u578b\u533a\u57df\uff0c\u8fd9\u4e2a\u533a\u57df\u8ddd\u79bb\u5206\u5272\u7ebf\u7684\u8ddd\u79bb\u662f\\(\\delta\\)\uff0c\u5219\u6b64\u65f6\u5982\u679c\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u533a\u57df\u4e2d\u53ea\u6709\\(O(\\sqrt{N})\\)\u4e2a\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\\(O(N)\\)\u7684\u65f6\u95f4\u5185\u627e\u5230\u8de8\u8d8a\u4e2d\u70b9\u7684\u6700\u8fd1\u4e24\u4e2a\u70b9\uff0c\u4f46\u4e07\u4e00\u4e0d\u5462\uff1f</li> <li>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u6539\u8fdb\uff0c\u518d\u786e\u5b9a\u7684\u5782\u76f4\u5e26\u72b6\u533a\u57df\u4e2d\uff0c\u6211\u4eec\u518d\u9009\u53d6\u4e00\u4e2a\u7ad6\u76f4\u9ad8\u5ea6\u4e3a\\(\\delta\\)\u7684\u7684\u533a\u57df\uff0c\u8fd9\u6837\u6784\u6210\u4e86\u4e00\u4e2a\u957f\u4e3a\\(2\\delta\\)\uff0c\u5bbd\u4e3a\\(\\delta\\)\u7684\u77e9\u5f62  </li> <li>\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u70b9\u53ea\u9700\u8981\u8003\u8651\u4e0e\u5176\u4ed6\u4e03\u4e2a\u70b9\uff08\u4e5f\u5c31\u662f\u8fb9\u6846\u7684\u89d2\u4e0a\uff09\u4e4b\u95f4\u7684\u8ddd\u79bb\u5373\u53ef</li> <li>\u5373\u4f7f\u5728\u6240\u6709\u70b9\u90fd\u5728\u8fd9\u4e2a\u533a\u57df\u7684\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7684\u5224\u65ad\u6b21\u6570\u662f\u5e38\u6570\u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5dee\u4ecd\u7136\u662f\\(O(N)\\)</li> </ul>"},{"location":"notes/cs/algorithm/DandC/#analysis","title":"Analysis","text":"<p>\u5206\u6cbb\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u4f9d\u6258\u4e8e\u6211\u4eec\u5148\u524d\u5b9a\u4e49\u7684\u7b97\u5f0f</p> \\[ T(n) = aT(n/b) + f(n) \\] <p>\u5bf9\u4e8e\u8fd9\u79cd\u9012\u5f52\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u9012\u5f52\u5c55\u5f00\u7136\u540e\u8ba1\u7b97\uff1a</p> <p>Example</p> \\[ \\begin{aligned} T(n) &amp;= 2T(n/2) + N\\\\ &amp;= 2(2T(n/4) + N/2) + N\\\\ &amp;= 4T(n/4) + 2N\\\\ &amp;= 4(2T(n/8) + N/4) + 2N\\\\ &amp;= 8T(n/8) + 3N\\\\ &amp;= ...\\\\ &amp;= 2^k T(n/2^k) + kN\\\\ &amp;= O(NlogN) \\end{aligned} \\]"},{"location":"notes/cs/algorithm/DandC/#three-methods-for-solving-recurrence","title":"Three Methods for Solving Recurrence","text":"<ul> <li>\u5047\u5b9a\\(\\frac{n}{b}\\) \u662f\u6574\u6570</li> <li>\u5bf9\u4e8e\u8f83\u5c0f\u7684n\uff0c\u6211\u4eec\u5047\u5b9a\\(T(n) = \\Theta(1)\\)</li> </ul> <ol> <li>Substitution Method</li> </ol> <p>\u731c\u6d4b\u4e00\u4e2a\u7ed3\u679c\uff0c\u7136\u540e\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e</p> <p>Warning</p> <p>\u5728\u8fdb\u884c\u8fd9\u6837\u7684\u4e00\u4e2a\u731c\u6d4b\u65f6\uff1a</p> <p>\u5df2\u77e5\\(T(N) = 2T(\\lfloor{N/2}\\rfloor) + N\\)\uff0c\u5982\u679c\u6211\u4eec\u731c\u6d4b\\(T(N) = O(N)\\)\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8bc1\u660e\uff1a</p> <ul> <li>\u5047\u8bbe\u5bf9\u4e8e\\(m \\leq N\\)\uff0c\u7ed3\u8bba\u6210\u7acb</li> <li>\u90a3\u4e48\u5b58\u5728\u4e00\u4e2a\u5e38\u6570\\(c\\)\uff0c\u53d6\\(m = \\lfloor{N/2}\\rfloor\\)\uff0c\u5219\u6709\\(T(\\lfloor{N/2}\\rfloor) \\leq c \\lfloor{N/2}\\rfloor\\)</li> <li>\u5c06\u8fd9\u4e2a\u5f0f\u5b50\u4ee3\u5165\\(T(N) = 2T(\\lfloor{N/2}\\rfloor) + N\\)\uff0c\u5219\u6709\\(T(N) \\leq 2c \\lfloor{N/2}\\rfloor + N = cN + N = O(N)\\)</li> </ul> <p>\u770b\u8d77\u6765\u4f3c\u4e4e\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5728\u6700\u540e\u4e00\u4e2a\u7b49\u5f0f\u4e2d\uff0c\u6211\u4eec\u5f97\u5230\u4e86\\(cN+N=(c+1)N\\)\uff0c\u8fd9\u663e\u7136\u662f\\(O(N)\\)\u7684\uff0c\u4f46\u662f\u5728\u5f62\u5f0f\u4e0a\u5b83\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u9884\u5148\u5047\u8bbe\u6b63\u786e\u7684\u7ed3\u8bba\u662f\\(T(m) \\leq c m\\)\uff0c\u6240\u4ee5\u8981\u6839\u636e\u8fd9\u4e2a\u683c\u5f0f\u6765\u8bc1\u660e\u51fa\\(T(N) \\leq cN\\)\uff0c\u800c\u4e0d\u662f\\(T(N) \\leq (c+1)N\\)\uff0c\u5fc5\u987b\u4fdd\u8bc1\u7cbe\u786e\u7684\u683c\u5f0f\uff0c\u5e38\u6570\u9879\u4e5f\u5fc5\u987b\u4e00\u81f4</p> <p>Tips</p> <p>\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u9012\u63a8\u4e2d\u51fa\u73b0\u4e86\u7c7b\u4f3c\\(T(\\sqrt{N})\\)\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u91c7\u7528\u6362\u5143\u6765\u5904\u7406\uff0c\u8fd9\u91cc\u7684\u65b9\u6cd5\u6765\u6e90\u4e8enoughtq\u540c\u5b66\u7684\u7b14\u8bb0\uff1a</p> <ul> <li>\u4ee4\\(m = \\log2 N\\)\uff0c\u90a3\u4e48\\(T(\\sqrt{N}) = T(2^{m/2})\\)\uff0c\\(T(N) = T(2^m)\\)</li> <li>\u518d\u4ee4\\(S(m) = T(2^m)\\)\uff0c\u5219\u6709\\(S(m/2) = T(2^{m/2}) = T(\\sqrt{N})\\)</li> <li>\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\\(T(N)\\)\u7684\u9012\u63a8\u5f0f\u8f6c\u6362\u4e3a\\(S(m)\\)\u7684\u9012\u63a8\u5f0f\uff1a\\(S(m) = 2S(m/2) +  \u3000m\\)</li> </ul> <ol> <li>Recursion-tree Method</li> </ol> <p>\u753b\u51fa\u4e00\u4e9b\u4f8b\u5b50\uff0c\u7528\u6811\u8868\u793a\u9012\u5f52\u7684\u5c55\u5f00</p> <p>\u5728\u6811\u4e2d\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u662f\u5411\u4e0a\u9012\u5f52\u65f6\u6240\u9700\u8981\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f\u516c\u5f0f\u4e2d\u7684\\(f(n)\\)\uff0c\u800c\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u662f\u9012\u5f52\u7684\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\\(T(1)\\)</p> <ul> <li>\u6211\u4eec\u5728\u8fd0\u7b97\u65f6\u5047\u8bbe\u4e86\u8fd9\u68f5\u6811\u7684\u5f00\u9500\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u5f00\u9500\u4e4b\u548c:</li> <li>\u7b2c\u4e00\u90e8\u5206\u662f\u53f6\u5b50\u7ed3\u70b9\u7684\\(T(1)\\)\u5f00\u9500\u4e4b\u548c</li> <li>\u7b2c\u4e8c\u90e8\u5206\u662f\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\u7684\u9012\u5f52\u5408\u5e76\u5f00\u9500\u4e4b\u548c</li> </ul> Example <p></p> <ul> <li>\u9012\u5f52\u6811\u7684\u4f5c\u7528\u4e0d\u662f\u4e3a\u4e86\u80fd\u591f\u5f97\u5230\u6700\u51c6\u786e\u7684\u8bc1\u660e\uff0c\u800c\u662f\u4e3a\u4e86\u80fd\u5f97\u5230\u4e00\u4e2a\u597d\u7684\u731c\u6d4b\uff0c\u4e4b\u540e\u518d\u7528Substitution Method\u6765\u4e25\u683c\u8bc1\u660e</li> </ul> <p>\u8fdb\u884c\u731c\u6d4b\u7684\u65f6\u5019\u4e00\u822c\u4f1a\u8fdb\u884c\u4e00\u4e2a\u653e\u5927\u7684\u731c\u6d4b\uff0c\u53ef\u80fd\u4e0e\u771f\u5b9e\u7684\u76f8\u540c\uff0c\u4e5f\u53ef\u80fd\u6bd4\u771f\u5b9e\u503c\u5927\uff0c\u4f46\u4e00\u5b9a\u4e0d\u80fd\u6bd4\u771f\u5b9e\u503c\u5c0f\uff08\u90a3\u6837\u5c31\u4e0d\u7528\u8bc1\u4e86\uff0c\u80af\u5b9a\u9519\u4e86\uff09\uff0c\u6240\u4ee5\u5bf9\u4e8e\u65e0\u6cd5\u753b\u51fa\u6811\u7684\u5168\u8c8c\u7684\u4f8b\u5b50\u4e00\u822c\u653e\u5927\u4e00\u70b9\u731c\u6d4b\u662f\u6ca1\u6709\u95ee\u9898\u7684</p> <ol> <li>Master Method</li> </ol> <p>\u5148\u7ed9\u51fa\u516c\u5f0f\uff1a</p> <p>Master Method</p> <ol> <li>If \\(f(n) = O(N^{\\log_b a - \\epsilon})\\) for some constant \\(\\epsilon &gt; 0\\), then \\(T(n) = \\Theta(N^{\\log_b a})\\)</li> <li>If \\(f(n) = \\Theta(N^{\\log_b a})\\), then \\(T(n) = \\Theta(N^{\\log_b a} \\log N)\\)</li> <li>If \\(f(n) = \\Omega(N^{\\log_b a + \\epsilon})\\) for some constant \\(\\epsilon &gt; 0\\), and if \\(af(n/b) \\leq cf(n)\\) for some constant \\(c &lt; 1\\) and all sufficiently large \\(n\\), then \\(T(n) = \\Theta(f(n))\\)</li> </ol> <p>yy\u54e5\u7684\u5f62\u8c61\u89e3\u91ca\uff0c\u6211\u89c9\u5f97\u5f88\u6709\u5e2e\u52a9\uff08\u81f3\u5c11\u5bf9\u4e8e\u8bb0\u5fc6\u6765\u8bf4\uff09\uff1a</p> <ul> <li> <p>\u5728\u5206\u6790\u7b97\u6cd5\u6027\u80fd\u65f6\u4e00\u5b9a\u8981\u627e\u5230\u5360\u4e3b\u5bfc\u7684\u90e8\u5206--\u6211\u4eec\u4ece\u6811\u7684\u89d2\u5ea6\u51fa\u53d1:</p> <ul> <li>\u5982\u679c\u6211\u4eec\u7684\u6811\u957f\u5f97\u975e\u5e38\u9738\u6c14\uff0c\u5de8\u9ad8\uff0c\u53f6\u5b50\u5de8\u591a\u65e0\u6bd4\uff0c\u8fd9\u65f6\u5019\u65f6\u95f4\u5f00\u9500\u88ab\u53f6\u5b50dominate\u4e86\uff0c\u7528Master 1\uff0c\u65f6\u95f4\u5f00\u9500\u5c31\u662f\\(\\Theta (N^{\\log_b a})\\)\u2014\u2014\u4e5f\u5c31\u662f\u53f6\u5b50\u7684\u4e2a\u6570</li> <li>\u5982\u679c\u6211\u4eec\u7684\u6811\u8eab\u6750\u975e\u5e38\u5300\u79f0\uff0c\u4e00\u7247\u6b23\u6b23\u5411\u8363\uff0c\u7528Master 2\uff0c\u65f6\u95f4\u5f00\u9500\u5c31\u662f\\(\\Theta (N^{\\log_b a} \\log N)\\)\u2014\u2014\u4e5f\u5c31\u662f\u6bcf\u4e00\u5c42\u7684\u5f00\u9500\u4e58\u4ee5\u6811\u7684\u9ad8\u5ea6</li> <li>\u5982\u679c\u6211\u4eec\u7684\u6811\u6839\u7279\u522b\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4\u5408\u5e76\u95ee\u9898\u6240\u9700\u7684\u65f6\u95f4\u975e\u5e38\u591a\uff0c\u751a\u81f3\u6bd4\u7b2c\u4e00\u5c42\u5212\u5206\u8282\u70b9\u6240\u9700\u8981\u7684\u65f6\u95f4\u8fd8\u8981\u591a\uff08\u5c31\u662f\u6b63\u5219\u5f0f\u7684\u610f\u4e49\uff09\u7528Master 3\uff0c\u65f6\u95f4\u5f00\u9500\u5c31\u662f\\(\\Theta (f(N))\\)\u2014\u2014\u4e5f\u5c31\u662f\u6811\u6839\u7684\u503c</li> </ul> </li> </ul> <p>\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u516c\u5f0f\u5e76\u6ca1\u6709cover\u5230\u6240\u6709\u60c5\u51b5\u7684\uff0c\u5c31\u6bd4\u5982Master 3\u4e2d\uff0c\u5982\u679c\u6839\u5f88\u5927\uff0c\u4f46\u662f\u5212\u5206\u95ee\u9898\u4e5f\u5f88\u6162\uff0c\u5c31\u6ca1\u529e\u6cd5\u7528\u4e3b\u65b9\u6cd5\u4e86\uff0c\u6240\u4ee5\u4e3b\u65b9\u6cd5\u9002\u7528\u7684\u60c5\u51b5\u5c31\u662f\u4e09\u4e2a\u5f88\u6781\u7aef\u7684\u60c5\u51b5</p> <p>\u52a0\u5f3a\u7248\u7684Master Method</p> <p>\u5f53\\(a \\geq 1, b &gt; 1, p \\geq 0\\)\u65f6\uff0c\u65b9\u7a0b</p> \\[ T(n) = aT(n/b) + \\Theta(N^k \\log^p N) \\] <p>\u7684\u89e3\u4e3a\uff1a</p> \\[ T(n) = \\begin{cases} \\Theta(N^{\\log_b a}) &amp; \\text{if } k &lt; \\log_b a\\\\ \\Theta(N^k \\log^{p+1} N) &amp; \\text{if } k = \\log_b a\\\\ \\Theta(N^k \\log^p N) &amp; \\text{if } k &gt; \\log_b a \\end{cases} \\]"},{"location":"notes/cs/algorithm/NP/","title":"NP Completeness","text":""},{"location":"notes/cs/algorithm/NP/#intro","title":"Intro","text":"<p>NP: Non-deterministic Polynomial-time </p> <p>P = NP: </p> <p>\u4ec0\u4e48\u662f NP\u95ee\u9898\u4e2d\u6700\u96be\u7684\u90e8\u5206-&gt;NP-complete </p> <p>\u6027\u611f\u7684\u6027\u8d28 \u53ef\u4ee5\u5c06\u5176\u4ed6\u95ee\u9898\u5f52\u7ea6\u5230 NP-complete \u95ee\u9898 </p> <p>\u53ea\u8981\u89e3\u51b3\u4efb\u610f\u4e00\u4e2a NP-complete \u95ee\u9898 \u5176\u4ed6 NP-complete \u95ee\u9898\u4e5f\u5c31\u89e3\u51b3\u4e86 </p> <p>\u96be\u6613\u548c\u5feb\u6162\uff1a</p> <p>\u6240\u6709\u4e0d\u80fd\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u51b3\u7684\u95ee\u9898\u90fd\u662f\u96be\u7684\u95ee\u9898</p> <p>\u53ea\u8981\u662f\u80fd\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u51b3\u7684\u95ee\u9898\u90fd\u662f\u5bb9\u6613\u7684\u95ee\u9898 \u4e0d\u9700\u8981\u5177\u4f53\u6bd4\u8f83\u4ed6\u4eec\u4e4b\u95f4\u7684\u5feb\u6162\u6765\u8fdb\u884c\u5b9a\u4e49</p> <p>\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u662f\u5426\u662f NP-complete \u95ee\u9898</p> <p>\u62ff\u4e00\u4e2a\u5df2\u77e5\u7684 NP-complete \u95ee\u9898\u8fdb\u884c\u5f52\u7ea6 \u5982\u679c\u80fd\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5f52\u7ea6 \u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u4e5f\u5c31\u662f NP-complete \u95ee\u9898 </p>"},{"location":"notes/cs/algorithm/backtracking/","title":"Backtracking","text":""},{"location":"notes/cs/algorithm/backtracking/#intro","title":"Intro","text":"<p>\u89e3\u51b3\u95ee\u9898\u53ef\u4ee5\u5c06\u6240\u6709\u53ef\u80fd\u89e3\u7f57\u5217\u51fa\u6765\uff0c\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u56de\u6eaf\u6cd5\u8fdb\u884c\u4f18\u5316</p> <p>\u56de\u6eaf\u6cd5\u5c31\u662f\u5728\u6240\u6709\u89e3\u7684\u7a7a\u95f4\u4e2d\u8fdb\u884c\u6b63\u786e\u89e3\u641c\u7d22\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4ed6\u901a\u8fc7\u6d88\u9664\u4e0d\u5fc5\u8981\u89e3\u7684\u641c\u7d22\u7a7a\u95f4\uff08\u526a\u679dprune\uff09\u6765\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6</p>"},{"location":"notes/cs/algorithm/backtracking/#example","title":"Example","text":""},{"location":"notes/cs/algorithm/backtracking/#8-queens","title":"8 Queens","text":"<p>8 Queens</p> <p>\u5728\u4e00\u4e2a8x8\u7684\u68cb\u76d8\u4e0a\uff0c\u653e\u7f6e8\u4e2a\u7687\u540e\uff0c\u4f7f\u5f97\u4ed6\u4eec\u4e92\u76f8\u4e4b\u95f4\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb</p> <p>\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u6570\u5b66\u5316\u63cf\u8ff0\uff1a</p> <ul> <li>\u4ee4\\(Q_i\\)\u8868\u793a\u7b2c\\(i\\)\u884c\u7684\u7687\u540e\uff0c\\(x_i\\)\u8868\u793a\\(Q_i\\)\u7684\u5217\u5750\u6807\uff0c\\(S_i\\)\u8868\u793a\\(x_i\\)\u53ef\u53d6\u503c\u7684\u96c6\u5408</li> <li>\u9650\u5236\u6761\u4ef6\uff1a<ul> <li>\\(S_i = \\{1, 2, 3, 4, 5, 6, 7, 8\\}\\), \u8868\u660e\u53ef\u80fd\u7684\u53d6\u503c\u7a7a\u95f4\u5927\u5c0f\u662f\\(8^8\\)</li> <li>\u4efb\u610f\u4e24\u4e2a\u7687\u540e\\(Q_i\\)\u548c\\(Q_j\\)\u4e0d\u80fd\u5728\u540c\u4e00\u5217\uff0c\u5373\\(x_i \\neq x_j\\)</li> <li>\u4efb\u610f\u4e24\u4e2a\u7687\u540e\\(Q_i\\)\u548c\\(Q_j\\)\u4e0d\u80fd\u5728\u540c\u4e00\u5bf9\u89d2\u7ebf\uff0c\u5373\\(|x_i - x_j| \\neq |i - j|\\)</li> </ul> </li> </ul> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> <p>\u6784\u5efagame tree\uff0c\u4ee5\u56db\u7687\u540e\u4e3a\u4f8b\uff1a</p> <p></p> <p>\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u540e\u5e8f\u904d\u5386 \u4e5f\u5c31\u662f\u5de6\u4e2d\u53f3\uff09\uff0c\u5728\u8fdb\u884c\u904d\u5386\u7684\u65f6\u5019\u4e3b\u8981\u8fdb\u884c\u7684\u662f\u5bf9\u89d2\u7ebf\u7684\u68c0\u67e5\uff08\u56e0\u4e3a\u672c\u8eab\u5217\u7684\u68c0\u67e5\u5728\u6811\u7684\u7ed3\u6784\u4e0a\u5df2\u7ecf\u9690\u542b\u4e86\uff09</p> <ul> <li>\u526a\u679d\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u6211\u9047\u5230\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u5224\u65ad\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u5c06\u8fd9\u4e2a\u8282\u70b9\u4ee5\u53ca\u4ed6\u7684\u6240\u6709\u5b50\u8282\u70b9\u90fd\u526a\u6389\uff08\u4e0d\u8fdb\u884c\u904d\u5386\uff09\u7136\u540e\u5bf9\u8fd9\u4e2a\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u8fdb\u884c\u5c1d\u8bd5\uff0c\u5982\u679c\u6240\u6709\u5144\u5f1f\u8282\u70b9\u90fd\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8bf4\u660e\u7236\u4eb2\u8282\u70b9\u4e5f\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ee7\u7eed\u5f80\u4e0a\u8fd4\u56de\u76f4\u5230\u627e\u5230\u4e00\u7ec4\u5b8c\u6574\u89e3</li> </ul> <p>Note</p> <p>\u5b9e\u9645\u4e0a\u6811\u7684\u6784\u5efa\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u5b9e\u9645\u4e0a\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u6784\u5efa\u6811\uff0c\u6784\u5efa\u6811\u7684\u8fc7\u7a0b\u8ba9\u6211\u4eec\u5bf9\u201c\u526a\u679d\u201d\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e86\u66f4\u76f4\u89c2\u7684\u7406\u89e3\uff0c\u5c31\u662f\u5728\u7ea6\u675f\u6761\u4ef6\u4e0b\u63d0\u524d\u6392\u9664\u4e0d\u53ef\u80fd\u7684\u89e3\uff0c\u4ece\u800c\u51cf\u5c11\u641c\u7d22\u7a7a\u95f4</p> Hunting On Mars <p>\u8fd9\u91cc\u8865\u5145\u4e00\u4e2a\u4f8b\u9898\u52a0\u6df1\u5bf9\u6811\u7684\u6784\u5efa\u7684\u7406\u89e3</p> <p>\u95ee\u9898\u662f\uff1a\u5728\u706b\u661f\u4e0a\u6709\u4e00\u4e2a\u56fe\uff0c\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6709\u53ef\u80fd\u6709\u5154\u5b50(1)\u4e5f\u6709\u53ef\u80fd\u6ca1\u6709\u5154\u5b50(0)\uff0c\u4f46\u662f\u730e\u4eba\u51fa\u53d1\u65f6\u6240\u80cc\u7684\u6c27\u6c14\u53ea\u80fd\u652f\u6491\u4ed6\u8d70\\(k\\)\u6b65\u5e76\u4e14\u9700\u8981\u8fd4\u56de\u51fa\u53d1\u70b9\uff0c\u5e76\u4e14\u730e\u4eba\u81f3\u5c11\u9700\u8981\u6293\u5230\\(m\\)\u53ea\u5154\u5b50\uff0c\u627e\u5230\u8fd9\u6837\u7684\u8def\u5f84</p> <p>\u5728\u8fd9\u91cc\u6709\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6\uff1a</p> <ul> <li>\u730e\u4eba\u53ea\u80fd\u8d70\\(k\\)\u6b65\u5e76\u4e14\u9700\u8981\u8fd4\u56de\u51fa\u53d1\u70b9</li> <li>\u730e\u4eba\u9700\u8981\u6293\u5230\\(m\\)\u53ea\u5154\u5b50</li> </ul> <p>\u8fd9\u91cc\u6211\u4eec\u6784\u5efa\u6811\u7684\u601d\u8def\u662f\u4ee5\u8def\u8fc7\u7684\u8282\u70b9\u6570\u4f5c\u4e3a\u6811\u7684\u8282\u70b9\uff0c\u4ee5\u730e\u4eba\u8d70\u8fc7\u7684\u8def\u5f84\u4f5c\u4e3a\u6811\u7684\u8fb9\uff0c\u540c\u65f6\u8ba1\u7b97\u730e\u4eba\u8d70\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u5154\u5b50\u6570\u91cf</p> <p>\u526a\u679d\u7684\u6761\u4ef6\u662f\uff1a</p> <ul> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u8d70\u5b8c\u5269\u4e0b\u7684\u6b65\u6570\u5c0f\u4e8e\u6240\u9700\u7684\u5154\u5b50\u6570\u91cf\uff0c\u90a3\u4e48\u5c31\u526a\u679d</li> <li>\u5f53\u524d\u8282\u70b9\u8ddd\u79bb\u51fa\u53d1\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u5927\u4e8e\u5269\u4f59\u7684\u6b65\u6570\uff0c\u90a3\u4e48\u5c31\u526a\u679d</li> </ul> <p>\u4f46\u662f\u8fd9\u91cc\u6bd4\u8f83tricky\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u5982\u4f55\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u91c7\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u90a3\u4e48\u6211\u4eec\u5927\u6982\u7387\u4f1a\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u975e\u5e38\u9ad8\uff0c\u56e0\u6b64\u6211\u4eec\u91c7\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8fd9\u6837\u5728\u6c42\u5230\u4e00\u7ec4\u89e3\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u8fd4\u56de\uff0c\u4ece\u800c\u8282\u7701\u4e86\u65f6\u95f4</p> <p>Key of pruning</p> <ul> <li>\u7531\u8fd9\u4e2a\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u8fdb\u884c\u526a\u679d\u6761\u4ef6\u7684\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u653e\u5f03\u4e00\u4e2a\u6761\u4ef6\u800c\u4e25\u683c\u9075\u5faa\u53e6\u4e00\u4e2a\u6761\u4ef6</li> <li>\u9ad8\u6548\u7684\u526a\u679d\u5f80\u5f80\u4e0d\u662f\u4f9d\u636e\u5f53\u524d\u6240\u5904\u8282\u70b9\u7684\uff0c\u800c\u662f\u5177\u6709\u9884\u89c1\u6027\u7684\u526a\u679d</li> </ul>"},{"location":"notes/cs/algorithm/backtracking/#the-turnpike-problem","title":"The Turnpike Problem","text":"<p>The Turnpike Problem</p> <p>\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u6709\u591a\u4e2a\u70b9\uff0c\u8fd9\u4e9b\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\\(d_1, d_2, \\cdots, d_{n}\\)\uff0c\u5171\\(\\frac{n(n-1)}{2}\\)\u4e2a\u8ddd\u79bb\uff0c\u73b0\u5728\u8981\u627e\u5230\u8fd9\u4e9b\u70b9\u5728\u76f4\u7ebf\u4e0a\u7684\u4f4d\u7f6e\uff0c\u5df2\u77e5\u6700\u5de6\u8fb9\u7684\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\u5728\\(0\\)</p> <ul> <li> <p>\u5206\u6790</p> <p>\u6700\u5927\u7684\u8ddd\u79bb\u4e00\u5b9a\u662f\u6700\u5de6\u8fb9\u7684\u70b9\\(0\\)\u548c\u6700\u53f3\u8fb9\u7684\u70b9\\(d_n\\)\uff0c\u63a5\u7740\u5904\u7406\u7b2c\u4e8c\u5927\u7684\u8ddd\u79bb\uff0c\u4f46\u8fd9\u65f6\u6700\u5de6\u8fb9\u7684\u70b9\u53ef\u4ee5\u548c\u53f3\u8fb9\u7684\u7b2c\u4e8c\u4e2a\u70b9\u6784\u6210\u8fd9\u4e2a\u8ddd\u79bb\uff0c\u6700\u53f3\u8fb9\u7684\u70b9\u4e5f\u53ef\u4ee5\u548c\u5de6\u8fb9\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u70b9\u6784\u6210\u8fd9\u4e2a\u8ddd\u79bb\uff0c\u6240\u4ee5\u8fd9\u5c31\u5f15\u5165\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684game tree</p> <p>\u5c31\u662f\u9009\u53d6\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\uff0c\u7136\u540e\u901a\u8fc7\u68c0\u67e5\u8fd9\u4e2a\u65b0\u52a0\u5165\u7684\u8282\u70b9\u4e0e\u5176\u4ed6\u5df2\u5b58\u5728\u8282\u70b9\u6784\u6210\u7684\u8ddd\u79bb\u662f\u5426\u5728\u539f\u8ddd\u79bb\u96c6\u5408\u4e2d\uff0c\u5728\u5c31\u5220\u6389\uff0c\u4e0d\u5728\u5c31\u526a\u679d\uff0c\u526a\u679d\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u9700\u8981\u628a\u52a0\u5165\u975e\u6cd5\u8282\u70b9\u6240\u5220\u6389\u7684\u8ddd\u79bb\u52a0\u56de\u6765</p> </li> <li> <p>\u8fc7\u7a0b</p> </li> </ul> <p></p>"},{"location":"notes/cs/algorithm/backtracking/#stick-problem","title":"Stick Problem","text":"<p>Idea:</p>"},{"location":"notes/cs/algorithm/backtracking/#coding","title":"Coding","text":"<pre><code>    bool Backtracking (int i) { // i \u4e00\u822c\u662f\u8868\u793a\u5f53\u524d\u7684\u7b54\u6848\u96c6\u5408\u4e2d\u5df2\u7ecf\u5305\u542bi\u4e2a\u5143\u7d20\u4e86\n        Found = false;\n        if (i &gt; N)\n            return true;  // solved with (x1, ..., xN)\n        for (each xi in Si) {\n            // check if satisfies the restriction R\n            OK = Check((x1, ..., xi), R);  // pruning \u5047\u8bbe\u6211\u52a0\u5165xi\u540e\u67e5\u770b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n            if (OK) {\n                Count xi in; // \u5c06xi\u52a0\u5165\u7b54\u6848\u96c6\u5408\n                Found = Backtracking(i + 1);\n                if (!Found)\n                    Undo(i);  // recover to (x1, ..., x{i-1}) // \u5982\u679c\u6211\u52a0\u5165xi\u540e\u6ca1\u6709\u627e\u5230\u89e3\uff0c\u90a3\u4e48\u5c31\u6062\u590d\u5230\u52a0\u5165xi\u524d\u7684\u72b6\u6001\n            }\n            if (Found) break; \n        }\n        return Found;\n    }\n</code></pre>"},{"location":"notes/cs/algorithm/backtracking/#minimax-strategy","title":"Minimax Strategy","text":"<p>Question</p> <p>\u4ee5\u4e95\u5b57\u68cb\u4e3a\u4f8b</p> <p>Minimax Strategy \u4e2d\u5f88\u91cd\u8981\u7684\u4e00\u4e2a\u601d\u60f3\u5728\u4e8e\u535a\u5f08\uff0c\u5373\u5728\u5f53\u524d\u72b6\u6001\u4e0b\uff0c\u6211\u4f5c\u4e3a\u5f53\u524d\u73a9\u5bb6\uff0c\u6211\u5e94\u8be5\u600e\u4e48\u8d70\uff0c\u624d\u80fd\u4f7f\u5f97\u6211\u8d62\uff0c\u800c\u8fdb\u884c\u64cd\u4f5c\u7684\u5224\u65ad\u6761\u4ef6\u4e4b\u4e00\u5c31\u662f\u5bf9\u5f53\u524d\u72b6\u6001\u7684\u8bc4\u4f30\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bc4\u4f30\u51fd\u6570\u4e3aevaluation function</p> <p>\u6bd4\u5982\u8fd9\u6837\u4e00\u79cd\u8bc4\u4f30\u51fd\u6570\uff1a</p> \\[ f(P) = W_{computer} - W_{human}  \\] \\[ \\text{where } W \\text{ is the number of potential wins at position } P \\] <p>\u5728\u4e95\u5b57\u68cb\u6e38\u620f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b9e\u4f8b\u5316\uff1a</p> <ul> <li>\u5c06\\(W_{computer}\\)\u5b9a\u4e49\u4e3a\u5047\u5982\u73b0\u5728\u4eba\u7c7b\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u8ba1\u7b97\u673a\u53ef\u80fd\u7684\u83b7\u80dc\u65b9\u5f0f</li> </ul> <p>\u8fd9\u6837\u6211\u4eec\u5728\u6bcf\u4e00\u6b65\u64cd\u4f5c\u4e4b\u540e\uff0c\u90fd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f53\u524d\u72b6\u6001\u7684\u8bc4\u4f30\u503c\uff0c\u8fd9\u4e2a\u8bc4\u4f30\u503c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u6211\u4eec\u535a\u5f08\u6811\u7684\u8282\u70b9</p> <p>Key of Minimax Strategy</p> <ul> <li>\u5728\u535a\u5f08\u6811\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u5047\u8bbe\u5bf9\u65b9\u662f\u7406\u6027\u7684\uff0c\u5373\u5bf9\u65b9\u603b\u662f\u4f1a\u505a\u51fa\u6700\u4f18\u7684\u9009\u62e9</li> </ul> <p>\u8fd9\u5c31\u662f Minimax \u7684\u6765\u6e90\uff1a</p> <p>\u5728\u81ea\u5df1\u9009\u62e9\u7684\u65f6\u5019\u6211\u4eec\u505a\\(f(P)\\)\u7684\u6700\u5927\u5316\uff0c\u5728\u5bf9\u65b9\u9009\u62e9\u7684\u65f6\u5019\u6211\u4eec\u505a\\(f(P)\\)\u7684\u6700\u5c0f\u5316</p> Example <p></p>"},{"location":"notes/cs/algorithm/backtracking/#alpha-beta-pruning","title":"Alpha-Beta Pruning","text":"<p>\\(\\alpha - \\beta\\) Pruning \u662f Minimax \u7684\u4f18\u5316\u7248\u672c\uff0c\u4ed6\u901a\u8fc7\u526a\u679d\u7684\u65b9\u5f0f\u5c06\u535a\u5f08\u6811\u7684\u641c\u7d22\u89c4\u6a21\u9650\u5236\u5728\\(O(\\sqrt{N})\\)\u4e2a\u8282\u70b9</p> <ul> <li>\\(\\alpha\\)\u526a\u679d\uff1a\u5728\u5982\u4e0b\u7684\u72b6\u6001\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u5728\u8fdb\u884c<code>?</code>\u6811\u7684\u6c42\u7b97\u4e86</li> </ul> <ul> <li>\u5728<code>? &gt;= 40(sibling)</code>\u65f6\uff0c<code>min</code>\u8282\u70b9\u4e0d\u4f1a\u91c7\u7528\u8fd9\u4e2a\u5927\u4e8e\u56db\u5341\u7684\u503c</li> <li>\u5728<code>? &lt; 40(sibling)</code>\u65f6\uff0c<code>min</code>\u8282\u70b9\u867d\u7136\u4f1a\u66f4\u65b0\uff0c\u4f46\u662f<code>max</code>\u8282\u70b9\u4e0d\u4f1a\u91c7\u7528</li> </ul> <ul> <li>\\(\\beta\\)\u526a\u679d\uff1a\u5728\u5982\u4e0b\u7684\u72b6\u6001\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u5728\u8fdb\u884c<code>?</code>\u6811\u7684\u6c42\u7b97\u4e86</li> </ul> <ul> <li>\u5728<code>? &lt;= 68(sibling)</code>\u65f6\uff0c<code>max</code>\u8282\u70b9\u4e0d\u4f1a\u91c7\u7528\u8fd9\u4e2a\u5c0f\u4e8e\u7b49\u4e8e68\u7684\u503c</li> <li>\u5728<code>? &gt; 68(sibling)</code>\u65f6\uff0c<code>max</code>\u8282\u70b9\u867d\u7136\u4f1a\u66f4\u65b0\uff0c\u4f46\u662f<code>min</code>\u8282\u70b9\u4e0d\u4f1a\u91c7\u7528</li> </ul>"},{"location":"notes/cs/algorithm/dp/","title":"Dynamic Programming","text":""},{"location":"notes/cs/algorithm/dp/#intro","title":"Intro","text":"<p>\u6838\u5fc3\u601d\u60f3\u662f\u907f\u514d\u91cd\u590d\u8ba1\u7b97\uff0c\u901a\u8fc7\u5c06\u8ba1\u7b97\u7ed3\u679c\u5b58\u50a8\u5728\u8868\u683c\u4e2d\uff0c\u4ece\u800c\u5728\u9700\u8981\u65f6\u5feb\u901f\u68c0\u7d22\u3002</p> Fibonacci <p>\u8ba1\u7b97Fibonacci\u6570\u5217\uff1a\u6211\u4eec\u5728\u9012\u5f52\u65f6\u4f1a\u5bf9\u76f8\u540c\u7684\u6570\u503c\u8fdb\u884c\u91cd\u590d\u8ba1\u7b97\uff0c\u6240\u4ee5\u5c06\u6bcf\u4e2an\u7684Fibonacci\u6570\u5217\u7684\u503c\u5b58\u50a8\u5728\u8868\u683c\u4e2d</p> <p>\u4f46\u662f\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u5b58\u4e0b\u6700\u8fd1\u4e24\u6b21\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u8fd9\u6837\u53ea\u9700\u8981\\(O(n)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6</p> Fibonacci <pre><code>int fibonacci(int n) {\n    int i, Last, NextToLast, Answer;\n    if(n == 0) return 1;\n    Last = NextToLast = 1;\n    for(i = 2; i &lt;= n; i++) {\n        Answer = Last + NextToLast;\n        NextToLast = Last; Last = Answer;//\u66f4\u65b0\u6700\u8fd1\u7684\u4e24\u6b21\u8ba1\u7b97\u7ed3\u679c\n    }\n    return Answer;\n}\n</code></pre>"},{"location":"notes/cs/algorithm/dp/#design","title":"Design","text":"<ul> <li> <p>\u7528\u72b6\u6001\u51fd\u6570\u8868\u793a\u4e00\u4e2a\u5b50\u95ee\u9898</p> </li> <li> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u8868\u793a\u5b50\u95ee\u9898\u4e4b\u95f4\u7684\u9012\u63a8\u5173\u7cfb</p> </li> </ul> <p>\u6761\u4ef6\uff1a</p> <ul> <li>\u95ee\u9898\u53ef\u4ee5\u88ab\u5206\u89e3\u4e3a\u82e5\u5e72\u5b50\u95ee\u9898</li> <li>\u5b50\u95ee\u9898\u6709\u91cd\u53e0</li> <li>\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5f53\u524d\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ea\u4f9d\u8d56\u4e8e\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3</li> </ul>"},{"location":"notes/cs/algorithm/dp/#examples","title":"Examples","text":""},{"location":"notes/cs/algorithm/dp/#ordering-matrix-chain-multiplication","title":"Ordering Matrix Chain Multiplication","text":"<p>\u4e24\u4e2a\u77e9\u9635\u7684\u4e58\u6cd5\u7684\u57fa\u672c\u590d\u6742\u5ea6\u662f\\(O(n^3)\\)</p> <p>\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e32\u8fde\u7eed\u7684\u77e9\u9635\u94fe\u4e58\u6cd5\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u77e9\u9635\u94fe\u987a\u5e8f\uff0c\u5176\u8ba1\u7b97\u590d\u6742\u5ea6\u53ef\u4ee5\u76f8\u5dee\u5f88\u5927</p> <p>Different Order</p> <p> </p> <p>      \u6211\u4eec\u9700\u8981\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6765\u627e\u51fa\u6700\u4f18\u7684\u77e9\u9635\u4e58\u6cd5\u987a\u5e8f\uff0c\u4f7f\u5f97\u603b\u7684\u8ba1\u7b97\u91cf\u6700\u5c0f\u3002 <p>\u7b56\u7565\u662f\u4f18\u5148\u8ba1\u7b97\u89c4\u6a21\u8f83\u5c0f\u7684\u77e9\u9635\u4e58\u6cd5\u3002 </p> <p>Solution</p> <p> \u7528\u6253\u62ec\u53f7\u7684\u65b9\u5f0f\u8868\u793a\u77e9\u9635\u94fe\u7684\u5212\u5206\uff0c\u5982\u679c\u62ec\u53f7\u662f\u5728\u7b2c\\(i\\)\u4e2a\u77e9\u9635\u7684\u53f3\u4fa7\uff0c\u6211\u4eec\u5c31\u8fd9\u6837\u8868\u793a\uff1a </p> \\[ M_{1,N} = M_1 \\text{...} M_N = M_{1,i} \\times M_{i+1,N} \\] <p> \u8fd9\u4e5f\u662f\u52a8\u6001\u89c4\u5212\u548c\u5206\u6cbb\u6cd5\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5c31\u662f\u76f4\u63a5\u60f3\u4e00\u4e0b\u6700\u540e\u4e00\u6b65\u7684\u8ba1\u7b97\uff0c\u8fd9\u91cc\u7531\\(M_{1,i}\\)\u548c\\(M_{i+1,N}\\)\u7684\u8ba1\u7b97\u7ed3\u679c\u76f8\u4e58\u5f97\u5230\\(M_{1,N}\\)\u5c31\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u540e\u4e00\u6b65\uff0c\u6211\u4eec\u5c31\u662f\u53bb\u627e\u6700\u597d\u7684\\(i\\) </p> <p> \u5728\u8fd9\u91cc\u6211\u4eec\u89c4\u5b9a\u72b6\u6001\u65b9\u7a0b\u4e3a\\(F[k][i]\\)\uff0c\u8868\u793a\u7531\u7b2c\\(i\\)\u4e2a\u77e9\u9635\u5230\u7b2c\\(i+k\\)\u4e2a\u77e9\u9635\u76f8\u4e58\u7684\u8ba1\u7b97\u65f6\u95f4\u5f00\u9500\uff0ck\u8868\u793a\u7684\u662f\u77e9\u9635\u94fe\u7684\u957f\u5ea6\uff0c\u8fd9\u6837\u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u5148\u5bf9k\u8fdb\u884c\u904d\u5386\uff08\u5982\u679c\u5148\u5bf9i\uff0cj\u904d\u5386\uff0c\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u524d\u534a\u90e8\u5206\u65f6\uff0c\u540e\u534a\u90e8\u5206\u6839\u672c\u8fd8\u6ca1\u6709\u8ba1\u7b97\uff09\u8fd9\u4e2a\u904d\u5386\u662f\u4e25\u683c\u6309\u7167\u5b50\u95ee\u9898\u89c4\u6a21\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8fdb\u884c\u7684 </p> <p>\u5c0f\u6280\u5de7</p> <p> \u6211\u4eec\u5728\u8bbe\u8ba1\u72b6\u6001\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u6309\u7167ppt\u4e2d\u7684i\u5230j\u7684\u601d\u8def\uff0c\u4f46\u662f\u8fd9\u6837\u5bf9\u4ee3\u7801\u8bbe\u8ba1\u6765\u8bf4\u4e0d\u662f\u5f88\u53cb\u597d\uff0cyy\u54e5\u5efa\u8bae\u6211\u4eec\u5728\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570k\u8868\u793a\u95ee\u9898\u7684\u89c4\u6a21\uff0c\u8fd9\u6837\u5728\u4ee3\u7801\u4e2d\u6700\u5916\u5c42\u7684\u904d\u5386\u5c31\u662f\u5bf9\u95ee\u9898\u7684\u89c4\u6a21\u8fdb\u884c\u653e\u5927\u7684\u8fc7\u7a0b\u4e86 Brute Force <p>\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u66b4\u529b\u65b9\u6cd5\uff0c\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u77e9\u9635\u94fe\u5212\u5206\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u79cd\u5212\u5206\u65b9\u5f0f\u7684\u8ba1\u7b97\u65f6\u95f4\u5f00\u9500\uff0c\u7136\u540e\u627e\u51fa\u6700\u5c0f\u503c\uff0c\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u6700\u540e\u5f97\u5230\u7684\u603b\u7684\u8ba1\u7b97\u6b21\u6570\u662f\uff1a</p> \\[ b_n = \\sum_{k=1}^{n-1} b_k b_{n-k} \\] <p>\u8fd9\u4e5f\u662f\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u4ed6\u8868\u793a\u7684\u662f\u8ba1\u7b97n\u4e2a\u77e9\u9635\u6240\u9700\u6b21\u6570\uff0c\u8fd9\u4e2a\u8ba1\u7b97\u590d\u6742\u5ea6\u662f\\(O(\\frac{4^n}{n^{3/2}})\\)(Catalan Number)\uff0c\u663e\u7136\u662f\u4e0d\u53ef\u63a5\u53d7\u7684</p> <p> \u6211\u4eec\u5728\u4e4b\u524d\u7684\u601d\u8def\u4e2d\u63d0\u5230\u4e86\uff0c\u95ee\u9898\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u5408\u5e76\u4e24\u4e2a\u77e9\u9635\u94fe\uff0c\u5728\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u6700\u540e\u4e00\u4e2a\u62ec\u53f7\u7684\u4f4d\u7f6e\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u8fdb\u884c\u904d\u5386\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u65b9\u7a0b\uff1a </p> <p> \\[ F[k][i] =\\begin{cases} 0 &amp; \\text{if } k = i\\\\ \\min_{i \\leq k &lt; j} \\{ F[i][k] + F[k+1][j] + r_{i-1} r_k r_j \\} &amp; \\text{if } i &lt; j \\end{cases} \\] <p></p> <p> \u5176\u4e2d\\(r_i\\)\u8868\u793a\u7684\u662f\u7b2c\\(i\\)\u4e2a\u77e9\u9635\u7684\u884c\u6570\u6216\u5217\u6570 \u8fd9\u4e2a\u65b9\u7a0b\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u4eec\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u62ec\u53f7\u4f4d\u7f6e\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u79cd\u5212\u5206\u65b9\u5f0f\u7684\u8ba1\u7b97\u65f6\u95f4\u5f00\u9500\uff1a\u62ec\u53f7\u5de6\u8fb9\u77e9\u9635\u94fe\u5f00\u9500 + \u62ec\u53f7\u53f3\u8fb9\u77e9\u9635\u94fe\u5f00\u9500 + \u5408\u5e76\u4e24\u4e2a\u77e9\u9635\u94fe\u7684\u5f00\u9500 </p> \u987a\u5e8f\u5b9e\u73b0code <pre><code>int MatrixChainOrder(int p[], int n) {\n// p[]\u5b58\u50a8\u77e9\u9635\u7ef4\u5ea6\uff0cp[i-1]\u548cp[i]\u8868\u793a\u7b2ci\u4e2a\u77e9\u9635\u7684\u7ef4\u5ea6\n// n\u662f\u77e9\u9635\u7684\u4e2a\u6570\nint F[n][n];  // F[k][i]\u8868\u793a\u4ece\u7b2ci\u4e2a\u77e9\u9635\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3ak\u7684\u5b50\u94fe\u7684\u6700\u5c0f\u8ba1\u7b97\u4ee3\u4ef7\n\n// \u521d\u59cb\u5316\uff1a\u5355\u4e2a\u77e9\u9635\u7684\u8ba1\u7b97\u4ee3\u4ef7\u4e3a0\nfor(int i = 0; i &lt; n; i++) {\n    F[0][i] = 0;\n}\n\n// \u6309\u7167\u5b50\u95ee\u9898\u89c4\u6a21k\u4ece\u5c0f\u5230\u5927\u8ba1\u7b97\nfor(int k = 1; k &lt; n; k++) {           // k\u8868\u793a\u5b50\u94fe\u957f\u5ea6\n    for(int i = 0; i &lt; n-k; i++) {     // i\u8868\u793a\u5b50\u94fe\u8d77\u59cb\u4f4d\u7f6e\n        F[k][i] = INT_MAX;\n        // \u5c1d\u8bd5\u5728\u4e0d\u540c\u4f4d\u7f6e\u5207\u5206\n        for(int j = i; j &lt; i+k; j++) {\n            // \u8ba1\u7b97\u5728\u4f4d\u7f6ej\u5207\u5206\u7684\u4ee3\u4ef7\n            int cost = F[j-i][i] +              // \u5de6\u534a\u90e8\u5206\u4ee3\u4ef7\n                     F[k-(j-i+1)][j+1] +       // \u53f3\u534a\u90e8\u5206\u4ee3\u4ef7\n                     p[i]*p[j+1]*p[i+k+1];     // \u5408\u5e76\u4e24\u90e8\u5206\u7684\u4ee3\u4ef7\n\n            if(cost &lt; F[k][i]) {\n                F[k][i] = cost;\n            }\n        }\n    }\n}\n\nreturn F[n-1][0];  // \u8fd4\u56de\u6574\u4e2a\u77e9\u9635\u94fe\u7684\u6700\u5c0f\u8ba1\u7b97\u4ee3\u4ef7\n}\n</code></pre> \u8bb0\u5fc6\u5316\u641c\u7d22code <pre><code>#define MAX_N 100\n#define INF 0x3f3f3f3f\n\nint memo[MAX_N][MAX_N];  // \u8bb0\u5fc6\u5316\u6570\u7ec4\nint p[MAX_N];            // \u5b58\u50a8\u77e9\u9635\u7ef4\u5ea6\n\n// \u8ba1\u7b97\u4ece\u7b2ci\u4e2a\u77e9\u9635\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3ak\u7684\u5b50\u94fe\u7684\u6700\u5c0f\u8ba1\u7b97\u4ee3\u4ef7\nint dp(int k, int i) {\n    // \u57fa\u7840\u60c5\u51b5\uff1a\u957f\u5ea6\u4e3a0\uff08\u5355\u4e2a\u77e9\u9635\uff09\n    if(k == 0) return 0;\n\n    // \u5982\u679c\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de\u8bb0\u5fc6\u5316\u7684\u7ed3\u679c\n    if(memo[k][i] != -1) return memo[k][i];\n\n    // \u521d\u59cb\u5316\u4e3a\u6700\u5927\u503c\n    int min_cost = INF;\n\n    // \u5c1d\u8bd5\u6240\u6709\u53ef\u80fd\u7684\u5207\u5206\u70b9\n    for(int j = i; j &lt; i+k; j++) {\n        int cost = dp(j-i, i) +                // \u5de6\u534a\u90e8\u5206\n                dp(k-(j-i+1), j+1) +         // \u53f3\u534a\u90e8\u5206\n                p[i] * p[j+1] * p[i+k+1];    // \u5408\u5e76\u4ee3\u4ef7\n\n        if(cost &lt; min_cost) {\n            min_cost = cost;\n        }\n    }\n\n    // \u5b58\u50a8\u5e76\u8fd4\u56de\u7ed3\u679c\n    return memo[k][i] = min_cost;\n}\n\nint MatrixChainOrder(int dimensions[], int n) {\n    // \u590d\u5236\u7ef4\u5ea6\u6570\u7ec4\n    for(int i = 0; i &lt; n; i++) {\n        p[i] = dimensions[i];\n    }\n\n    // \u521d\u59cb\u5316\u8bb0\u5fc6\u5316\u6570\u7ec4\u4e3a-1\n    for(int i = 0; i &lt; n; i++) {\n        for(int j = 0; j &lt; n; j++) {\n            memo[i][j] = -1;\n        }\n    }\n\n    // \u8ba1\u7b97\u6574\u4e2a\u77e9\u9635\u94fe\u7684\u6700\u5c0f\u4ee3\u4ef7\n    return dp(n-1, 0);\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n^3)=\u72b6\u6001\u6570 O(n^2) \\times \u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u95f4\u5f00\u9500 O(n)\\)</p>"},{"location":"notes/cs/algorithm/dp/#optimal-binary-search-tree","title":"Optimal Binary Search Tree","text":"<p>\u6700\u4f73\u9759\u6001\u67e5\u627e\u6811</p> <p> \u7ed9\u51faN\u4e2a\u5173\u952e\u5b57\\(w_1, w_2, ..., w_n\\)\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5173\u952e\u5b57\u7684\u67e5\u627e\u6982\u7387\\(p_1, p_2, ..., p_n\\)\uff0c\u8981\u6c42\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4f7f\u5f97\u6240\u6709\u5173\u952e\u5b57\u7684\u603b\u67e5\u627e\u6b21\u6570\u6700\u5c0f </p> <p> \u67e5\u627e\u6b21\u6570\u516c\u5f0f\uff1a </p> \\[ T(N) = \\sum_{i=1}^{N} p_i \\times (depth_i + 1) \\] <p>Solution</p> <p> \u8fd8\u662f\u6309\u7167\u4e4b\u524d\u7684\u601d\u8def\uff0c\u5728\u8003\u8651\u6700\u540e\u4e00\u6b65\u65f6\uff0c\u6211\u4eec\u8003\u8651\u6700\u540e\u4e00\u6b65\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u8ba1\u7b97\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u67e5\u627e\u6b21\u6570\uff0c\u7136\u540e\u5408\u5e76\uff0c\u5e76\u4e14\u7531\u4e8e\u5408\u5e76\u65f6\u65b0\u589e\u4e86\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6574\u4e2a\u6811\u7684\u6df1\u5ea6\u90fd\u589e\u52a0\u4e861\uff0c\u56e0\u6b64\u8981\u518d\u52a0\u4e0a\\(p_{\\text{all in this step}}\\)\uff0c\u5e76\u4e14\u8fd9\u4e00\u6b65\u4e5f\u662f\u9700\u8981\u8fdb\u884c\u904d\u5386\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u72b6\u6001\u65b9\u7a0b\uff1a </p> \\[ F[N][i] = \\min_{i \\leq k &lt; j} \\{ F[k-i][i] + F[N-k+i-1][k+1] + \\sum_{j=i}^{k} p_j \\} \\] <p> </p>"},{"location":"notes/cs/algorithm/dp/#floyd-algorithm","title":"Floyd Algorithm","text":"<p>Floyd</p> <p>\u5728\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\uff0c\u627e\u5230\u6240\u6709\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84</p> <p>Solution</p> <p>  \u8fd9\u4e2a\u95ee\u9898\u672c\u8d28\u4e0a\u662f\u5728\u89e3\u51b3\u5bf9\u4e8e\u6709\u5411\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\uff0c\u7ecf\u8fc7\u600e\u6837\u7684\u8def\u5f84\uff08\u7ecf\u8fc7\u51e0\u4e2a\u4e2d\u8f6c\u70b9\uff09\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6743\u91cd\u548c\u6700\u5c0f </p> <p> \u6211\u4eec\u4ece\u6b63\u5e38\u7684\u601d\u8def\u5148\u8fdb\u884c\u8bd5\u63a2\u6027\u7684\u5206\u6790,\u5148\u8003\u8651\u6784\u5efa\u4e00\u4e2a\u666e\u9002\u6027\u7684\u72b6\u6001\u65b9\u7a0b\uff1a\\(F[N][i]\\)\u53d1\u73b0\u5b8c\u5168\u4e0d\u9002\u7528\uff0c\u56e0\u4e3a\u7b54\u6848\u80af\u5b9a\u662f\u7531i\u5230j\u7684\uff0c\u800c\u4e0e\u95ee\u9898\u89c4\u6a21\uff08\u56fe\u7684\u5927\u5c0f\uff09\u65e0\u5173\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u72b6\u6001\u65b9\u7a0b\u4e3a\\(F[i][j]\\)\uff0c\u8868\u793a\u4ecei\u5230j\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6839\u636e\u4e4b\u524d\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u6700\u540e\u7684\u4e2d\u8f6c\u70b9K\uff0c\u5199\u6210\\(F[i][j] = \\min \\{ F[i][k] + F[k][j] \\}\\)\u8fd9\u6837\u7684\u65b9\u7a0b </p> <p>\u4f46\u662f\u9519\u8bef</p> <p>\u56e0\u4e3a\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u6240\u6c42\u89e3\u7684\u4e0d\u518d\u662f\u50cf\u4e4b\u524d\u7684\u77e9\u9635\u94fe\u4e58\u6cd5\u90a3\u6837\u7684\u5e26\u6709\u5e8f\u5217\u6027\u8d28\u7684\u95ee\u9898\uff0c\u800c\u662f\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u5f88\u591a\u8282\u70b9\uff08\u95ee\u9898\u89c4\u6a21\u672a\u88ab\u5b9a\u4e49\uff09\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65b9\u7a0b\u65e0\u6cd5\u4fdd\u8bc1\u5b50\u95ee\u9898\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8fdb\u884c\u6c42\u89e3</p> <p> \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u51fd\u6570\u8fdb\u884c\u9650\u5236\uff0c\u9650\u5236\u53c2\u6570\u5c31\u662f\u7ecf\u8fc7\u7684\u4e2d\u8f6c\u70b9\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6309\u7167\u4e2d\u8f6c\u70b9\u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6c42\u89e3\uff0c\u5f97\u5230\u72b6\u6001\u65b9\u7a0b\uff1a </p> \\[ F[k][i][j] = \\min \\{ F[k-1][i][j]\uff0cF[k-1][i][k] + F[k-1][k][j] \\} \\] <p> \u5176\u4e2d\\(F[k][i][j]\\)\u8868\u793a\u7684\u662f\u4ecei\u5230j\uff0c\u7ecf\u8fc7k\u4e2a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\\(F[k-1][i][j]\\)\u8868\u793a\u7684\u662f\u4ecei\u5230j\uff0c\u4e0d\u7ecf\u8fc7\u7b2ck\u4e2a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\\(F[k-1][i][k] + F[k-1][k][j]\\)\u8868\u793a\u7684\u662f\u4ecei\u5230k\uff0c\u518d\u4ecek\u5230j\uff0c\u7ecf\u8fc7\u7b2ck\u4e2a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84 </p>"},{"location":"notes/cs/algorithm/gdy/","title":"Greedy Algotithms","text":""},{"location":"notes/cs/algorithm/gdy/#intro","title":"Intro","text":"<p>\u89e3\u51b3\u6700\u4f18\u95ee\u9898:</p> <ul> <li>\u4f18\u5316\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u7ec4\u7ea6\u675f\u6761\u4ef6(constraints)\uff0c\u548c\u4e00\u4e2a\u4f18\u5316\u51fd\u6570(optimization function)\uff0c\u79f0\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u89e3\u4e3a\u53ef\u884c\u89e3(feasible solution)\uff0c\u79f0\u4f7f\u5f97\u4f18\u5316\u51fd\u6570\u53d6\u5f97\u6700\u4f18\u503c\u7684\u53ef\u884c\u89e3\u4e3a\u6700\u4f18\u89e3(optimal solution)\u3002</li> <li>\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u901a\u8fc7\u4e00\u7cfb\u5217\u5c40\u90e8\u6700\u4f18\u7684\u9009\u62e9\uff0c\u671f\u671b\u80fd\u591f\u5bfc\u81f4\u5168\u5c40\u6700\u4f18\u89e3\u3002<ul> <li>\u8d2a\u5fc3\u7b97\u6cd5\u901a\u5e38\u662f\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u4f5c\u51fa\u7684\u51b3\u7b56\u5728\u540e\u9762\u662f\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u8981\u786e\u4fdd\u6bcf\u4e00\u6b65\u7684\u9009\u62e9\u90fd\u662f\u6700\u4f18\u7684\u3002</li> <li>\u53ea\u6709\u5f53\u5c40\u90e8\u6700\u4f18=\u5168\u5c40\u6700\u4f18\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u624d\u80fd\u4fdd\u8bc1\u5f97\u5230\u6700\u4f18\u89e3\u3002</li> <li>\u5f88\u591a\u65f6\u5019\u8d2a\u5fc3\u627e\u4e0d\u5230\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u53ef\u4ee5\u7528\u8d2a\u5fc3\u627e\u5230\u4e00\u4e2a\u5c40\u90e8\u4f18\u89e3\u4f5c\u4e3a\u526a\u679d\u7684\u53c2\u7167\u7269</li> </ul> </li> </ul> <p>\u8d2a\u5fc3\u7b97\u6cd5\u7684\u6982\u5ff5\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662fyy\u54e5\u8bf4\u8fc7\uff0c\u5f80\u5f80\u5b9a\u4e49\u7b80\u5355\u7684\u4e1c\u897f\u5e94\u7528\u8d77\u6765\u4f1a\u6bd4\u8f83\u96be\uff0c\u56e0\u4e3a\u7f3a\u5c11\u56fa\u5b9a\u7684\u8303\u5f0f\uff0c\u4f46\u662f\u5728\u7b97\u6cd5\u7814\u7a76\u4e2d\uff0c\u8d2a\u5fc3\u6cd5\u6709\u7740\u5e7f\u6cdb\u7684\u4f7f\u7528\uff0c\u5c24\u5176\u662f\u5728\u4eba\u5de5\u667a\u80fd\u7b97\u6cd5\u4e2d\u6c42\u89e3\u7ec4\u5408\u4f18\u5316\u65f6\u5341\u5206\u5e38\u89c1\u3002</p>"},{"location":"notes/cs/algorithm/gdy/#example","title":"Example","text":""},{"location":"notes/cs/algorithm/gdy/#activity-selection","title":"Activity Selection","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>     \u7ed9\u5b9a\u4e00\u7ec4\u6d3b\u52a8\u96c6\\(S = \\{a_1, a_2, \\cdots, a_n\\}\\)\uff0c\u6bcf\u4e2a\u6d3b\u52a8\\(a_i\\)\u90fd\u6709\u4e00\u4e2a\u5f00\u59cb\u65f6\u95f4\\(s_i\\)\u548c\u4e00\u4e2a\u7ed3\u675f\u65f6\u95f4\\(f_i\\)\uff0c\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u8fd9\u4e9b\u6d3b\u52a8\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f\uff0c\u5373\\(f_1 \\leq f_2 \\leq \\cdots \\leq f_n\\)\u3002\u73b0\u5728\u8981\u6c42\u9009\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u76f8\u4e92\u517c\u5bb9\u7684\u6d3b\u52a8\u5b50\u96c6\u3002 </p> <p>\u6211\u4eec\u5148\u6765\u7528DP\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a</p> <p>DP Solution</p> <p>     DP\u7684\u601d\u8def\u5c31\u662f\u4e00\u79cd\u7c7b\u4f3c\u904d\u5386\u7684\u601d\u8def\uff0c\u5b9a\u4e49\\(c_{ij}\\)\u4e3a\u6d3b\u52a8\\(a_i\\)\u548c\\(a_j\\)\u4e4b\u95f4\u7684\u6700\u5927\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a </p> \\[ c_{ij} = \\max_{ak \\in S} (c_{ik} +  c_{kj} + 1, c_{ij}) \\] <p>\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n^3)\\)\uff0c\u56e0\u4e3a\u9700\u8981\u904d\u5386\\(i, j, k\\)\u4e09\u4e2a\u53d8\u91cf\u3002</p> \u4ee3\u7801 <pre><code>vector&lt;cevtor&lt;int&gt;&gt; c(n, vector&lt;int&gt;(n, 0));\n\nfor (int len = 2; len &lt;= n; len++&gt;) {\n    for (int i = 0; i &lt;= n - len; i++) {\n        int j = i + len - 1;\n        c[i][j] = 0;\n        for(int k = i+1; k &lt; j; k++) {\n            if (s[k] &gt;= f[i] &amp;&amp; f[k] &lt;= s[j]) {// \u6d3b\u52a8k\u5728\u6d3b\u52a8i\u548c\u6d3b\u52a8j\u4e4b\u95f4\n                c[i][j] = max(c[i][j], c[i][k] + c[k][j] + 1);\n            }\n        }\n    }\n}\n</code></pre> <p>     \u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u66f4\u597d\u7684\u7b97\u6cd5\uff0c\u8fd9\u91cc\u7ed9\u51fa\u7684\u8d2a\u5fc3\u7b97\u6cd5\u662f\u9009\u62e9\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\uff08\u8fd9\u91cc\u5206\u522b\u5426\u5b9a\u4e86\u9009\u62e9\u6700\u65e9\u5f00\u59cb\u3001\u9009\u62e9\u6700\u77ed\u6d3b\u52a8\u3001\u9009\u62e9\u6700\u5c11\u51b2\u7a81\u6d3b\u52a8\u7684\u65b9\u6cd5\uff0c\u627e\u5230\u53cd\u4f8b\u7684\u65b9\u6cd5\u6211\u8ba4\u4e3a\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u9009\u62e9\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\u662f\u6b63\u786e\u7684\u5462\uff0c\u8fd9\u91cc\u9700\u8981\u7ed9\u51fa\u8bc1\u660e\uff09\u3002 </p> <p>\u4ea4\u6362\u53c2\u6570\u8bc1\u660e\u6cd5</p> <p>\u5728\u975e\u7a7a\u5b50\u95ee\u9898\\(S_k\\)\u4e2d\uff0c\u4ee4\\(A_k\\)\u4e3a\u6700\u4f18\u89e3\uff0c\\(a_m\\)\u662f\\(S_k\\)\u4e2d\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\uff0c\u90a3\u4e48\\(a_m\\)\u5728\\(A_k\\)\u4e2d\u3002</p> <ul> <li>\u4ee4\\(A_k\\)\u4e3a\u6700\u4f18\u89e3\uff0c\\(a_{ef}\\)\u662f\\(A_k\\)\u4e2d\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8</li> <li>\u5982\u679c\\(a_m = a_{ef}\\)\uff0c\u5219\\(a_m\\)\u5728\\(A_k\\)\u4e2d\uff0c\u5426\u5219</li> <li>\u7528\\(a_m\\)\u66ff\u6362\\(a_{ef}\\)\uff0c\u5f97\u5230\\(A_k'\\)\uff0c\u56e0\u4e3a\u7ed3\u675f\u65f6\u95f4\\(f_m \\leq f_{ef}\\)\uff0c\u6240\u4ee5\\(A_k'\\)\u4e5f\u662f\\(S_k\\)\u7684\u6700\u4f18\u89e3\uff0c\u5f97\u8bc1\u3002</li> </ul> <p></p> <p>     \u7ecf\u8fc7\u8bc1\u660e\u540e\u6211\u4eec\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u4f18\u5316DP\uff0c\u91cd\u65b0\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a </p> \\[ c_{1,j} = \\begin{cases}     1 &amp; \\text{if } j = 1 \\\\     \\max(c_{1,j-1}, c_{1,k(j)} + 1) &amp; \\text{if } j &gt; 1 \\end{cases} \\] <p>     \u8fd9\u91cc\u6211\u4eec\u5bf9\u4ece\u7b2c\u4e00\u4e2a\u6d3b\u52a8\u5230\u7b2c\\(j\\)\u4e2a\u6d3b\u52a8\u8fd9\u4e2a\u8303\u56f4\u8fdb\u884c\u904d\u5386\uff0c\u627e\u5230\u5728\u7b2c\\(j\\)\u4e2a\u6d3b\u52a8\u5f00\u59cb\u524d\u7ed3\u675f\u7684\u6d3b\u52a8\\(a_{k(j)}\\)\uff0c\u7136\u540e\u8fdb\u884c\u5224\u65ad\uff1a\u4e0d\u9009\u62e9\\(a_j\\)\uff0c\u5219\\(c_{1,j} = c_{1,j-1}\\)\uff0c\u9009\u62e9\\(a_j\\)\uff0c\u5219\\(c_{1,j}\\)\u5c31\u662f\u5728\\(a_j\\)\u6d3b\u52a8\u5f00\u59cb\u524d\u7ed3\u675f\u7684\u6d3b\u52a8\\(a_{k(j)}\\)\u52a0\u4e0a\\(a_j\\)\u3002\uff08\u8fd9\u91cc\\(k(j)\\)\u662f\\(j\\)\u7684\u524d\u4e00\u4e2a\u6d3b\u52a8\uff0c\u6240\u4ee5$a_{k(j)}\u4e5f\u5c31\u662f\u4e00\u4e2a\u6700\u4f18\u5b50\u7ed3\u6784\uff09 </p> \u4f18\u5316\u4ee3\u7801 <p>\u5148\u5bf9\\(k(j)\\)\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7136\u540e\u8fdb\u884cDP\uff1a <pre><code>struct Activity {\n    int start, finish;\n};\n\nint activity_selector(const vector&lt;Activity&gt;&amp; activities) {\n    int n = activities.size();\n    vector&lt;int&gt; dp(n, 0);\n    vector&lt;int&gt; k(n, -1);\n\n    // \u9884\u5904\u7406k(j)\n    for(int j = 1; j &lt; n; j-- ) {\n        for(int i = n-1; i &gt;= 0; i--) {\n            if (activities[i].finish &lt;= activities[j].start) {\n                k[j] = i;\n                break;\n            }\n        }\n    }\n\n\ndp[0] = 1;\n\nfor(int j = 1; j &lt; n; j++) {\n        dp[j] = dp[j-1]; // \u4e0d\u9009\u62e9a_j\n        if(k[j] != -1) {\n            dp[j] = max(dp[j], dp[k[j]] + 1); // \u9009\u62e9a_j\n        } else {\n            dp[j] = max(dp[j], 1); // \u6ca1\u6709\u517c\u5bb9\u7684\u6d3b\u52a8\uff0c\u9009\u62e9\u81ea\u5df1\n        }\n    }\n}\n\nreturn dp[n-1];\n</code></pre></p> <p>     \u6b64\u65f6\u5982\u679c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u786e\u5b9a\\(k(j)\\)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4f18\u5316\u5230\\(O(n \\log n)\\)\u3002 </p>"},{"location":"notes/cs/algorithm/gdy/#design","title":"Design","text":"<ul> <li>\u8d2a\u5fc3\u7b97\u6cd5\u4e0e\u52a8\u6001\u89c4\u5212\u533a\u522b\u5728\u4e8e\uff1a<ul> <li>\u52a8\u6001\u89c4\u5212\u662f\u81ea\u5e95\u5411\u4e0a\u7684\uff0c\u800c\u8d2a\u5fc3\u7b97\u6cd5\u662f\u81ea\u9876\u5411\u4e0b\u7684\u3002</li> <li>\u5bf9\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u90fd\u505a\u51fa\u9009\u62e9\uff0c\u4e0d\u80fd\u56de\u9000\u3002\u52a8\u6001\u89c4\u5212\u5219\u4f1a\u4fdd\u5b58\u4ee5\u524d\u7684\u8fd0\u7b97\u7ed3\u679c\uff0c\u5e76\u6839\u636e\u4ee5\u524d\u7684\u7ed3\u679c\u5bf9\u5f53\u524d\u8fdb\u884c\u9009\u62e9\uff0c\u6709\u56de\u9000\u529f\u80fd\u3002</li> </ul> </li> </ul> <p>\u5e38\u89c1\u65b9\u6cd5</p> <p>     \u5728OIWiki\u4e2d\u8d2a\u5fc3\u7b97\u6cd5\u6709\u4e24\u79cd\u5e38\u89c1\u89e3\u6cd5\uff1a </p> <p>     1. \u90bb\u9879\u4ea4\u6362\u6cd5 </p> <p>     2. \u540e\u6094\u6cd5 </p> <p></p> <p>\u90bb\u9879\u4ea4\u6362\u7684\u65b9\u6cd5\u6211\u5e76\u4e0d\u662f\u5f88\u7406\u89e3\uff0c\u8fd9\u91cc\u7ed9\u51faOIWiki\u7684\u4f8b\u9898\u8bb2\u89e3\uff1a\u56fd\u738b\u6e38\u620f</p> <p>\u8fd9\u91cc\u7ed9\u51fa\u540e\u6094\u6cd5\u7684\u8bb2\u89e3\uff0c\u56e0\u4e3a\u8bfe\u4e0a\u5e76\u6ca1\u6709\u63d0\u53ca\u3002</p> <ol> <li>\u540e\u6094\u6cd5\u5148\u6309\u7167\u67d0\u79cd\u7b56\u7565\u505a\u51fa\u9009\u62e9</li> <li>\u5982\u679c\u53d1\u73b0\u5f53\u524d\u9009\u62e9\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u5219\u8fdb\u884c\u53cd\u6094\uff0c\u9009\u62e9\u5176\u4ed6\u7b56\u7565</li> </ol> <p>Work Scheduling</p> <p>\u7ea6\u7ff0\u6709\u592a\u591a\u7684\u5de5\u4f5c\u8981\u505a\u3002\u4e3a\u4e86\u8ba9\u519c\u573a\u9ad8\u6548\u8fd0\u8f6c\uff0c\u4ed6\u5fc5\u987b\u9760\u4ed6\u7684\u5de5\u4f5c\u8d5a\u94b1\uff0c\u6bcf\u9879\u5de5\u4f5c\u82b1\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u3002 \u4ed6\u7684\u5de5\u4f5c\u65e5\u4ece0\u65f6\u523b\u5f00\u59cb\uff0c\u6709\\(10^9\\)\u4e2a\u5355\u4f4d\u65f6\u95f4\u3002\u5728\u4efb\u4e00\u65f6\u523b\uff0c\u4ed6\u90fd\u53ef\u4ee5\u9009\u62e9\u7f16\u53f71\u5230N\u7684\u5de5\u4f5c\u4e2d\u7684\u4e00\u9879\u3002\u56e0\u4e3a\u4ed6\u5728\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\u53ea\u80fd\u505a\u4e00\u4e2a\u5de5\u4f5c\uff0c\u800c\u6bcf\u9879\u5de5\u4f5c\u53c8\u6709\u4e00\u4e2a\u622a\u6b62\u65e5\u671f\uff0c\u6240\u4ee5\u4ed6\u5f88\u96be\u6709\u65f6\u95f4\u5b8c\u6210\u6240\u6709N\u4e2a\u5de5\u4f5c\u3002\u5bf9\u4e8e\u7b2c\\(i\\)\u4e2a\u5de5\u4f5c\u6709\u4e00\u4e2a\u622a\u6b62\u65f6\u95f4\\(D_i\\)\uff0c\u5982\u679c\u4ed6\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u53ef\u4ee5\u83b7\u5229\\(P_i\\)\u3002</p> <p>\u73b0\u5728\u8981\u6c42\u6c42\u51fa\u7ea6\u7ff0\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u9898\u89e3</p> <ol> <li>\u9ed8\u8ba4\u7b56\u7565\u4e3a\u6240\u6709\u5de5\u4f5c\u90fd\u505a\uff0c\u5c06\u5404\u9879\u5de5\u4f5c\u6309\u7167\u622a\u6b62\u65f6\u95f4\u6392\u5e8f</li> <li>\u5f53\u524d\u65f6\u95f4\u672a\u8d85\u8fc7\u622a\u6b62\u65f6\u95f4\uff0c\u5c31\u52a0\u5165\u5f53\u524d\u5de5\u4f5c</li> <li>\u5f53\u524d\u65f6\u95f4\u8d85\u8fc7\u622a\u6b62\u65f6\u95f4\u4e14\u5f53\u524d\u5de5\u4f5c\u4ef7\u503c\u5927\u4e8e\u5806\u9876\u5de5\u4f5c\u4ef7\u503c\uff0c\u5219\u653e\u5f03\u5806\u9876\u5de5\u4f5c\uff0c\u9009\u62e9\u5f53\u524d\u5de5\u4f5c</li> </ol> \u4ee3\u7801 <pre><code>struct Work {\n    int d, p;\n}a[10005];\n\nbool cmp(Work a, Work b) {\n    return a.d &lt; b.d;\n}\n\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i].d &gt;&gt; a[i].p;\n    }\n\n    sort(a+1, a+n+1, cmp);\n    int ans = 0;\n    for(int i = 1; i &lt;= n; i++) {\n        if(a[i].d &lt;= (int)q.size()) {// \u5f53\u524d\u65f6\u95f4\u8d85\u8fc7\u622a\u6b62\u65f6\u95f4\n            if(q.top() &lt; a[i].p) {// \u5f53\u524d\u5de5\u4f5c\u4ef7\u503c\u5927\u4e8e\u5806\u9876\u5de5\u4f5c\u4ef7\u503c\n                ans += a[i].p - q.top();// \u53cd\u6094\n                q.pop();\n                q.push(a[i].p);\n            }\n        } else {// \u5f53\u524d\u65f6\u95f4\u672a\u8d85\u8fc7\u622a\u6b62\u65f6\u95f4\n            ans += a[i].p;\n            q.push(a[i].p);\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"notes/cs/algorithm/localsearch/","title":"Local Search","text":""},{"location":"notes/cs/algorithm/localsearch/#intro","title":"Intro","text":"<p>\u5c40\u90e8\u641c\u7d22\u4e5f\u662f\u4e00\u79cd\u8fd1\u4f3c\u95ee\u9898\u7684\u5ef6\u4f38\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u5c40\u90e8\u641c\u7d22\u8fdb\u884c\u4e00\u4e2a\u5168\u5c40\u6027\u7684\u5b9a\u4e49\uff1a</p> <p>\u5b9a\u4e49</p> <p>\u5c40\u90e8\u641c\u7d22\u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u90bb\u57df\u7684\u641c\u7d22\u7b97\u6cd5\uff0c\u5b83\u901a\u8fc7\u5728\u5f53\u524d\u89e3\u7684\u90bb\u57df\u5185\u8fdb\u884c\u641c\u7d22\uff0c\u6765\u627e\u5230\u66f4\u4f18\u7684\u89e3\u3002</p> <p>\u5b9a\u4e49\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\u6709\u9ad8\u7ef4\u7684\u53ef\u884c\u89e3\u7a7a\u95f4\\(C= \\{ S|S \\text{ is feasible} \\}\\)\uff0c\u5e76\u4e14\u5bf9\u53ef\u884c\u89e3\u6765\u8bf4\u6709cost\u51fd\u6570\\(f:C\\rightarrow R\\)\uff0c</p> <p>\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u4e00\u4e2a\u89e3\\(S\\in C\\)\u4f7f\u5f97\\(f(S)\\)\u6700\u5c0f\u3002</p> <p>\u57fa\u672c\u7684\u89e3\u51b3\u601d\u8def\uff1a</p> <ul> <li>\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u89e3\\(S_0\\in C\\)</li> <li>\u627e\u5230\\(S_0\\)\u7684\u90bb\u5c45\\(S'\\)</li> <li>\u5982\u679c\\(f(S')&lt;f(S_0)\\)\uff0c\u90a3\u4e48\u66f4\u65b0\\(S_0=S'\\)</li> <li>\u91cd\u590d2\uff0c3\u6b65\u9aa4\u76f4\u5230\u6ee1\u8db3\u67d0\u4e2a\u7ec8\u6b62\u6761\u4ef6</li> </ul> <p>\u5173\u952e\u7684\u6b65\u9aa4\u5c31\u662f\u5b9a\u4e49neighborhood\uff0c\u7136\u540e\u8fdb\u884cbetter neighbor\u7684\u641c\u7d22\u3002</p>"},{"location":"notes/cs/algorithm/localsearch/#example","title":"Example","text":""},{"location":"notes/cs/algorithm/localsearch/#vertex-cover","title":"Vertex Cover","text":"<p>Vertex Cover</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u56fe\\(G=(V,E)\\)\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u9876\u70b9\u96c6\u5408\\(min S\\subseteq V\\)\uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u5728\u96c6\u5408\\(C\\)\u4e2d\u3002</p> <p>\u53ef\u884c\u89e3\u89e3\u7a7a\u95f4\uff1a\\(C= \\{ S|S \\text{ is a vertex cover} \\}\\)</p> <p>cost\u51fd\u6570\uff1a\\(f(S)=|S|\\)</p> <ul> <li>\u8fdb\u884cneighbor\u5b9a\u4e49\uff1a</li> </ul> <p>\u5b9a\u4e49neighbor\u662f\u4e0e\u5f53\u524d\u89e3\\(S\\)\u76f8\u5dee\u4e00\u4e2a\u9876\u70b9\u7684\u89e3\uff0c\u5373</p> \\[  N(S)= \\{ S'|S' \\text{ is a vertex cover and } |S' \\text{can be obtained from } S \\text{ by + or - one vertex} \\}  \\] <p>\u5931\u8d25\u7684man</p> <p>\u4e00\u79cd\u60c5\u51b5\u7684\u7b97\u6cd5\u8bbe\u8ba1\u662f\u5c06\u5168\u96c6\u8bbe\u7f6e\u4e3a\u521d\u59cb\u89e3\uff0c\u7136\u540e\u6bcf\u6b21\u526a\u6389\u4e00\u4e2a\u9876\u70b9\uff0c\u4f46\u662f\u8fd9\u6837\u5f88\u5bb9\u6613\u9677\u5165\u5c40\u90e8\u6700\u4f18\uff1a</p> <p>\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e2a\u8718\u86db\u7f51\uff0c\u4e2d\u5fc3\u70b9\u8fde\u63a5\u6240\u6709\u8fb9\u7f18\u8282\u70b9\uff0c\u4e00\u65e6\u7b2c\u4e00\u6b21\u526a\u6389\u4e2d\u5fc3\u70b9\uff0c\u5916\u90e8\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u4e0d\u80fd\u53bb\u6389\uff0c\u4f46\u662f\u6700\u4f18\u89e3\u5176\u5b9e\u662f\u53ea\u4fdd\u7559\u4e2d\u5fc3\u70b9</p> <ul> <li>\u56e0\u6b64\u9700\u8981\u722c\u51falocal optimum</li> </ul> <p>Metropolis Algorithm</p> <p>     \u6838\u5fc3\u601d\u60f3\u662f\u5728\u9009\u5b9a\u4e00\u4e2a\u89e3\\(S\\)\u540e\uff0c\u5728\u90bb\u5c45\u4e2d\u968f\u673a\u518d\u627e\u4e00\u4e2a\u89e3\\(S'\\)\uff0c\u5982\u679c\u65b0\u7684\u89e3\u66f4\u4f18\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\uff0c\u5373\u4f7f\u8fd9\u4e2a\\(S'\\)\u6bd4\\(S\\)\u5dee\uff0c\u4e5f\u6709\u4e00\u5b9a\u7684\u6982\u7387\u63a5\u53d7\u3002\u8fd9\u6837\u5c31\u6709\u673a\u4f1a\u9009\u5230\u5c40\u90e8\u5dee\u89e3\uff0c\u4ece\u800c\u722c\u51falocal optimum\u3002 </p> <p>\u8fd9\u4e2a\u6982\u7387\u7684\u8bbe\u7f6e\u662f\uff1a</p> \\[ \\text{with given constant } K \\text{ and } T \\] \\[ P(S\\rightarrow S') = e^{-\\frac{|f(S')-f(S)|}{KT}} \\] <ul> <li> <p>\u5206\u5b50\u4e0a\u7684\\(f(S')-f(S)\\)\u79f0\u4e3a\u5761\u5ea6</p> <ul> <li>\u5761\u5ea6\u5927\u65f6\uff0c\u6982\u7387\u8f83\u5c0f\uff0c\u4e0d\u503e\u5411\u4e8e\u9009\u62e9\u722c\u5761 </li> </ul> </li> <li> <p>\u79f0\\(T\\)\u4e3atemperature\uff0c\\(K\\)\u4e3aBoltzmann\u5e38\u6570\u3002</p> <ul> <li>\u5f53\\(T\\)\u6bd4\u8f83\u5927\u65f6\uff0c\u7cfb\u7edf\u5341\u5206\u6d3b\u8dc3\uff0c\u5bb9\u6613\u8fdb\u884c\u722c\u5761\uff0c\u53cd\u4e4b\u4e0d\u6613</li> <li>\u5728\u7cfb\u7edf\u521d\u671f\uff0c\\(T\\)\u6bd4\u8f83\u5927\uff0c\u5bb9\u6613\u722c\u5761\uff0c\u968f\u7740\\(T\\)\u9010\u6e10\u51cf\u5c0f\uff0c\u722c\u5761\u8d8a\u6765\u8d8a\u96be\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a\u6a21\u62df\u9000\u706b\uff08simulated annealing gradully decrease T\uff09</li> </ul> </li> </ul> <p>\u574f\u5904\u5728\u4e8e\uff1a\u96be\u4ee5\u5206\u6790\ud83e\udd72\uff0cmyc\u8001\u5e08\u8fd9\u79cd\u505a\u7b97\u6cd5\u5206\u6790\u7684\u4eba\u4e0d\u559c\u6b22\uff08\uff09</p> <p>\u4f46\u662f\u505a\u5e94\u7528\u7684\u4eba\u559c\u6b22\uff0c\u56e0\u4e3a\u5b9e\u9a8c\u7ed3\u679c\u5bfc\u5411\uff0c\u8fd8\u597d\u7528\uff08\uff09</p>"},{"location":"notes/cs/algorithm/localsearch/#hopfield-network-problem","title":"Hopfield Network Problem","text":"<p>Hopfield Network</p> <p>\u8f93\u5165\u4e00\u4e2a\u56fe\\(G=(V,E)\\)\uff0c\u6bcf\u4e2a\u8fb9\u7684\u6743\u91cd\\(w\\)</p> <ul> <li>\u5b9a\u4e49configuration \\(S\\)\uff0c\u5176\u4e2d\\(S_v \\in \\{0,1\\}\\)\uff0c</li> <li>\u5b9a\u4e49\u4e00\u4e2a\u8fb9\\(e\\)\u4e3a\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a $$ w_{e}S_uS_v \\leq 0 $$</li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\u6b63\u6743\u91cd\u8fb9\u8fde\u63a5S\u4e0d\u540c\u7684\u9876\u70b9\uff0c\u8d1f\u6743\u91cd\u8fb9\u8fde\u63a5S\u76f8\u540c\u7684\u70b9</p> <p>\u5728\u8bbe\u8ba1\u6240\u6709\u70b9\u7684configuration\u65f6\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u4e24\u4e2a\u76ee\u6807\uff1a</p> <ul> <li>\u6700\u5927\u5316\u597d\u8fb9\u6743\u91cd\u7edd\u5bf9\u503c\u4e4b\u548c</li> <li>\u5bf9\u6bcf\u4e2a\u9876\u70b9\\(u\\)\uff0c\u6700\u5927\u5316\u6240\u6709\u4e0e\\(u\\)\u76f8\u8fde\u7684\u597d\u8fb9\u7684\u6743\u91cd\u4e4b\u548c</li> </ul> <p>\u5728\u7ed9\u51fa\u4e24\u4e2a\u5b9a\u4e49\uff1a</p> <p>Definition</p> <p>\u4e00\u4e2a\u9876\u70b9\\(u\\)\u662f\u6ee1\u610f\u7684satisfied\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a $$ \\sum_{\\text{\u90bb\u63a5\u597d\u8fb9}}{|w_u|} \\geq \\sum_{{\u90bb\u63a5\u574f\u8fb9}}{|w_u|} $$</p> <p>\u4e00\u4e2aconfiguration\u662fstable\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u9876\u70b9\u90fd\u662f\u6ee1\u610f\u7684</p> <p>\u5f88\u5bb9\u6613\u53ef\u4ee5\u770b\u51fa\uff0c\u4e00\u4e2a\u9876\u70b9\u7ecf\u8fc7\u53cd\u8f6c\uff0c\u53ef\u4ee5\u4f7f\u597d\u7684\u8fb9\u53d8\u574f\uff0c\u574f\u7684\u8fb9\u53d8\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u901a\u8fc7\u5bf9\u9876\u70b9\u7684flip\u64cd\u4f5c\uff0c\u6765\u6539\u53d8configuration</p> <p>\u8fdb\u800c\u5f15\u51fa\u65b9\u6cd5</p> <p>State-Flipping</p> <ul> <li>\u968f\u673a\u9009\u53d6\u4e00\u4e2aconfiguration \\(S\\)</li> <li>while \\(S\\) is unstable with \\(u\\) is not satisfied <ul> <li>flip \\(u\\)</li> </ul> </li> <li>return \\(S\\)</li> </ul> <p>\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u7b97\u6cd5\u4e00\u5b9a\u4f1a\u5728\u6709\u9650\u6b65\u5185\u5b8c\u6210\uff1a</p> <p>\u52bf\u80fd\u51fd\u6570\u8bc1\u660e</p> <p>\u5b9a\u4e49\u52bf\u80fd\u51fd\u6570\\(\\Phi(S)\\)\u4e3a\u6240\u6709\u597d\u8fb9\u7684\u6743\u91cd\u7edd\u5bf9\u503c\u7684\u548c</p> <p>\u5728\u6539\u53d8\u4e00\u4e2a\u9876\u70b9\\(u\\)\u65f6\uff0cconfig\u53d8\u4e3a\\(S'\\)\uff0c\u6b64\u65f6\u52bf\u80fd\u51fd\u6570\u7684\u53d8\u5316\u4e3a\uff1a</p> \\[ \\Phi(S')-\\Phi(S) = - \\sum_{u \\text{\u7684\u597d\u90bb\u8fb9}}{|w_e|} + \\sum_{u \\text{\u7684\u574f\u90bb\u8fb9}}{|w_e|} \\] <p>\u56e0\u4e3a\\(u\\)\u662funsatisfied\u7684\uff0c\u6240\u4ee5\u7b49\u5f0f\u53f3\u8fb9\u662f\u6b63\u7684\uff08\u56e0\u4e3a\u5b9a\u4e49\u8fb9\u6743\u4e3a\u6574\u6570\uff0c\u4e5f\u4e00\u5b9a\u5927\u4e8e1\uff09\uff0c\u56e0\u6b64\u52bf\u80fd\u51fd\u6570\u4e00\u5b9a\u9012\u589e\u81f3\u5c111\uff0c\u6700\u7ec8\u52bf\u80fd\u4e0d\u4f1a\u8d85\u8fc7\u603b\u7684\u8fb9\u6743\u91cd\u548c\uff0c\u56e0\u6b64\u7b97\u6cd5\u4e00\u5b9a\u4f1a\u5b8c\u6210\uff08\u6700\u574f\u60c5\u51b5\u5c31\u662f\u6bcf\u4e2a\u9876\u70b9\u90fd\u53cd\u8f6c\uff0c\u5373\\(O(W)\\)\u590d\u6742\u5ea6\uff09</p> <p>Pseudo-Poly \u4f2a\u591a\u9879\u5f0f</p> <p>\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6700\u574f\u60c5\u51b5\u662f\u5728\\(W\\)\u6b21\u64cd\u4f5c\u540e\u505c\u6b62\uff0c\u6211\u4eec\u5f97\u5230\u4e86\\(O(W)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u770b\u4e0a\u53bb\u5c31\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u7684\\(W\\)\u5e76\u4e0d\u662f\u8f93\u5165\u95ee\u9898\u7684\u89c4\u6a21\uff0c\u800c\u662f\u8f93\u5165\u56fe\u7684\u8fb9\u6743\u91cd\u548c\uff0c\u5bf9\u4e8e\u8f93\u5165\u95ee\u9898\u7684\u5927\u5c0f\uff0c\u9700\u8981\u5bf9\u5176\u53d6\u5bf9\u6570\u6362\u7b97\u62102\u8fdb\u5236\u957f\u5ea6\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4f2a\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u7684</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u52bf\u80fd\u51fd\u6570\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u76ee\u6807\u4e00\u8981\u8fbe\u5230\u6700\u5927\u503c\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u5c31\u662f </p> \\[ \\text{local search to maximize objective } 1 \\]"},{"location":"notes/cs/algorithm/localsearch/#maximum-cut","title":"Maximum Cut","text":"<p>NP-Hard</p> <p>\u5b9a\u4e49</p> <p>\u7ed9\u5b9a\u6709\u6b63\u6574\u6570\u6743\u91cd\u7684\u65e0\u5411\u56fe\\(G=(V,E)\\)\uff0ca cut (A, B)\u5c31\u662f\\(V\\)\u7684\u4e00\u4e2a\u5212\u5206\uff0c\u5c06\\(V\\)\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\\(A\\)\u548c\\(B\\)\uff0c</p> <p>cut\u7684\u6743\u91cd\u5b9a\u4e49\u4e3a\uff1a</p> \\[ w(A,B) = \\sum_{(u,v)\\in E|u\\in A, v\\in B}w_{uv} \\] <p>\u4e5f\u5c31\u662f\u6240\u6709\u8de8\u8d8a\\(A\\)\u548c\\(B\\)\u7684\u8fb9\u7684\u6743\u91cd\u4e4b\u548c</p> <p>\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2acut\uff0c\u4f7f\u5f97\\(w(A,B)\\)\u6700\u5927</p> <p>\u5176\u5b9e\u662f\u4e00\u4e2aHopfield Network Problem\u7684\u7279\u4f8b\uff0c\u4e4b\u524d\u7684config\u662f\u6b63\u8d1f\u4e24\u79cd\u914d\u7f6e\uff0c\u73b0\u5728\u5c31\u5bf9\u5e94\u5230\u4e86A\u548cB\uff0c\u597d\u8fb9\u4e5f\u5c31\u662f\u73b0\u5728\u7684cut\u8fb9\uff08\u4ea4\u53c9\u8fb9\uff09</p> <ul> <li> <p>\u4f7f\u7528state-flipping\u7b97\u6cd5\u89e3\u51b3</p> <ul> <li> <p>\u8fd9\u65f6\u8fd9\u4e2a\u7b97\u6cd5\u662flocal optimal\u7684\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u8fd1\u4f3c\u7b97\u6cd5</p> </li> <li> <p>\u8fd1\u4f3c\u6bd4\u4e3a2</p> </li> </ul> </li> </ul> <p>\u7ed9\u51fa\u8bc1\u660e\uff1a</p> <p>\u8bc1\u660e</p> <p>\u5728\u5b8c\u6210state-flipping\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\\((A,B)\\)\u662fstable\u7684</p> <p>for any \\(u\\in A\\) and his neighbors \\(v\\)\u6784\u6210\u7684\u8fb9\\(e=(u,v)\\)\u6211\u4eec\u6709\uff1a</p> \\[ \\sum_{v \\in A}{w_e} \\leq \\sum_{v \\in B}{w_e} \\] <p>\u5bf9\u6240\u6709\\(u\\in A\\)\uff0c\u6211\u4eec\u6709\uff1a</p> \\[ \\sum_{u \\in A}{\\sum_{v \\in A}{w_e}} \\leq \\sum_{u \\in A}{\\sum_{v \\in B}{w_e}} \\] <p>\u4e0d\u7b49\u53f7\u53f3\u4fa7\u5c31\u662f\\(w(A,B)\\)</p> <p>\u4e0d\u7b49\u53f7\u5de6\u4fa7\u662f\u5c06\u6240\u6709\u5728\\(A\\)\u5185\u90e8\u8fb9\u7684\u6743\u91cd\u76f8\u52a0\uff0c\u7531\u5bf9\u79f0\u6027\u53ef\u77e5\u8fb9\u88ab\u6c42\u548c\u4e86\u4e24\u6b21\uff0c\u56e0\u6b64\u4e0d\u7b49\u5f0f\u5de6\u4fa7\u5c31\u662f\\(2\\sum_{e\\text{\u662f\u5185\u90e8\u8fb9}}{w_e}\\)</p> <p>\u5bf9\\(B\\)\u540c\u7406</p> <p>\u5c06\u6574\u4e2a\u56fe\u7684\u8fb9\u6743\u91cd\u548c\u8bb0\u4e3a\\(W\\)\uff0c\u5219\u6709\uff1a</p> \\[ W = \\sum_{e\\text{\u662fA\u5185\u90e8\u8fb9}}{w_e} + \\sum_{e\\text{\u662fB\u5185\u90e8\u8fb9}}{w_e} + w(A,B) \\] <p>\u901a\u8fc7\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\uff0c\u5c06\u4e24\u4e2a\u5185\u90e8\u8fb9\u653e\u7f29\u6389\uff0c\u6211\u4eec\u5f97\u5230\uff1a</p> \\[ w(A,B) \\geq \\frac{W}{2} \\geq \\frac{OPT}{2} \\] <p>\u4f46\u662f\u521a\u521a\u8bf4\u5230\u4e86\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u6211\u4eec\u8fdb\u884c\u4f18\u5316\uff1a</p> <p>\u5728\u5148\u524d\u9009\u62e9flip\u7684\u70b9\u65f6\uff0c\u53ea\u8981\u662f\u597d\u8fb9\u548c\u5c0f\u4e8e\u574f\u8fb9\u548c\u6211\u4eec\u5c31\u8fdb\u884c\u53cd\u8f6c\uff0c\u4f46\u662f\u8fd9\u6837\u53cd\u8f6c\u7684\u9891\u7387\u592a\u9ad8\uff0c\u65f6\u95f4\u4e0a\u82b1\u8d39\u592a\u5927\uff0c\u6211\u4eec\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u8fd1\u4f3c\u6a21\u7cca\uff0c\u53ea\u6709\u5f53\u6539\u8fdb\u8db3\u591f\u5927\uff0c\u6211\u4eec\u624d\u53cd\u8f6c</p> <ul> <li>flip only when after flipping\uff1a</li> </ul> \\[ w(A',B') \\geq (1+\\frac{\\epsilon}{|V|})w(A,B) \\] <p>\u7531\u4e8e\u4e00\u4e2a\u4e0d\u7b49\u5f0f\uff1a</p> \\[ (1+\\frac{\\epsilon}{n})^{\\frac{n}{\\epsilon}} \\geq 2 \\] <p>\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u5c31\u662f\u8bf4\u6211\u8981\u8ba9\\(w(A',B')\\)\u7ffb\u500d\uff0c\u9700\u8981\u8fdb\u884c\\(\\frac{n}{\\epsilon}\\)\u6b21\u6570\u7684\u53cd\u8f6c</p> <p>\u800c\u6211\u4eec\u77e5\u9053\u6700\u591a\u53cd\u8f6c\u6b21\u6570\u662f\\(\\log W\\)\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7b97\u6cd5\u662f\\(O(\\frac{n}{\\epsilon}\\log W)\\)\u7684\uff0c\u8fbe\u5230\u4e86\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6</p> <ul> <li>\u8fd9\u4e2a\u8fd1\u4f3c\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u4e3a $$ 2+\\frac{\\epsilon}{2} $$</li> </ul> <p>\u8bc1\u660e\u7684\u601d\u8def\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5728\u8fdb\u884c\u7b2c\u4e00\u6b65\u53cd\u8f6c\u5224\u65ad\u7684\u65f6\u5019\u9700\u8981\u66f4\u6539\u4e0d\u7b49\u5f0f\uff0c\u4e0d\u7b49\u53f7\u53f3\u8fb9\u52a0\u5165\u90a3\u4e2a\\(\\frac{\\epsilon}{|V|}w(A,B)\\)\u5176\u4ed6\u6b65\u9aa4\u76f8\u540c</p> <p>\u51cf\u5c11\u6b65\u6570</p> <p>\u5176\u5b9e\u8fd9\u5c31\u662f\u76f8\u5f53\u4e8e\u5728local search\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6bcf\u6b65\u8d70\u7684\u592a\u5c0f\u4e86\u56e0\u6b64\u6162\uff0c\u8fd9\u4e2a\u5224\u65ad\u6761\u4ef6\u5c31\u662f\u5728\u51cf\u5c11\u6b65\u6570</p>"},{"location":"notes/cs/algorithm/localsearch/#kerninghan-lin-algorithm","title":"Kerninghan-Lin algorithm","text":"<p>\u6211\u4eec\u521a\u624d\u7684\u51cf\u5c11\u6b65\u6570\u65b9\u6cd5\u662f\u4e00\u79cd\u63d0\u9ad8\u6548\u7387\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u589e\u5927\u6b65\u957f\u3002</p> <p>\u5728\u6700\u57fa\u672c\u7684\u60c5\u51b5\u4e2d\u6211\u4eec\u901a\u8fc7\u6539\u53d8\u4e00\u4e2a\u70b9\u7684config\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u6211\u4eec\u540c\u65f6\u6539\u53d8k\u4e2a\u70b9\u5462\uff1f\u8fd9\u6837\u5c31\u589e\u5927\u4e86\u90bb\u5c45</p> <ul> <li>\u597d\u5904\u662f\u90bb\u5c45\u53d8\u591a\u52a0\u5feb\u6536\u655b</li> <li>\u574f\u5904\u662f\u90bb\u5c45\u8981\u8ba1\u7b97\uff0c\u8d70\u6bcf\u4e00\u6b65\u7684\u65f6\u95f4\u53d8\u957f\uff0c\u603b\u5171\u8981\\(\\rightarrow\\) \\(O(n^k)\\)</li> </ul> <p>\u8fd9\u91cc\u63d0\u51fa\u4e86\u4e00\u4e2a\u7b97\u6cd5\uff1a</p> <p>\u5728\u7b2c\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u9009\u62e9\u4f7f\u5f97\u53cd\u8f6c\u6536\u76ca\u6700\u5927\u7684\u4e00\u4e2a\u70b9\u8fdb\u884c\u53cd\u8f6c\u5f97\u5230\\((A_1,B_1)\\)\uff0c\u7136\u540e\u5728\u5269\u4e0b\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u70b9\u4e2d\u9009\u62e9\u4f7f\u5f97\u5269\u4e0b\u7684\u70b9\u6536\u76ca\u6700\u5927\u7684\u70b9\u53cd\u8f6c\u5f97\u5230\\((A_2,B_2)\\)\uff0c\u8fd9\u6837\u64cd\u4f5c\u4e0b\u53bb\u5f97\u5230\u4e00\u4e2a\u90bb\u5c45\u96c6\u5408</p> \\[ N(A,B) = \\{(A_1,B_1),(A_2,B_2),...,(A_{n-1},B_{n-1})\\} \\] <p>\u7136\u540e\u5728\u8fd9\u4e2a\u90bb\u5c45\u96c6\u5408\u4e2d\u8fdb\u884clocal search    </p> <ul> <li>\u5f97\u5230\u8fd9\u4e2a\u90bb\u5c45\u96c6\u5408\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n^2)\\)\u7684\uff0c\u8dd1\u51fa\u6765\u6548\u679c\u4e0d\u9519myc\u8bf4\uff08\uff09</li> </ul>"},{"location":"notes/cs/algorithm/ads/ADS/","title":"ADS","text":""},{"location":"notes/cs/algorithm/ads/ADS/#avl-tree","title":"AVL Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro","title":"Intro","text":"<p>\u5728\u6570\u636e\u96c6\u4e2d\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u3001\u6392\u5e8f\u7b49\u64cd\u4f5c\u65f6\u5177\u6709\u8f83\u597d\u7684\u6548\u679c</p> <p>Target\uff1aSpeed up</p> <p>\u57fa\u672c\u601d\u60f3\uff1a</p> <p>height balance\uff1a\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\uff08\u5e73\u8861\u56e0\u5b50BF\uff09\u4e0d\u8d85\u8fc71</p> \\[ BF=| h_l - h_r | \\leq 1\\] <p>PS:\u6811\u7684\u9ad8\u5ea6\u8ba1\u7b97\uff1a\u7531\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84 -&gt; \u8fdb\u884c\u9ad8\u5ea6\u5e73\u8861</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation","title":"Operation","text":"<p>Rotation \u5728\u4e0d\u6539\u53d8\u6811\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u65cb\u8f6c\u64cd\u4f5c\u6765\u8c03\u6574\u6811\u7684\u7ed3\u6784\uff0c\u4f7f\u5f97\u6811\u7684\u9ad8\u5ea6\u5e73\u8861</p> <p></p> <p>\u60f3\u8c61\u5c06\u9700\u8981\u88ab\u63d0\u9ad8\u7684\u8282\u70b9\u63d0\u9ad8\uff0c\u5c06\u9700\u8981\u88ab\u964d\u4f4e\u7684\u8282\u70b9\u964d\u4f4e\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u8fde\u63a5\u5230\u65b0\u7684\u8282\u70b9\u4e0a</p> <p>Time Complexity: \\(O(1)\\)</p> <p>\u56e0\u4e3a\u53ea\u6709\u56db\u4e2a\u8282\u70b9\u66f4\u65b0</p> <p>B\u3001A\u3001y\u3001A\u7684\u8001\u5b50</p> <ol> <li>RR Rotation or LL Rotation \u53f3\u5b50\u6811\u7684\u53f3\u8282\u70b9\u63d2\u5165\u5bfc\u81f4\u53f3\u5b50\u6811\u7684\u7236\u8282\u70b9BF=2\uff0c\u5c06BF=2\u7684\u53f3\u5b50\u8282\u70b9\u63d0\u9ad8\uff0cB\u8fde\u63a5\u7684\u5de6\u5b50\u6811\u8fde\u63a5\u5230A\u7684\u53f3\u5b50\u6811\u4e0a</li> </ol> <p></p> <p>\u82e5\u9047\u5230\u591a\u4e2a\u8282\u70b9BF\u975e\u6cd5\u7684\u60c5\u51b5\uff0c\u53ea\u9700\u8981\u5bf9\u6700\u5e95\u90e8\u7684\u4e24\u4e2a\u8282\u70b9\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\u5373\u53ef</p> <ol> <li>LR Rotation or RL Rotation \u5de6\u5b50\u6811\u7684\u53f3\u5b50\u8282\u70b9\u589e\u52a0\u5bfc\u81f4\u5de6\u5b50\u6811\u7684\u7236\u8282\u70b9BF=2\uff0c\u5c06\u5de6\u5b50\u6811\u7684\u53f3\u8282\u70b9\u63d0\u9ad8\u4e24\u6b21</li> </ol> <p></p> <p>\u6309\u7167\u7247\u4e0a\u7684\u89e3\u91ca\u6839\u636e\u6811\u7684\u5408\u6cd5\u6027\u53ef\u4ee5\u63a8\u51fa\u4e2d\u95f4\u6b65\u9aa4 \u4e5f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u5728\u5bf9Mar\u8fdb\u884c\u65cb\u8f6c\u65f6\uff0cMar\u7684\u5de6\u4f4d\u662f\u88ab\u5360\u7528\u7684\uff0c\u800cMar\u7684\u7236\u4eb2\u662f\u6bd4Mar\u5c0f\u7684\uff0c\u53ea\u6709\u628aJan\u79fb\u5f00\u624d\u80fd\u7ed9Aug\u817e\u51fa\u4f4d\u7f6e</p>"},{"location":"notes/cs/algorithm/ads/ADS/#ananlysis","title":"Ananlysis","text":"<p>\\(n_h\\)\uff1a\u9ad8\u5ea6\u4e3ah\u7684\u6700\u5c0f\u8282\u70b9\u6570 \u4e3a\u4e86\u4fdd\u6301\u6811\u6709h\u7684\u9ad8\u5ea6\uff0c\u81f3\u5c11\u4e00\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u4e3ah-1\uff0c\u53e6\u4e00\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u4e0e\u4ed6\u76f8\u5dee\u4e3a1\uff0c= n-2 \u56e0\u6b64\uff1a</p> \\[ n_h = n_{h-1} + n_{h-2} + 1 \\] <p>\u53ef\u4ee5\u5f97\u5230\uff1a</p> \\[ n_h=F_{h+3}-1   ,h \\geq -1  \\] \\[ \\text{F is Fibonacci Number}\\]"},{"location":"notes/cs/algorithm/ads/ADS/#splay-tree","title":"Splay Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_1","title":"Intro","text":"<p>Target: \u7531\u7a7a\u6811\u8fdb\u884cM\u4e2a\u8fde\u7eed\u64cd\u4f5c\u6700\u591a\u9700\u8981\\(O(M \\log N)\\)\u7684\u65f6\u95f4</p> <p>\u5373\uff1aAmortized Time Complexity \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6 = \\(O(log N)\\)</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_1","title":"Operation","text":"<p>\u5c06\u6700\u8fd1\u8bbf\u95ee\u7684\u8282\u70b9\u63d0\u5347\u5230\u6839\u8282\u70b9\uff0c\u8fd9\u4e00\u64cd\u4f5c\u901a\u8fc7\u65cb\u8f6c\u6765\u5b9e\u73b0</p> <ul> <li>Zig Single Rotation</li> </ul> <p>\u6ca1\u6709G\uff0c\u53ea\u8f6c\u4e00\u6b21X</p> <ul> <li>Zig-zag</li> </ul> <p>Double Rotation \u8f6c\u4e24\u6b21X</p> <ul> <li>Zig-zig</li> </ul> <p>Single Rotation  \u5148\u8f6cX\u518d\u8f6cP</p> <p></p>"},{"location":"notes/cs/algorithm/ads/ADS/#amortized-analysis","title":"Amortized Analysis","text":"<p>\u5747\u644a\u6cd5\u5206\u6790\u662f\u5bf9\u4e00\u7cfb\u5217\u64cd\u4f5c\u7684\u5e73\u5747\u6027\u80fd\u8fdb\u884c\u5206\u6790\uff0c\u800c\u4e0d\u662f\u5bf9\u5355\u4e2a\u64cd\u4f5c\u7684\u6027\u80fd\u8fdb\u884c\u5206\u6790 bound\u4ecb\u4e8eworst\u548caverage\u4e4b\u95f4 \u4e14\u5747\u644a\u754c\u4e0e\u6982\u7387\u65e0\u5173 \u901a\u5e38\u6709\u4e09\u79cd\u65b9\u6cd5\uff1aAggregate Accounting Potential</p> <ul> <li>Aggregate Method</li> </ul> <p>\u5bf9\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u8fdb\u884c\u6700\u574f\u65f6\u95f4\u60c5\u51b5\u5206\u6790\u5f97\u5230\\(T(n)\\)\uff0c\u6b64\u65f6\uff1a $$ T(n) \\leq \\sum_{i=1}^{n} t_i=O(n) $$ \u8fd9\u65f6\\(T(n)\\)\u903c\u8fd1\u4e8e\\(O(n)\\)\uff0c\u5373\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\) \u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u7684\u96be\u70b9\u5728\u4e8e\u9700\u8981\u786e\u5b9a\u8fd9\u4e2a\\(\\sum_{i=1}^{n} t_i\\)\uff0c\u4e5f\u5c31\u662f\u603b\u7684\u65f6\u95f4\u5f00\u9500</p> <p>\u5728\u8bb2\u89e3\u5176\u4f59\u7684\u4e24\u4e2a\u65b9\u6cd5\u4e4b\u524d\uff0cyy\u54e5\u8bf4\u4e86\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u6545\u4e8b\uff1a yy\u5728\u5b66\u6821\u95e8\u53e3\u5f00\u4e86\u4e00\u4e2a\u5c0f\u5356\u90e8\u4e70\u6c7d\u6c34\uff0c\u6bcf\u6b21\u5356\u51fa\u4e00\u74f6\u6210\u672c\u4e3a1\u7684\u6c7d\u6c34\uff0c\u5b66\u751f\u81f3\u5c11\u8981\u4ea4\u4e00\u5757\u94b1\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u591a\u4ea4\u94b1\u5b58\u5230\u4e0b\u6b21\u4f7f\u7528\uff0c\u6c7d\u6c34\u7684\u6210\u672c\u5c31\u662f<code>actual cost</code>\uff0c\u800c\u5b66\u751f\u4ea4\u7684\u94b1\u5c31\u662f<code>amortized cost</code>\uff0c\u591a\u51fa\u6765\u7684\u94b1\u6211\u4eec\u79f0\u4f5c<code>credit</code></p> <ul> <li>Accounting Method</li> </ul> <p>\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u81ea\u5df1\u8bbe\u7f6e\u5747\u644a\u4ef7\u503c\uff0c\u4f46\u9700\u8981\u4fdd\u8bc1\u5747\u644a\u4ef7\u503c\u4e0d\u4f1a\u5c0f\u4e8e\u5b9e\u9645\u4ef7\u503c\uff0c\u5373\uff1a</p> \\[ \\sum \\text{amortized cost} \\geq \\sum \\text{actual cost} \\] <p>(\u4e5f\u5c31\u662f\u4e0d\u4f1a\u8d4a\u8d26)</p> <p>\u8fd9\u65f6\u5019\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u5b9e\u9645\u4ef7\u503c\u7684\u4e0a\u754c</p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8fc7\u7a0b\u5c31\u662f\uff1a</p> <ul> <li>\u9996\u5148\u5206\u6790\u5b9e\u9645\u4ef7\u503c</li> <li>\u7136\u540e\u8bbe\u7f6e\u5747\u644a\u4ef7\u503c</li> <li>\u5206\u6790credit\u7684\u503c\uff0c\u786e\u4fdd\u5176\u5927\u4e8e\u7b49\u4e8e0</li> </ul> <p>MultiPop</p> <p></p> <ul> <li>Potential Method: \u76f4\u89c2\u7684\u3001\u4e00\u6b21\u6027\u5b9a\u4e49\u6240\u6709\u64cd\u4f5c\u7684\u5747\u644a\u4ee3\u4ef7\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5927\u91cf\u64cd\u4f5c\u9700\u8981\u5b9a\u4e49\u5747\u644a\u4ef7\u503c\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u9002\u7528</li> </ul> \\[ \\hat{c}_i-c_i=\\text { Credit }_i=\\Phi\\left(D_i\\right)-\\Phi\\left(D_{i-1}\\right) \\] <p>\u89e3\u91ca\uff1a</p> <p>\\(Credit_i\\)\uff1a\u7b2c\\(i\\)\u6b21\u64cd\u4f5c\u7684credit\uff0c\u8fd9\u65f6\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u72b6\u6001\u5f97\u5206\u51fd\u6570\\(\\Phi(D)\\)\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u503c\u662f\u4e00\u4e2a\u72b6\u6001\u7684\u4ee3\u4ef7\\(D_i\\)\u662f\u7b2c\\(i\\)\u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001</p> <p>\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\\(Credit_i\\)\u7684\u6570\u503c\u4e0d\u4ec5\u7531\u5f53\u524d\u7684\u72b6\u6001\u51b3\u5b9a\uff0c\u8fd8\u53d7\u5230\u4e4b\u524d\u72b6\u6001\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u6211\u4eec\u7528\\(\\Phi(D_i-\\Phi(D_{i-1})\\)\u6765\u8868\u793a</p> <p>\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a</p> \\[ \\sum_{i=1}^{n} \\hat c_i=\\sum_{i=1}^{n} c_i+\\Phi(D_n)-\\Phi(D_0) \\] <p>\u6070\u597d\u5728\u8fd9\u4e2a\u6c42\u548c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u7559\u4e0b\u4e86\\(\\Phi(D_0)\\)\u548c\\(\\Phi(D_n)\\)\uff0c\u8fd9\u4e24\u4e2a\u503c\u662f\u5e38\u6570\uff0c\u4ece\u800c\u6211\u4eec\u5f97\u5230\u4e86\\(\\sum_{i=1}^{n} \\hat c_i\\)\u7684\u503c</p> <p>\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\uff1a</p> <p>\u8bbe\u8ba1\u52bf\u80fd\u51fd\u6570</p> <ul> <li>\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u72b6\u6001\u5f97\u5206\uff08\u52bf\u80fd\uff09\u51fd\u6570\\(\\Phi(D)\\)<ul> <li>\u52bf\u80fd\u51fd\u6570\u7684\u5b9a\u4e49\u8981\u6c42\uff1a\\(\\Phi(D_0)=0\\)</li> </ul> </li> <li>\u53cd\u5e94\u51fd\u6570\u7684\u6f5c\u5728\u590d\u6742\u5ea6</li> <li>\u68c0\u67e5Credit\u5408\u6cd5\u6027</li> <li>\u8ba1\u7b97\\(\\sum_{i=1}^{n} \\hat c_i\\)</li> </ul> <ul> <li>\u6700\u597d\u7684\u52bf\u80fd\u51fd\u6570\u5e94\u8be5\u786e\u4fddn\u6b21\u64cd\u4f5c\u7684credit\u503c\u5c3d\u53ef\u80fd\u5c0f</li> </ul> <p>\u5bf9Splay\u6811\u8fdb\u884c\u5747\u644a\u5206\u6790</p> <p> \u82e5\u9009\u6df1\u5ea6\u4f5c\u4e3a\u52bf\u80fd\u51fd\u6570\uff0c\u65e0\u6cd5\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u53d8\u5316\uff0c\u56e0\u6b64\u4e0d\u80fd\u9009\u62e9 </p> <p> \u82e5\u9009\u62e9\u6240\u9009\u8f6c\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e2a\u6570\uff0c\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u4f46\u662fX\u3001G\u7684\u53d8\u5316\u592a\u5927\uff0c\u6240\u5f97\u5230\u7684\u754c\u592a\u677e </p> <p> \u6700\u7ec8\u9009\u62e9\u7684\u6280\u5de7\u662f\uff1a </p> <p> \u5bf9\u8282\u70b9\u6570\u53d6\u5bf9\u6570 \u5f97\u5230\u6811\u7684\u79e9 </p> <p> \u5373\uff1a\\(\\Phi(D)=Rank=\\sum\\log S(n)\\) </p> <p>  \u5bf9\u52bf\u80fd\u51fd\u6570\u5206\u6790\u65f6\uff0c\u5982\u679c\u8fdb\u884c\u5b8c\u5168\u5206\u6790\uff0c\u9700\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7684credit\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u8fd9\u6837\u8ba1\u7b97\u592a\u590d\u6742\uff0c\u56e0\u6b64\u6211\u4eec\u8fdb\u884c\u653e\u7f29\uff0c\u53ea\u5bf9\u6240\u5bfb\u627e\u7684\u76ee\u6807\u8282\u70b9\u7684\u52bf\u80fd\u8fdb\u884c\u5206\u6790\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u95ee\u9898 </p> <p> \u9700\u8981\u7528\u5230\u4e0b\u9762\u7684\u5f15\u7406\uff1a </p> <p>Lemma</p> \\[ if:a+b \\leq c  \\] \\[ then:\\log a + \\log b \\leq 2\\log c + 2 \\] <p></p> <p>\u6211\u624b\u5199\u4e86\u4e00\u4e0b\u8fd9\u4e09\u4e2a\u653e\u7f29\u7684\u8fc7\u7a0b\uff1a</p> <p></p>"},{"location":"notes/cs/algorithm/ads/ADS/#red-black-tree","title":"Red-Black Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_2","title":"Intro","text":"<ul> <li> <p>AVL\u6811\u662f\u901a\u8fc7\u5b9e\u73b0\u9ad8\u5ea6\u5e73\u8861\u6765\u8fdb\u884c\u4f18\u5316</p> </li> <li> <p>\u800c\u7ea2\u9ed1\u6811\u662f\u901a\u8fc7\u5b9e\u73b0\u989c\u8272\u5e73\u8861\u6765\u8fdb\u884c\u4f18\u5316</p> </li> </ul> <p>\u5728\u6811\u7684\u4ee3\u7801\u4e2d\uff0c\u9047\u5230\u4e86\u53f6\u5b50\u7ed3\u70b9\u65f6\u9700\u8981<code>if</code>\u5224\u5b9a\u7a7a\uff0c\u5e38\u7528\u4e00\u4e2a\u54e8\u5175\u8282\u70b9\u6765\u907f\u514d\u5927\u91cf\u7684<code>if</code>\u8bed\u53e5\uff0c\u4f46\u662f\u4e3a\u4e86\u907f\u514d\u7a7a\u95f4\u7684\u6d6a\u8d39\uff0c\u5728\u7ea2\u9ed1\u6811\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2aNIL\u8282\u70b9\u6765\u4ee3\u66ff\u54e8\u5175\u8282\u70b9,\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u548c\u6839\u8282\u70b9\u90fd\u6307\u5411NIL\u8282\u70b9</p> <p>\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff1a</p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272\uff0c\u8981\u4e48\u662f\u9ed1\u8272</li> <li>\u6839\u8282\u70b9\u662f\u9ed1\u8272</li> <li>\u6bcf\u4e2a\u53f6\u8282\u70b9\uff08NIL\u8282\u70b9\uff09\u662f\u9ed1\u8272</li> <li>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u662f\u9ed1\u8272</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u4ece\u8be5\u8282\u70b9\u5230\u5176\u6240\u6709\u540e\u4ee3\u53f6\u8282\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u5747\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9</li> </ul> <p>black height\uff1a\u4ece\u67d0\u8282\u70b9\uff08\u4e0d\u5305\u542b\u81ea\u8eab\uff09\u5230\u53f6\u8282\u70b9\u7684\u9ed1\u8272\u8282\u70b9\u7684\u4e2a\u6570</p> <p>Lemma</p> <p>\u4e00\u4e2a\u6709N\u4e2a\u5185\u90e8\u8282\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u6811\u9ad8\u81f3\u591a\u4e3a\\(2\\log_2(N+1)\\)</p> <p>\u8bc1\u660e\uff1a\u8bbe\u7a7a\u6811\u7684\u6811\u9ad8\u4e3a0</p> <p>\u5f52\u7eb3\u5047\u8bbe\uff1a</p> \\[ for\\ any\\ node\\ x, sizeof(x) \\geq 2^{bh(x)}-1 \\] <p>\u5f52\u7eb3\u5960\u57fa\u663e\u7136\u5728\u7a7a\u6811\u4e0a\u6210\u7acb</p> <p>\u5f52\u7eb3\u6f14\u7ece\uff1a</p> <p>\u5bf9\u4e00\u4e2a\u975e\u7a7a\u6811\u65f6\uff1a\\(h(x) \\leq k\\) \u6210\u7acb\uff0c\u73b0\u5728\u8bc1\u660e\\(h(x) \\leq k+1\\)\u4e5f\u6210\u7acb</p> <p>\u5bf9\u4e00\u4e2ax\u6ee1\u8db3\\(h(x) \\leq k+1\\)\uff0c\u5176\u5b50\u6811\u7684\u9ed1\u9ad8\u8981\u4e48\u7b49\u4e8ex\u7684\u9ed1\u9ad8\uff0c\u8981\u4e48\u7b49\u4e8ex\u7684\u9ed1\u9ad8-1\uff08\u5b50\u6811\u7684\u6839\u8282\u70b9\u662f\u7ea2\u8272\uff09</p> <p>\u56e0\u4e3a\uff1a</p> \\[ h(child) \\leq k \\] <p>\u5219\u6709\uff1a $$ sizeof(child) \\geq 2^{bh(child)}-1 \\geq 2^{bh(x)-1}-1 $$ \u5373\u5b50\u6811\u7684\u8282\u70b9\u6570\u6709\u4e00\u4e2a\u4e0b\u754c</p> <p>\u7531\u4e8e\uff1a $$ bh(Tree) \\geq h(Tree)/2 $$ \u5219\uff1a $$ Sizeof(Tree)=N \\geq 2^{bh(Tree)}-1 \\geq 2^{h/2}-1 $$ \u5f97\u8bc1</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_2","title":"Operation","text":"<p>\u524d\u63d0</p> <p> \u5728\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5728\u63d2\u5165\u524d\u6811\u662f\u6ee1\u8db3\u7ea2\u9ed1\u6811\u6027\u8d28\u7684\uff0c\u56e0\u6b64\u8fdb\u884c\u5bf9\u6bd4\u7684\u662f\u63d2\u5165\u7ea2\u8272\u8282\u70b9\u524d\u540e\u7684\u6027\u8d28\u60c5\u51b5\uff0c\u8865\u836f\u8ba1\u7b97\u4f8b\u5b50\u4e2d\u7684\u7edd\u5bf9\u9ed1\u9ad8 </p> <ul> <li>Insertion \u4e24\u4e2a\u6027\u8d28\u9700\u8981\u4fdd\u6301\uff1a</li> </ul> <ol> <li>Key\u503c\u4fdd\u8bc1\u4e8c\u53c9\u6811</li> <li>\u7ea2\u9ed1\u6811\u6027\u8d28</li> </ol> <p>\u9ed8\u8ba4\u63d2\u5165\u7684\u8282\u70b9\u4e3a\u7ea2\u8272\uff0c\u63d2\u5165\u540e\u4e0d\u4f1a\u7834\u574f\u7b2c\u4e94\u6761\u6027\u8d28\uff0c\u4f46\u662f\u7ee7\u7eed\u63d2\u5165\u540e\u53ef\u80fd\u4f1a\u9047\u5230\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9\uff0c\u8fd9\u65f6\u9700\u8981\u8fdb\u884c\u8865\u6551</p> <p>\u9700\u6ce8\u610f\u6027\u8d282\u53ef\u80fd\u56e0\u4e3a\u63d2\u5165\u7684\u662f\u7a7a\u6811\u88ab\u7834\u574f\uff0c\u8fd9\u65f6\u9700\u8981\u5c06\u6839\u8282\u70b9\u6d82\u9ed1</p> <p>\u63a5\u4e0b\u6765\u7684\u5206\u7c7b\u8ba8\u8bba\u5176\u5b9e\u5c31\u662f\u6839\u636e\u53d4\u53d4\u7684\u989c\u8272\u8fdb\u884c\u65cb\u8f6c\uff0c</p> <p>Case 1</p> <p>\u53d4\u53d4\u8282\u70b9\u662f\u7ea2\u8272</p> <p>\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u540e\uff0c\u7236\u4eb2\u4e0e\u53d4\u53d4\u90fd\u662f\u7ea2\u8272\uff0c\u8fd9\u65f6\u5c06\u7236\u4eb2\u6d82\u9ed1\uff0c\u53d1\u73b0\u5de6\u6811\u7684\u9ed1\u9ad8\u6bd4\u53f3\u6811\u7684\u9ed1\u9ad8\u591a1\uff0c\u518d\u5c06\u53d4\u53d4\u6d82\u9ed1\uff0c\u53d1\u73b0\u6574\u68f5\u6811\u5bf9\u4e8e\u6811\u5916\u90e8\u5206\u6574\u4f53\u9ed1\u9ad8+1\uff0c\u8fd9\u65f6\u5c06\u7956\u7236\u6d82\u7ea2\uff0c\u6ee1\u8db3\u4e86\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff0c\u4f46\u662f\u4f1a\u9047\u5230\u7956\u7236\u7684\u7236\u4eb2\u662f\u7ea2\u8272\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u9700\u8981\u9012\u5f52\u5904\u7406</p> <p>\u8fd9\u4e5f\u662f\u63d2\u5165\u552f\u4e00\u9700\u8981\u8fed\u4ee3\u7684\u64cd\u4f5c</p> <p>Case 2</p> <p>\u53d4\u53d4\u7684\u989c\u8272\u662f\u9ed1\u8272\uff0c\u4e14\u63d2\u5165\u8282\u70b9\u9760\u8fd1\u53d4\u53d4\u8282\u70b9\uff0c\u6b64\u65f6\u65e0\u6cd5\u901a\u8fc7\u4f20\u9012\u7956\u7236\u7684\u9ed1\u8272\u7ef4\u6301\u9ed1\u9ad8\uff0c\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u5c06\u63d2\u5165\u8282\u70b9\u4e0e\u7236\u4eb2\u8fdb\u884c\u65cb\u8f6c\uff0c\u8fdb\u5165Case 3</p> <p>Case 3</p> <p>\u5148\u5c06\u7238\u7238\u67d3\u9ed1\uff0c\u7237\u7237\u67d3\u7ea2\uff0c\u6b64\u65f6\u5de6\u5b50\u6811\u7684\u9ed1\u9ad8\u6bd4\u53f3\u5b50\u6811\u7684\u9ed1\u9ad8\u591a1\uff0c\u56e0\u6b64\u8981\u8fdb\u884c\u53f3\u65cb\u8f6c\u5e73\u8861\u9ed1\u9ad8</p> <ul> <li>Delete</li> </ul> <p>\u603b\u4f53\u7684\u601d\u8def\u662f\u5c06\u5220\u9664\u8282\u70b9\u589e\u9ed1\uff0c\u7136\u540e\u901a\u8fc7\u8f6c\u79fb\u8fd9\u4e2a\u9ed1\u8272\u5230\u7236\u4eb2\u8282\u70b9\uff0c\u5728\u8fdb\u884c\u9ed1\u9ad8\u7684\u5e73\u8861\uff0c\u5f53\u7136\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5c31\u662f\u5220\u9664\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u8fd9\u65f6\u76f4\u63a5\u5220\u9664\u5373\u53ef\uff0c\u5176\u6b21\u5220\u9664\u8282\u70b9\u5220\u9664\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\uff08\u53ea\u80fd\u662f\u7ea2\u5b69\u5b50\uff09\u4ee3\u66ff\u4ed6\u7239\u540e\u53d8\u9ed1\u5373\u53ef</p> <p>\u7136\u540e\u6211\u4eec\u8ba8\u8bba\u5220\u9664\u8282\u70b9\u662f\u9ed1\u53f6\u5b50\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u53cc\u9ed1\u7684\u6982\u5ff5\uff0c\u5373\u5220\u9664\u53f6\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u90a3\u4e48\u5728\u5220\u9664\u5b83\u4e4b\u540e\u5c06\u5b83\u7684\u9ed1\u8272\u589e\u52a0\u52302\uff0c\u518d\u901a\u8fc7\u65cb\u8f6c\u548c\u67d3\u8272\u64cd\u4f5c\u5e73\u8861\u9ed1\u9ad8\uff0c\u6700\u540e\u5c06\u5176\u53d8\u4e3a\u5355\u9ed1NIL</p> <p>Case 1</p> <p>\u5220\u9664\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u7236\u4eb2\u4e5f\u662f\u9ed1\u8272\u4f46\u662f\u5144\u5f1f\u662f\u7ea2\u8272\uff0c\u6b64\u65f6\u5c06\u5144\u5f1f\u67d3\u9ed1\uff0c\u7236\u4eb2\u67d3\u7ea2\uff0c\u4f46\u662f\u8fd9\u6837\u4f1a\u4f7f\u9ed1\u9ad8\u53f3\u79fb\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u5de6\u65cb\u8f6c\uff0c\u65cb\u8f6c\u4e4b\u540e\u8fdb\u5165\u5230Case 2</p> <p>Case 2</p> <p>\u6b64\u65f6\u5144\u5f1f\u8282\u70b9\u7684\u989c\u8272\u662f\u9ed1\u8272\u4e14\u4f84\u5b50\u662f\u53cc\u9ed1\uff0c\u8fd9\u65f6\u5019\u7529\u9505\u7ed9\u7236\u4eb2\uff0c\u5c06\u7236\u4eb2\u67d3\u9ed1\uff0c\u6b64\u65f6\u53f3\u8def\u9ed1\u8272\u591a\u4e86\u4e00\u4e2a\uff0c\u7136\u540e\u5728\u5206\u7c7b\u8ba8\u8bba\uff0c\u7236\u8282\u70b9\u672c\u6765\u662f\u7ea2\u8272\u5c31\u7ed3\u675f\u4e86\uff0c\u67d3\u9ed1\u5373\u53ef\uff1b\u7236\u8282\u70b9\u672c\u6765\u662f\u9ed1\u8272\uff0c\u5c31\u7ee7\u7eed\u9012\u5f52</p> <p>\u6b64\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u6240\u5220\u9664\u7684\u8282\u70b9\u4e00\u76f4\u9012\u5f52\u5230\u6839\u8282\u70b9\u65f6\uff0c\u4e00\u8def\u4e0a\u90fd\u6ca1\u6709\u7ea2\u8272\u8282\u70b9\uff0c\u5c31\u4f1a\u8fdb\u5165\u5230Case 4\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c</p> <p>\u6211\u753b\u51fa\u4e86\u8fd9\u4e2a\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff1a</p> <p>\u8fd9\u65f6\u5019\u95ee\u9898\u51fa\u73b0\u4e86\uff0c\u5982\u679c\u4f84\u5b50\u6709\u7ea2\u8272\uff0c\u90a3\u4e48\u5728Case 2\u4e2d\u6211\u4eec\u5c06\u5144\u5f1f\u67d3\u7ea2\u7684\u64cd\u4f5c\u5c31\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u8fde\u7eed\u7ea2\u8272\uff0c\u8fd9\u5c31\u8fdb\u5165\u4e86Case 3</p> <p>Case 3</p> <p>\u8fdc\u4f84\u5b50\u662f\u9ed1\u8272\uff0c\u8fd1\u4f84\u5b50\u662f\u7ea2\u8272\uff0c\u6b64\u65f6\u5c06\u7ea2\u8272\u4f84\u5b50\u4e0e\u5176\u9ed1\u8272\u7236\u4eb2\u4e92\u6362\uff0c\u4f1a\u5bfc\u81f4\u5de6\u4f84\u5b50\u8fd9\u6761\u8def\u7684\u9ed1\u9ad8\u591a1\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u53f3\u65cb\u8f6c\uff0c\u7136\u540e\u8fd9\u65f6\u8fdc\u4f84\u5b50\u5c31\u662f\u7ea2\u8272\u4e86\uff0c\u8fdb\u5165Case 4</p> <p>Case 4</p> <p>\u8fd9\u4e2a\u60c5\u51b5\u662f\uff1aX\u662f\u5f85\u5220\u9664\u8282\u70b9\uff0c\u4ed6\u7684\u8eab\u4e0a\u6709\u4e24\u4e2a\u9ed1\u8272\u6807\u8bb0\uff0c\u4ed6\u7684\u5144\u5f1f\u662f\u9ed1\u7684\uff0c\u8fdc\u4f84\u5b50\u4e00\u5b9a\u662f\u7ea2\u7684\uff0c\u7236\u4eb2\u548c\u8fd1\u4f84\u5b50\u53ef\u7ea2\u53ef\u9ed1\uff0c\u8fd9\u65f6\u5019\u7684\u64cd\u4f5c\u6b65\u9aa4\uff1a</p> <ol> <li>\u5c06\u7236\u4eb2\u548c\u5144\u5f1f\u7684\u989c\u8272\u4e92\u6362\uff0c\u4e3a\u4e86\u907f\u514d\u7236\u4eb2\u662f\u7ea2\u8272\u5bfc\u81f4\u53f3\u4fa7\u51fa\u73b0\u8fde\u7eed\u7684\u7ea2\u8272\uff0c\u5c06\u4f84\u5b50\u67d3\u9ed1</li> <li>\u8fd9\u65f6\u5019\u7684\u9ed1\u9ad8\u53f3\u8fb9\u6709\u53ef\u80fd\u4e0d\u53d8\uff0c\u4e5f\u53ef\u80fd\u589e\u59271\u5411\u53f3\u8fb9\u503e\u659c\uff0c\u8fdb\u884c\u4e00\u6b21\u5de6\u65cb\u8f6c</li> <li>\u8fd9\u65f6\u5019\u5f85\u5220\u9664\u8282\u70b9\u5c31\u4f4d\u4e8e\u53f6\u8282\u70b9\u4e0a\u4e86\u5e76\u4e14\u9ed1\u9ad8\u4e5f\u5e73\u8861\u4e86\uff0c\u5c06\u5176\u5220\u9664\u5373\u53ef</li> </ol> <p>\u5982\u679c\u4ece\u9006\u5411\u7684\u89d2\u5ea6\u601d\u8003\uff0c\u5177\u5907\u76f4\u63a5\u5220\u9664\u4e00\u4e2a\u9ed1\u8272\u8282\u70b9\u7684\u6761\u4ef6\uff0c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u662f\u53f6\u8282\u70b9\u5e76\u4e14\u4ed6\u6240\u5728\u7684\u8def\u5f84\u4e0a\u9ed1\u9ad8\u591a\u4e86\u4e00\uff0c\u8fd9\u5c31\u662f\u4e00\u76f4\u5f80\u5de6\u8fb9\u585e\u9ed1\u8272\u7684\u539f\u56e0\uff0c\u5c31\u662f\u8981\u8ba9\u4ed6\u6210\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u7684\u8282\u70b9</p> <p>\u603b\u7ed3\uff1a</p> <ol> <li>\u5148\u770b\u5144\u5f1f\u662f\u4e0d\u662f\u9ed1</li> <li>\u518d\u770b\u4f84\u5b50\u6709\u6ca1\u6709\u7ea2</li> <li>\u4f84\u5b50\u6709\u7ea2\u770b\u8fdc\u4f84\u5b50</li> <li>\u8f6c\u5316\u5230\u8fdc\u4f84\u5b50\u4e3a\u7ea2</li> <li>\u8fdc\u4f84\u4e3a\u7ea2\u4e00\u987f\u64cd\u4f5c</li> </ol> <p>Number of Rotations:</p> AVL Red-Black Insertion \\(\\leq 2\\) \\(\\leq 2\\) Deletion \\(O(log n)\\) \\(\\leq 3\\)"},{"location":"notes/cs/algorithm/ads/ADS/#b-tree","title":"B+ Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_3","title":"Intro","text":"<p>B\u6811\u662f\u4e00\u79cd\u5e73\u8861\u7684\u6811\u72b6\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7528\u4e8e\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u6570\u636e\uff0c\u51cf\u5c11\u78c1\u76d8\u7684I/O\u6b21\u6570</p> <p>B-Tree with order B:</p> <ul> <li>\u7ed3\u6784\u6027\u8d28</li> </ul> <ol> <li>\u6839\u8282\u70b9\u8981\u4e48\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u67092\u5230B\u4e2a\u5b69\u5b50</li> <li>\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u6709\\(\\lceil \\frac{B}{2} \\rceil\\)\u5230\\(B\\)\u4e2a\u5b69\u5b50</li> <li>\u6240\u6709\u53f6\u5b50\u8282\u70b9\u5728\u540c\u4e00\u5c42</li> </ol> <ul> <li>\u6570\u503c\u6027\u8d28</li> </ul> <ol> <li>\u6570\u503c\u5168\u90e8\u5b58\u653e\u5728\u53f6\u5b50\u7ed3\u70b9</li> <li>\u975e\u53f6\u5b50\u7ed3\u70b9\u4e2d\u5b58\u50a8routing element\uff0c\u7528\u4e8e\u786e\u5b9a\u5b50\u6811\u4e2d\u6570\u503c\u7684\u5206\u5e03\uff0c\\(\\lceil B/2 \\rceil\\)\u5230\\(B\\)\u4e2a\u5b69\u5b50,\u79f0\u4e3a\u4ed6\u7684fanout</li> <li>\u975e\u53f6\u5b50\u8282\u70b9\u4e2d\u7684\u5143\u7d20\u4e2a\u6570+1=\u5b69\u5b50\u4e2a\u6570</li> <li>\u53f6\u5b50\u8282\u70b9\u5b58\u7684\u5143\u7d20\u4e2a\u6570\u5728\\(\\lceil B/2 \\rceil\\)\u5230\\(B\\)\u4e4b\u95f4\uff0c\u6839\u8282\u70b9\u4f5c\u4e3a\u53f6\u5b50\u65f6\u53ef\u4ee5\u5b58\u50a81\u5230B\u4e2a\u5143\u7d20</li> <li>\u4e00\u4e2a\u5b58\u50a8\u4e86\\(K\\)\u4e2a\u5143\u7d20\\(e_1,e_2,e_3,e_4,e_K\\)\u7684internal node \u6709\\(v_1,v_2,v_3,v_4,v_K\\)\u8fd9\u4e9b\u53f6\u5b50\u7ed3\u70b9\uff1a</li> </ol> \\[ e_i=minimun\\ element\\ in\\ leaves\\ under\\ v_{i+1} \\] \\[ for\\ keys\\ in\\ leaves\\ i\\ in\\ v_i: Tv_1 \\leq ... \\leq Tv_K \\] <p>\u8865\u5145\u7684\u6027\u8d28\uff1aN\u8868\u793a\u5143\u7d20\u4e2a\u6570</p> <ol> <li>leaves \\(\\leq N/ \\lceil B/2 \\rceil\\)</li> <li>nodes \\(\\leq 2N/ \\lceil B/2 \\rceil\\)</li> <li>elements \\(\\leq 2N\\) \u8fd9\u91cc\u7528nodes\u6570\u4e58B\u5f97\u5230\u7684\u4f3c\u4e4e\u662f4N\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u5b58\u50a8\u7684\u6570\u503c\u5168\u90e8\u662f\u5143\u7d20\u7684\u526f\u672c\uff0c\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc72N</li> <li></li> </ol> \\[ { Height }=\\log _{\\lceil B/2 \\rceil} \\frac{N}{\\lceil R / 2\\rceil} \\leqslant \\log _{\\lceil B / 2\\rceil} N=\\frac{\\log _2 N}{\\log _2 B-1} \\leqslant O(\\log_B N) \\] <p>\u8fd9\u610f\u5473\u7740B\u6811\u7684\u9ad8\u5ea6\u662f\u975e\u5e38\u4f4e\u7684\uff08\u76f8\u8f83\u4e8e\u4e8c\u53c9\u6811\u7684\\(O(\\log_2 N)\\)\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u51cf\u5c11\u78c1\u76d8\u7684I/O\u6b21\u6570</p> <p></p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_3","title":"Operation","text":"<ul> <li>FindKey</li> </ul> <p>\u5bf9routing element\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u53f6\u5b50\u8282\u70b9\u8fdb\u884c\u4e8c\u5206\u67e5\u627e</p> <p>\u8fd9\u6837\u5f97\u5230\u7684CPU\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u589e\u52a0B\u6811\u7684\u9636\u6570\u4e0d\u4f1a\u6539\u53d8\u67e5\u627e\u65f6\u95f4</p> <p>\u78c1\u76d8\u7684I/O\u6b21\u6570\u4e3a\\(O(\\log_B N)\\)</p> <ul> <li>InsertKey</li> </ul> <p>\u5bf9\u4e8e\u6ca1\u6709\u6ee1\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u63d2\u5165\u5373\u53ef\uff0c\u5982\u679c\u6ee1\u4e86\uff0c\u5219\u9700\u8981\u8fdb\u884c\u5206\u88c2\u64cd\u4f5c\uff0c\u5c06\u8282\u70b9\u5206\u88c2\u4e3a\u4e24\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u4e2d\u95f4\u7684\u5143\u7d20\u66f4\u65b0\u5230\u7236\u8282\u70b9\uff0c\u5982\u679c\u7236\u8282\u70b9\u4e5f\u6ee1\u4e86\uff0c\u5219\u9700\u8981\u8fdb\u884c\u9012\u5f52\u64cd\u4f5c\uff0c\u76f4\u5230\u6839\u8282\u70b9</p> <p>\u6709\u4e00\u4e2a\u5c0f\u7684\u4f18\u5316\u63aa\u65bd\u662f\u5728\u81ea\u5df1\u6ee1\u5458\u5144\u5f1f\u672a\u6ee1\u7684\u65f6\u5019\uff0c\u5c06\u5143\u7d20\u79fb\u52a8\u5230\u5144\u5f1f\u8282\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u5206\u88c2\u7684\u6b21\u6570\uff0c\u5b9e\u73b0\u65f6\u9700\u8981\u5b9a\u4f4d\u5230\u5144\u5f1f\u8282\u70b9\uff0c\u56e0\u6b64\u6dfb\u52a0\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5144\u5f1f\u8282\u70b9\uff0c\u4f46\u662f\u8fd9\u4e2a\u64cd\u4f5c\u53ea\u4f1a\u505c\u7559\u5728\u5171\u4eab\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u8282\u70b9\u4e4b\u95f4\uff0c\u800c\u907f\u514d\u904d\u5386\u6240\u6709\u8282\u70b9</p> <p>CPU\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(B\\log_B N)\\)\uff0c\u78c1\u76d8\u7684I/O\u6b21\u6570\u4e3a\\(O(\\log_B N)\\)</p> <ul> <li>DeleteKey</li> </ul> <p>\u5220\u9664\u64cd\u4f5c\u4e0e\u63d2\u5165\u7c7b\u4f3c\uff0c\u5f53\u6240\u5728\u7684\u53f6\u5b50\u8282\u70b9\u5728\u5220\u9664\u5f53\u524d\u5143\u7d20\u540e\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8e\\(\\lceil B/2 \\rceil\\)\uff0c\u5219\u9700\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff0c\u5de6\u53f3\u8282\u70b9\u6709\\(\\geq \\lceil B/2 \\rceil+1\\)\uff0c\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u501f\u4e00\u4e2a\u5143\u7d20\u8fc7\u6765\uff0c\u5426\u5219\u9700\u8981\u5c06\u5f53\u524d\u8282\u70b9\u4e0e\u5de6\u5144\u5f1f\u6216\u53f3\u5144\u5f1f\u5408\u5e76</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u63d2\u5165\u76f8\u540c</p>"},{"location":"notes/cs/algorithm/ads/ADS/#leftist-tree","title":"Leftist Tree","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_4","title":"Intro","text":"<p>\u6ee1\u8db3\u6700\u5c0f\u5806\u7684\u4f20\u7edf\u6027\u8d28\uff0c\u5373\u7236\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5b50\u8282\u70b9\u7684\u503c</p> <p>\u540c\u65f6\u6ee1\u8db3\u5de6\u5f0f\u5806\u7684\u6027\u8d28\uff1a</p> <p>\u4efb\u610f\u4e00\u4e2a\u8282\u70b9x\u5230\u4e00\u4e2a \u6ca1\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u8282\u70b9 \u7684\u8ddd\u79bb\u79f0\u4e3a\u8282\u70b9\u7684null path length\uff0c\u8bb0\u4f5c\\(npl(x)\\)\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u7684\u8282\u70b9\uff0c\\(npl(x)=1+\\min(npl(lc),npl(rc))\\)\uff0c\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff0c\\(npl(x)=0\\)\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\\(npl(null)=-1\\)</p> <p>\u4e00\u4e2a\u6ca1\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u8282\u70b9</p> <p>\u8fd9\u91cc\u6ce8\u610f\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u90a3\u4e48\u65e0\u8bba\u4ed6\u7684\u8fd9\u4e2a\u5b69\u5b50\u6709\u591a\u957f\uff0c\u4ed6\u7684null path length\u90fd\u662f0\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9a\u4e49\u4e86\u7a7a\u8282\u70b9\u7684null path length\u4e3a-1\uff0c\u800c\u8ba1\u7b97\u65f6\uff1a</p> \\[ npl(x)=1+\\min(npl(lc),npl(rc))=1+(-1)=0 \\] <p>\u5728\u5de6\u5f0f\u5806\u4e2d\uff0c\\(npl(lc(x)) \\geq npl(rc(x))\\)\uff0c\u5373\u5de6\u5b69\u5b50\u7684null path length\u603b\u662f\u5927\u4e8e\u7b49\u4e8e\u53f3\u5b69\u5b50\u7684null path length\uff0c\u56e0\u6b64\uff0c\u5de6\u5f0f\u5806\u4e5f\u88ab\u79f0\u4e3a\u5de6\u504f\u6811</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u6709n\u8282\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u82e5\u6ee1\u8db3\u5de6\u5f0f\u5806\u7684\u6027\u8d28\uff0c\u5219\u6709\\(npl(root) \\leq \\log_2(n+1)\\)\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3ar\u7684right path\uff0c\u81f3\u5c11\u6709\\(2^r-1\\)\u4e2a\u8282\u70b9</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_4","title":"Operation","text":"<ul> <li>Merge(H1, H2)</li> </ul> Merge Example <ul> <li>DeleteMin(pointer to u)</li> </ul>"},{"location":"notes/cs/algorithm/ads/ADS/#skewed-heap","title":"Skewed Heap","text":""},{"location":"notes/cs/algorithm/ads/ADS/#intro_5","title":"Intro","text":"<p>\u5f88\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7a7a\u95f4\u7ef4\u62a4null path length\uff0c\u53ea\u9700\u8981\u5728\u6bcf\u6b21\u5408\u5e76(\u9012\u5f52\u8fd4\u56de)\u7684\u65f6\u5019\u5bf9\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\u8fdb\u884c\u4e00\u6b21\u65cb\u8f6c\u5373\u53ef</p> <p>\u53ef\u4ee5\u770b\u4f5c\u662fself-adjusting leftist heap</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_5","title":"Operation","text":"<ul> <li>Merge(H1, H2)</li> </ul> <p>\u5728\u64cd\u4f5c\u65f6\u4e0d\u8fdb\u884cnpl\u7684\u6bd4\u8f83\uff0c\u76f4\u63a5\u5de6\u53f3\u4e92\u6362\uff0c\u5176\u4f59\u64cd\u4f5c\u4e0e\u5de6\u5f0f\u5806\u76f8\u540c</p> <p>\u4e0d\u652f\u6301\u5220\u9664\u548cdecrease key\u64cd\u4f5c</p> Skewed Heap Merge Example <p></p>"},{"location":"notes/cs/algorithm/ads/ADS/#inverted-file-index","title":"Inverted File Index","text":"<p>\u5b9e\u73b0\u641c\u7d22\u5f15\u64ce\u7684\u65b9\u6cd5\uff1a</p> <p>\u6ca1\u600e\u4e48\u542c\u3002\u3002\u3002</p>"},{"location":"notes/cs/algorithm/ads/ADS/#binomial-queue","title":"Binomial Queue","text":"<p>Heap-Ordered Tree: \u6ee1\u8db3\u5806\u6027\u8d28\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5305\u62ecMin-Heap Max-Heap</p> <p>Priority Queue:\u4e0d\u6309\u7167\u961f\u5217\u5148\u8fdb\u5148\u51fa\u7684\u987a\u5e8f\uff0c\u800c\u662f\u6309\u7167\u67d0\u79cd\u4f18\u5148\u7ea7\u8fdb\u51fa</p> <p>\u4e8c\u9879\u961f\u5217\u4e0d\u662f\u5355\u72ec\u7684\u4e00\u68f5\u6811\uff0c\u800c\u662f\u4e00\u4e2a\u68ee\u6797</p> <p>\u68ee\u6797\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6811\u88ab\u79f0\u4e3a\u4e8c\u9879\u6811 binomial tree \u5e76\u5b9a\u4e49\u6811\u7684\u9ad8\u5ea6\uff0c\u9ad8\u5ea6\u4e3a0\u7684\u6811\u662f\u7531\u4e00\u4e2a\u8282\u70b9\u6784\u6210</p> <p>\u9ad8\u5ea6\u4e3ak\u7684\u6811\u662f\u7531\u4e24\u4e2a\u9ad8\u5ea6\u4e3ak-1\u7684\u6811\u5408\u5e76\u800c\u6210\uff0c\u5728\u8fd9\u91cc\u5408\u5e76\u65f6\uff0c\u6839\u8282\u70b9\u6700\u5c0f\u7684\u6811\u4f5c\u4e3a\u65b0\u7684\u6839\u8282\u70b9\uff0c\u540c\u65f6\u5c06\u53e6\u4e00\u4e2a\u6811\u4f5c\u4e3a\u65b0\u7684\u6839\u8282\u70b9\u7684\u5b69\u5b50\uff0c\u4e5f\u5c31\u662f\u8bf4\u53e6\u5916\u4e00\u68f5\u6811\u662f\u76f4\u63a5\u8fde\u63a5\u5230\u6839\u8282\u70b9\u4e0a\u7684</p> <p></p> <p>\\(B_k\\)\u8868\u793a\u9ad8\u5ea6\u4e3ak\u7684\u4e8c\u9879\u6811\uff0c\\(B_k\\)\u6709\\(2^k\\)\u4e2a\u8282\u70b9\uff0c\u6839\u8282\u70b9\u7684\u5ea6\u6570\u4e3ak\uff0c\u6839\u7684\u5b69\u5b50\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u4e3a\\(B_{k-1},B_{k-2},...B_0\\)\uff0c\u5728d\u6df1\u5ea6\u5c42\u6709\\(\\binom{k}{d}\\)\u4e2a\u8282\u70b9</p> <p>\u6027\u8d28\uff1a BQ \u4e2d\u6bcf\u4e2a\u9ad8\u5ea6\u7684\u6811\u81f3\u591a\u6709\u4e00\u68f5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e00\u4e2aBQ\u90fd\u53ef\u4ee5\u88ab\u552f\u4e00\u7684\u8868\u793a\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5206\u89e3</p>"},{"location":"notes/cs/algorithm/ads/ADS/#operation_6","title":"Operation","text":"<ul> <li>FindMin</li> </ul> <p>\u6bcf\u4e2a\u4e8c\u9879\u6811\u7684\u6839\u8282\u70b9\u90fd\u662f\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u4e8c\u9879\u6811\u7684\u6839\u8282\u70b9\u5373\u53ef\u627e\u5230\u6700\u5c0f\u503c\uff0c\u800c\u4e00\u4e2an\u4e2a\u8282\u70b9\u7684BQ\u4e2d\uff0c\u6700\u591a\u6709\\(\\lceil \\log_2 n \\rceil + 1\\)\u68f5\u6811\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\log n)\\)</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u9700\u8981\u9891\u7e41\u7684\u8fdb\u884cFindMin\u64cd\u4f5c\uff0c\u5219\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u503c\u7684\u6307\u9488\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\\(O(1)\\)</p> <ul> <li>Merge</li> </ul> <p>\u601d\u8def\u5c31\u662f\u4e8c\u8fdb\u5236\u52a0\u6cd5\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u5355\u72ec\u5b58\u5728\u7684\u4e8c\u9879\u6811\u4fdd\u7559\uff0c\u540c\u65f6\u5b58\u5728\u7684\u4e8c\u9879\u6811\u5408\u5e76\u6210\u4e3a\u5c42\u6570+1\u7684\u65b0\u7684\u4e8c\u9879\u6811</p> <p>\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(\\log 1)\\)\uff0c\u603b\u5171\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\log n)\\)</p> <ul> <li>DeleteMin</li> </ul> <p>\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\u6240\u5728\u7684\u4e8c\u9879\u6811\\(O(\\log n)\\)\uff0c\u5c06\u8fd9\u4e2a\u6811\u5355\u72ec\u62ff\u51fa\u6765\\(O(\\log n)\\)\uff0c\u53bb\u9664\u6839\u8282\u70b9\\(O(\\log n)\\)\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684BQ\uff0c\u8fd9\u4e2a\u65b0\u7684BQ\u4e0e\u4e4b\u524d\u5269\u4e0b\u7684\u6811\u8fdb\u884c\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\log n)\\)</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u4e8c\u9879\u961f\u5217\u4e2d\u6bcf\u4e00\u4e2a\u4e8c\u9879\u6811\u7684\u5b9e\u73b0\u662f\u901a\u8fc7\u5de6\u5b69\u5b50\u53f3\u5144\u5f1f\u7684\u8868\u793a\u65b9\u6cd5\u5b9e\u73b0\u7684</p> <p>\u8fde\u7eed\u7684\u63d2\u5165\u64cd\u4f5c\uff1a\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n)\\)</p> Proof <p></p> <p></p> <p>2-c\u7684\u63a8\u5bfc\uff1a</p> <p>\u56e0\u4e3a\u6bcfc\u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u88ab\u5206\u89e3\u4e3a1\u6b21\u7684step\u548cc-1\u6b21\u7684\u5408\u5e76\uff0c\u800c\u5408\u5e76\u589e\u52a0\u7684\u6811\u7684\u4e2a\u6570\u662f-1\uff0c\u6240\u4ee5\u5f97\u52302-c</p>"},{"location":"notes/cs/algorithm/fds/fds/","title":"Fundamentals of Data Structure","text":"<p>\u9519\u9898\u96c6\uff1a</p> <ol> <li>For a sequentially stored linear list of length N, the time complexities for deleting the first element and inserting the last element are O(1) and O(N), respectively.</li> </ol> <p>A\uff1aFalse</p> <p>R\uff1asequencial --&gt; \u987a\u5e8f\u6620\u5c04 \u4e00\u5b9a\u662f\u6570\u7ec4 \u4e0d\u662f\u94fe\u8868</p> <p>\u987a\u5e8f\u6620\u5c04\u5c31\u662f\u5730\u5740\u6309\u987a\u5e8f\u8fde\u63a5\uff0c\u77e5\u9053\u7b2c\u4e00\u4e2a\u5c31\u77e5\u9053\u5176\u4ed6\u6240\u6709</p> <p>\u94fe\u8868\u5219\u4e0d\u77e5\u9053\uff0c\u4f46\u597d\u5904\u662f\u968f\u65f6\u8981\u5230\u7a7a\u95f4\uff0c\u4f46\u662f\u5360\u7528\u5185\u5b58\u8fc7\u591a\u65f6\u4e0d\u80fd\u7ed9\u51fa\u8fde\u7eed\u5927\u7247\u7a7a\u95f4</p> <ol> <li>If the most commonly used operations are to visit a random position and to insert and delete the last element in a linear list, then which of the following data structures is the most efficient?</li> </ol> <p>A. doubly linked list</p> <p>B. singly linked circular list</p> <p>C. doubly linked circular list with a dummy head node\uff08\u597d\u5904\u662f\u53ef\u4ee5\u524d\u8fdb\u540e\u9000\uff09</p> <p>D. sequential list</p> <p>A\uff1aD</p> <p>R\uff1aRandom access--&gt;\u4e00\u5b9a\u662f\u6570\u7ec4 </p> <p>\u94fe\u8868\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5730\u5740\u90fd\u50a8\u5b58\u5728\u524d\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u65e0\u6cd5\u8fbe\u6210\u968f\u673a\u8bbf\u95ee\uff0c\u53ea\u80fd\u6709\u4e00\u6b65\u77e5\u9053\u4e0b\u4e00\u6b65\u7684\u5730\u5740</p> <ol> <li>To merge two singly linked ascending lists, both with N nodes, into one singly linked ascending list, the minimum possible number of comparisons is:</li> </ol> <p>A\uff1aN </p> <p>R\uff1a\u7b2c\u4e00\u4e2a\u5143\u7d20\u6bd4\u8f83a1\u6b21\u540e\u63d2\u5165\uff0c\u7b2c\u4e8c\u4e2a\u6bd4a2\u6b21\u2026\u2026</p> <p>\u76f4\u5230a1+a2+\u2026\u2026 = N\u540e\uff0c\u5176\u4ed6\u7684\u5143\u7d20\u4e0d\u7528\u6bd4\u8f83\u76f4\u63a5\u653e\u5728\u6700\u540e\u9762\u5373\u53ef \u6781\u7aef\u60c5\u51b5\u662f\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6bd4\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u5c0f\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u6bd4\u8f83N\u6b21\u540e\uff0c\u5176\u4ed6\u5143\u7d20\u5168\u90e8\u63d2\u5728\u540e\u9762\uff0c\u4e5f\u540c\u6837\u662fN\u6b21</p> <ol> <li>It is always possible to represent a tree by a one-dimensional integer array.</li> </ol> <p>A: T</p> <ol> <li>If a general tree T is converted into a binary tree BT, then which of the following BT traversals gives the same sequence as that of the post-order traversal of T?</li> </ol> <p>A: In order traversal. \u627e\u4e00\u4e2a\u6811\u7684\u4f8b\u5b50\u8bd5\u4e00\u4e0b</p> <ol> <li>In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</li> </ol> <p>A: T</p> <ol> <li>\u5224\u65adBST decision tree \u7684\u5408\u6cd5\u6027\uff1a\u5bf9\u5076\u6570\u6765\u8bf4\u4e00\u5b9a\u5de6\u53f3\u5e73\u8861 \u5947\u6570\u662f\u81ea\u5df1\u9009\u5b9a\u8d70\u5de6\u8fb9\uff08\u6216\u8005\u53f3\u8fb9\uff09\uff0c\u9009\u5b9a\u597d\u4e86\u4e00\u5b9a\u5bf9\u6bcf\u4e2a\u5b50\u6811\u6765\u8bf4\u90fd\u662f\u5de6\u8fb9\u5927\u4e8e\u53f3\u8fb9\uff08\u6216\u8005\u76f8\u53cd\uff09\u4e0d\u4f1a\u524d\u540e\u77db\u76fe</li> </ol>"},{"location":"notes/cs/algorithm/fds/fds/#lec-00","title":"Lec 00","text":"<p>3 types of structures </p> <p>sorting</p> <p>hash</p> <p>preparing for ads(queue stack)</p> <p>further studying</p> <p>\u6d4b\u8bd5\u6570\u636e\u7684\u8981\u6c42\uff1a</p> <ol> <li>\u5206\u652f\u6d4b\u8bd5\uff1a\u5bf9\u6bcf\u4e2aif-else\u90fd\u8981\u8fdb\u5165</li> <li>\u8fb9\u754c\u6d4b\u8bd5\uff1a\u6570\u636e\u8303\u56f4\u7684\u6700\u503c</li> </ol> <p>\u200b   \u9700\u8981\u5728\u6700\u5927\u6570\u636e\u65f6\u627e\u5230\u6700\u5feb\u6570\u636e\u548c\u6700\u6162\u6570\u636e</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-01-algorithm-analysis","title":"Lec 01 Algorithm Analysis","text":"<p>Time &amp; space complexity : machine and compiler independent</p> <p>mostly about time </p> <p>Assumption:</p> <ul> <li>instructions are excuted sequential </li> <li>simple instruct</li> <li>integer size is fixed and infinite memory</li> </ul> <p>usually analyzing the average and worst cases time </p> <p>O: worst case(take the smallest f(N) to illustrate )</p> <p>Tx &lt;= Cfx</p> <p>\u03a9: best case(take the largest f(N) to illustrate )</p> <p>Tx &gt;= Cfx</p> <p>\u00f8: completely same</p> <p>Tx = Ofx = \u03a9fx</p> <p>o: infinitely related to O</p> <p>operation:</p> <p>T1 + T2 = maxone </p> <p>T1*T2 = multiple</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-02","title":"Lec 02","text":"<p>Q:\u6c42\u5df2\u77e5\u6570\u5217\u7684\u6700\u5927\u5b50\u5217</p> <ol> <li>\u66b4\u529b\u7a77\u4e3e O(N^3)</li> <li>\u4f18\u5316this sum\u6c42\u6cd5 \u51cf\u5c11\u4e00\u7ec4\u5faa\u73af</li> <li>Divide and conquer O(nlogn)</li> <li>On-line Algorithm\u4e0d\u8d70\u56de\u5934\u8def</li> </ol> <pre><code>this = max = 0\nfor(...): \n\u200b   if:this &gt; max: max = this \n    else if: this &lt; 0: this = 0\n</code></pre> <p>Q:binery search</p> <p>use loop O(logn)</p> <ul> <li>usually used in  static and ordered data </li> </ul>"},{"location":"notes/cs/algorithm/fds/fds/#lec-04-adt","title":"Lec 04 ADT","text":"<p>Data type = object + operation </p> <p>Abstract: </p> <p>representation is separated from implementation </p> <p>each operation is isolated </p>"},{"location":"notes/cs/algorithm/fds/fds/#polynomial-adt","title":"Polynomial ADT","text":"<p>coefficient and exponent </p> <pre><code>typedef struct // array way\n{\n  int Coeffientarray[maxdegree + 1];\n  int HighPower;\n}*Polynomial;\n</code></pre> <p>(X) when poly is sparse but the operation is dense</p> <pre><code>typedef struct poly_node *poly_ptr;\nstruct poly_node\n{\n  int Coe;\n  int Exp;\n  poly_ptr next;\n};\ntypedef *poly_ptr a;\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#multilists","title":"Multilists","text":""},{"location":"notes/cs/algorithm/fds/fds/#lec-05-linear-list","title":"Lec 05 Linear List","text":""},{"location":"notes/cs/algorithm/fds/fds/#stack-adt","title":"Stack ADT","text":"<p>\u5e2e\u52a9\u7cfb\u7edf\u4e34\u65f6\u5b58\u653e\u6216\u8005\u8c03\u6574\u987a\u5e8f\u6240\u7528\u7684\u5de5\u5177</p> <p>Last in First out(LIFO)\u540e\u8fdb\u5148\u51fa</p> <p>\u53ea\u80fd\u5bf9\u6808\u9876\u8fdb\u884c\u64cd\u4f5c</p> <p>Objects\uff1aA finite ordered list </p> <p>Operations:</p> <p>Judge Empty: </p> <p>Stack: </p> <p>Dispose: </p> <p>MakeEmpty: </p> <p>Push: give a new element in</p> <p>Top: look at the top element</p> <p>Pop: take out the top element and delete it </p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation","title":"Implementation","text":"<ul> <li>Linked List(with a header): from top to down</li> </ul> <p>\u7528\u94fe\u8868\u5b9e\u73b0\u65f6 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f4d\u4e8estack\u7684top</p> <p>head\u53ef\u4ee5\u7406\u89e3\u4e3astack\u5916\u7684\u4e00\u5757\u5185\u5b58\uff0cs\u662fhead\u7684\u540d\u5b57\uff0c\u5c31\u662f\u8fd9\u4e2ahead\u5757 \u8d77\u5230\u5b9a\u4f4d\u4f5c\u7528\uff08\u5730\u5740\uff09</p> <p>s-&gt;next = first element in stack </p> <pre><code>//push:\n  Tem-&gt;next = s-&gt;next\n  s-&gt;next = Tem\n//top\n  return s-&gt;next-&gt;element\n//pop:\n  first = s-&gt;next//\u786e\u5b9a\u7b2c\u4e00\u5757\u7684\u4f4d\u7f6e\n  s-&gt;next = s-&gt;next-&gt;next\n  free(first)\n</code></pre> <p>But malloc and free are expensive </p> <p>Solution: use a recycle bin</p> <ul> <li>Array:  much better  when knowing size</li> </ul> <pre><code>struct Stack\n{\n  int Capacity;//size\n  int Topofstack;//the top pointer's location\n\n  //\u6b64\u5904\u7684pointer \u4e0d\u4ec5\u4ec5\u6307c\u7684pointer\uff0c\u662f\u4e00\u4e2a\u50a8\u5b58\u5730\u5740\u7684\u7b26\u53f7\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0b\u6807\u7b49\u7b49\n  //\u53ea\u8981\u5b58\u653e\u7684\u662f \u4f4d\u7f6e \u90fd\u53ef\u4ee5\u662f\u6307\u9488\n  ElementType *Array;//category of element\n};\n</code></pre> <p>\u6dfb\u52a0\u5143\u7d20\u65f6top++\uff0c\u5220\u9664\u5143\u7d20\u65f6top--\uff0c\u6307\u9488\u5411\u4e0b\u79fb\u52a8\uff0c\u4f46\u662f\u53ea\u662f\u6570\u503c\u51cf\u5c0f\uff0c\u5e76\u4e0d\u4f1afree\u4e0a\u65b9\u7684\u5143\u7d20\uff0c\u53ea\u662f\u5f53\u4f5c\u4ed6\u4eec\u4e0d\u5b58\u5728</p> <p>eg: Balancing Symbols check if () and [] and {} are balanced</p> <p>\u4ece\u5de6\u5230\u53f3\u4e00\u76f4\u770b\u5de6\u62ec\u53f7\uff0c\u9047\u89c1\u7684\u7b2c\u4e00\u4e2a\u53f3\u62ec\u53f7\u4e00\u5b9a\u662f\u548c\u5de6\u62ec\u53f7\u5339\u914d\u7684\uff0c\u6b64\u65f6\u5220\u9664\u8fd9\u4e00\u5bf9\u62ec\u53f7\uff0c\u63a5\u7740\u7ee7\u7eed\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u8bfb\u5b8c\u6574\u4e2a\u8f93\u5165\uff0c\u5982\u679c\u6808\u5185\u4e3a\u7a7a\uff0c\u5219balance</p> <pre><code>Algorithm\n{\n  Stack S;\n  InitializeStack(S);\n  while (more input)\n  {\n    read a character c;\n    if (c is an opening symbol)\n      push(c, S);\n    else if (c is a closing symbol)\n      if (StackIsEmpty(S))\n        return (unbalanced);\n      else\n      {\n        t = top(S);\n        pop(S);\n        if (t does not match the corresponding opening symbol of c)\n          return (unbalanced);\n      }\n  }\n  if (StackIsEmpty(S))\n    return (balanced);\n  else\n    return (unbalanced);\n}\n</code></pre> <p>eg\uff1aPostfix Expression a+b-cd = ab+cd- a(b+c)/d = abc+d/</p> <p>Method:</p> <ul> <li>when meeting oprand, push into stack</li> <li>when meeting operator, pop two oprand and calculate, then push the result into stack</li> </ul> <p>solution to () never pop a ( until you meet a )</p> <p>eg: Function calls: system stack</p> <p>stack pointer: to the top of the stack</p> <p>function pointer: to the bottom of the current function frame</p> <p>infix to postfix</p> <p>\u8f93\u5165\u4e00\u6bb5\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u8f6c\u6362\u5230\u540e\u7f00\u8868\u8fbe\u5f0f</p> <p>\u9047\u89c1operands\u76f4\u63a5\u8f93\u51fa\uff0c\u9047\u89c1operators\u5148\u653e\u8fdb\u6808\u5185\uff0c\u7ee7\u7eed\u8f93\u51fa\u6570\u5b57\uff0c\u9047\u89c1\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u65f6\uff0c\u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u7684\u4f18\u5148\u7ea7\uff1a</p> <ol> <li> <p>\u6808\u5185\u7684\u5927\u4e8e\u7b49\u4e8e\u6808\u5916\u7684\uff0cpop\u6808\u5185\u7684\uff0c\u4e0e\u6808\u5185\u4e0b\u4e00\u4e2a\u8fdb\u884c\u6bd4\u8f83</p> </li> <li> <p>\u6808\u5916\u7684\u5927\u4e8e\u6808\u5185\u7684\uff0c\u7ee7\u7eedpush</p> </li> <li> <p>\u9047\u89c1\u62ec\u53f7\uff1a</p> </li> </ol> <p>\u6808\u5916\u7684\u62ec\u53f7\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u76f4\u63a5\u8fdb\u5165\uff0c\u9047\u89c1\u6709\u62ec\u53f7\u65f6\u5f39\u51fa\u62ec\u53f7\u5f80\u4e0a\u7684\u6240\u6709operators\uff0c\u6539\u53d8\u62ec\u53f7\u4f18\u5148\u7ea7\u65b9\u6cd5\uff1a</p> <ol> <li>\u7528\u6761\u4ef6\u5224\u65ad</li> <li>\u8bbe\u7f6e\u4e24\u5957\u62ec\u53f7\uff0c\u6808\u5185\u4e00\u5957\uff0c\u6808\u5916\u4e00\u5957</li> </ol>"},{"location":"notes/cs/algorithm/fds/fds/#queue-adt","title":"Queue ADT","text":"<p>\u4fdd\u6301\u987a\u5e8f\u4f7f\u7528</p> <p>First in First out(FIFO)</p> <p>Objects: A finite ordered list</p> <p>Operations: ...</p> <p>Enqueue: add a new element to the end of the queue</p> <p>Front: take out the first element</p> <p>Dequeue: take out the first element</p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_1","title":"Implementation","text":"<ul> <li>Array</li> </ul> <pre><code>struct QueueRecord\n{\n  int Capacity;// max size\n  int Front;// the first element\n  int Rear;// the last element\n  int Size;// current size\n  ElementType *Array;\n};\n</code></pre> <ul> <li>Circular Array</li> </ul> <p>Note: To defferentiate the empty and full, we need to waste one space, which means the max size is n-1</p> <p>Another method is to use a flag to indicate the empty and full</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-06-tree","title":"Lec 06 Tree","text":"<p>A collection of nodes.</p> <p>Consists:</p> <ol> <li>a distinguished node r, called root </li> <li>and zero or more nonempty (sub)tree</li> </ol> <ul> <li>subtrees must not connect together</li> <li>there are N -1 edge with N nodes </li> </ul> <p>degree:</p> <p>the numbers of subtrees of a node </p> <p>degree of a tree is max of all degrees </p> <p>children:</p> <p>directly connected ones(not all descents)</p> <p>siblings:</p> <p>children of the same parent</p> <p>leaf:</p> <p>degree 0 node</p> <p>path:</p> <p>a unique sequence of nodes</p> <p>length:</p> <p>the edges number</p> <p>depth:</p> <p>length of the unique path from the root</p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_2","title":"Implementation","text":"<ol> <li>first child next sibling</li> </ol> <ol> <li>binary tree</li> </ol> <p>eg </p> <ul> <li>expression tree:</li> </ul> <p>\u5148\u8fdb\u884c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff1a</p> <p>\u5229\u7528\u5806\u6808\u9012\u5f52\u5b9e\u73b0\uff1a</p> <p>\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u9047\u89c1operand push\uff0c\u9047\u89c1operator pop\u51fa\u6808\u5185\u7684\u4e24\u4e2a\u5143\u7d20\u5f62\u6210\u4e00\u4e2a\u6811\uff0c\u518d\u5c06\u8fd9\u4e2a\u6811\u7684root push\u8fdb\u5806\u6808\u4f5c\u4e3a\u540e\u7eed\u5f62\u6210\u6811\u7684\u5143\u7d20</p> <p>--&gt;\u6808\u5185\u7684\u5143\u7d20\u5c31\u662ftree</p> <ul> <li>tree traversal:</li> </ul> <p>\u91c7\u7528\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5preorder \u4e5f\u53ef\u4ee5postorder</p> <p>preorder\uff1a\u5148\u64cd\u4f5c\u518d\u9012\u5f52</p> <p>postorder\uff1a\u5148\u9012\u5f52\u518d\u64cd\u4f5c</p> <p>\u9664\u6b64\u4e4b\u5916\uff1a\u5c42\u5e8f\u904d\u5386 level order\uff1a</p> <p>\u7528queue\u5b9e\u73b0</p> <p>\u5c06\u6bcf\u4e00\u5c42\u7684node\u5168\u90e8\u8f93\u51fa\u540e\u8fdb\u5165\u4e0b\u4e00\u5c42</p> <ol> <li>\u5f53\u524d\u5c42\u5143\u7d20\u5168\u90e8enqueue</li> <li>queue\u4e0d\u4e3a\u7a7a\u65f6\uff1a</li> <li>dequeue\u4e00\u4e2a\u5143\u7d20</li> <li>enqueue\u8fd9\u4e2a\u5143\u7d20\u7684node</li> </ol> <pre><code>void levelorder(tree){\nenqueue(tree)\n    while(queue is not empty){\n        visit(T = dequeue())\n        for(each child C of T)\n            enqueue(C)\n    }\n}\n</code></pre> <p>inorder(only in binary tree)</p> <p>\u5148\u5de6\u540e\u53f3\u9012\u5f52</p> <p>for binary inorder:</p> <pre><code>void inorder(tree){\n  if Node == NULL\n    return;\n  inorder(tree-&gt;left);\n    printf tree-&gt;data;\n  inorder(tree-&gt;right);\n}\n</code></pre> <ul> <li>file structure</li> </ul> <ol> <li>\u6309\u7167\u5c42\u7ea7tab</li> </ol> <p>\u91c7\u7528preorder\uff0cvoid fun(tree, depth)</p> <p>\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5f53\u524d\u6811\uff0c\u4e00\u4e2a\u662f\u6df1\u5ea6\uff0c\u6bcf\u5c42\u9012\u5f52\u65f6\uff0c\u6df1\u5ea6\u52a0\u4e00\uff0c\u6839\u636e\u6df1\u5ea6tab</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-07-bst","title":"Lec 07 BST","text":""},{"location":"notes/cs/algorithm/fds/fds/#properties-of-bt","title":"Properties of BT","text":"<p>\u5c42\u6570\u4e3an\u7684BT \u6700\u591a\u67092^n-1\u4e2anode </p> <p>degree \u4e3a 0 \uff08\u53f6\u5b50\u7ed3\u70b9\uff09\u4e2a\u6570 = degree \u4e3a 2\u8282\u70b9\u4e2a\u6570 + 1</p> <p>proof\uff1a</p> <p>n = n0 + n1 + n2</p> <p>side = 2*n2 + n1</p> <p>side = n - 1</p> <p>\u53ef\u4ee5\u6d88\u53bbn1</p>"},{"location":"notes/cs/algorithm/fds/fds/#bst-binary-search-tree","title":"BST binary search tree","text":"<p>def\uff1a</p> <ol> <li>\u5de6\u5b50\u6811\u6570\u503c\u4e00\u5b9a\u5c0f\u4e8e\u6839\u7ed3\u70b9\uff0c\u53f3\u5b50\u6811\u4e00\u5b9a\u5927\u4e8e\u6839\u7ed3\u70b9\uff08\u5f53\u524d\u6811\u7684\uff09</li> <li>\u5de6\u53f3\u5b50\u6811\u90fd\u662fBST\uff01\uff01\uff01\uff01</li> </ol> <p>\u9002\u7528\u4e8e\uff1a\u52a8\u6001\u67e5\u627e</p> <p>\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u7531\u5c0f\u5230\u5927\u8f93\u51fa</p>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_3","title":"Implementation","text":"<ol> <li>find</li> </ol> <p>\u9012\u5f52\u5b9e\u73b0\uff1a</p> <p>basecase\uff1aT = NULL</p> <p>\u5de6\u8fb9 else \u53f3\u8fb9 else \u672c\u8eab\u5c31\u662f\u6839\u7ed3\u70b9\u6570\u503c</p> <p>\u4e0e\u6811\u7684\u6df1\u5ea6\u6210\u6b63\u6bd4</p> <ol> <li>find min max</li> </ol> <p>\u9012\u5f52\u5411\u5de6\u53f3\u8fb9\u8d70</p> <ol> <li> <p>Insert</p> </li> <li> <p>check if k in</p> </li> <li> <p>\u770b\u5de6\u53f3\u8fd8\u6709\u5417 \u6ca1\u6709\u5c31\u63d2</p> <pre><code>tree insert(element x, BST t){\n  if(t == NULL){\n    T = ()malloc(sizeof(struct Treenode));\n    T-&gt;element = x;\n    T-left = T-&gt;Right = NULL;\n  }\n  else{\n    if(T-&gt;element &gt; x){\n      t-&gt;Left = insert(x, t-&gt;Left);\n    }\n    else{\n      t-&gt;right = insert(x,t-&gt;right);\n    }\n  }\n  return t\n}\n</code></pre> </li> <li> <p>delete</p> </li> <li> <p>delete a leaf: make its parent point to NULL</p> </li> <li>n1: replace it by its single child, and free it</li> <li>n2:</li> </ol> <p>\u5c3d\u91cf\u4fdd\u8bc1\u539f\u6765\u6811\u7684\u7ed3\u6784\uff1a\u7528\u66ff\u6362\u7684\u65b9\u6cd5</p> <p>\u9009\u5de6\u8fb9\u6700\u5927\u7684\u5143\u7d20\u6216\u8005\u53f3\u8fb9\u6700\u5c0f\u7684\u5143\u7d20\u653e\u5230\u5220\u9664\u4f4d\u7f6e\uff0c\u518d\u5c06\u7528\u6765\u66ff\u6362\u7684\u5143\u7d20</p> <pre><code>tree delete(element x, BST t){\n  position tmpcell\n  if(t == NULL)\n    return not found;\n  else if(x &lt; t-&gt;element)\n    t-&gt;right = delete(x, t-&gt;right);\n  else if(x &gt; t-&gt;element)\n    t-&gt;left = delete(x, t-&gt;left)//search for the position\n   else{\n     if(t-&gt;left &amp;&amp; t-&gt;left){//if n2\n       tmpcell = findmin(t-&gt;right);//use find a min on right way\n       t-&gt;element = tmpcell-&gt;element;\n       t-&gt;right = delete(t-&gt;element, t-&gt;right);\n     }\n     else{// if n0 or n1\n       tmpcell = t;\n       if(t-&gt;left == NULL)\n         t = t-&gt;right;\n       else if(t-&gt;right == NULL)\n         t = t-&gt;left;\n       free(tmpcell);\n     } \n   }\n  return t;//return t to its parent \n}\n</code></pre> <p>lazy deletion: don't free a node but add a flag to it</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-08-priority-queueheaps","title":"Lec 08 Priority Queue(Heaps)","text":"<p>delete the element with the highest / lowest priority </p>"},{"location":"notes/cs/algorithm/fds/fds/#binary-heap","title":"Binary Heap","text":"<ol> <li>Structure Property</li> </ol> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a</p> <p>\u4fdd\u8bc1\u6811\u9ad8h=logn</p> <p>\u662f\u90e8\u5206\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811--&gt;\u5b8c\u5168\u4e09\u89d2\u5f62\u4e14\u8282\u70b9\u7684\u6807\u53f7\u662f\u5b8c\u5168\u6309\u7167\u987a\u5e8f\u7684</p> <p>\u9002\u5408\u7528\u6570\u7ec4\u5b58\u653e\uff08\u5b8c\u5168\u5229\u7528\u7a7a\u95f4\uff09</p> <p>\u7528\u6570\u7ec4\u8fdb\u884c\u5b58\u50a8\uff1a</p> <p></p> <p>\u4e0d\u4f1a\u6709\u7a7a\u95f4\u6d6a\u8d39\uff08\u65e0\u504f\u659c\u6811\uff09</p> <p>\u4eceindex = 1 \u5f00\u59cb\u5b58\u50a8</p> <p>index = 0 \u7684\u4f4d\u7f6e\u4f5c\u4e3a\u54e8\u5175\uff0c\u8bbe\u7f6e\u6210\u79bb\u5f00\u6570\u503c\u8303\u56f4\u7684\u503c</p> <ul> <li>\u8fd0\u52a8\u65b9\u5f0f\uff1a\u4ee5\u6570\u7ec4\u89d2\u68071\u5f00\u59cb</li> </ul> <p>--&gt;\u4e0b\u6807x2 \u5411\u5de6\u8d70</p> <p>--&gt;\u4e0b\u6807x2 + 1\u5411\u53f3\u8d70</p> <p>\u4ece\u4e0b\u5f80\u4e0a\u8d70\uff1a\u27972 \u53d6\u6574</p> <p></p> <ol> <li>Order Property</li> </ol> <p>To def min heap and max heap: </p> <p>\u200b    \u76f4\u5c5e\u7684\u5927\u5c0f\u5173\u7cfb\u5206\u522b\u4e3a\u9012\u589e/\u9012\u51cf\uff0c\u6bd4\u8f83\u5144\u5f1f\u4e0d\u4e00\u5b9a\uff0c\u6cbf\u8def\u5f84\u5355\u8c03\uff0c\u56e0\u6b64\u641c\u7d22\u4efb\u610f\u503c\u4e00\u5b9a\u8981\u5168\u90e8\u626b\u63cf\uff0c\u6240\u4ee5HEAP\u4e0d\u9002\u7528\u4e8e\u641c\u7d22\uff08BST\u66f4\u597d\uff09</p> <p>\u200b    \u4f46\u662froot\u4e00\u5b9a\u662f\u6700\u503c\uff0c\u6240\u4ee5\u9002\u5408\u5bf9\u6700\u503c\u64cd\u4f5c</p> <p>### Operation</p> <ol> <li>Insertion: \u4e0a\u6ee4 </li> </ol> <p>\u5047\u8bbe\u653e\u5728\u6700\u672b\u5c3e\u2014&gt;\u5224\u65ad(\u4e0eparent\u5927\u5c0f)\u662f\u5426\u6210\u7acb</p> <pre><code>void Insertion(data x, Queue H){\n int i;\n  if(isFull) Error;\n  for(i = ++H-&gt;size; H-&gt;element[i/2] &gt; x; i = i/2){// \u603b\u4f1a\u6709\u54e8\u5175\u4f7f\u4e4b\u505c\u6b62                    //\u4e0eparent\u6bd4\u8f83\u5927\u5c0f\n    H-&gt;element[i] = H-&gt;element[i/2];//\u4e0a\u6ee4\u627e\u4f4d\u7f6e \u975e\u4ea4\u6362\n        ^\n        |\n//\u5728\u8fd9\u91cc\u7b2c\u4e00\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u52a0\u5165\u4e00\u4e2a\u65b0\u5355\u5143 \u56e0\u4e3ai = size\u662f\u8fb9\u754c\uff0c++size\u662f\u65b0\u7684\u7a7a\u95f4\n  }\n  H-&gt;element[i] = x;\n}\n</code></pre> <p>O(logn)</p> <ol> <li>Delete min\uff1a\u4e0b\u6ee4</li> </ol> <p>\u5305\u62ec\u62ff\u51fa\u6700\u5c0f\u503c\u548c\u91cd\u6784Heap</p> <p>\u91cd\u6784\uff1a\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u7684\u6570\u636e\uff0c\u4e0b\u6ee4\uff08\u7531root\u4f4d\uff09\u627e\u5230\u53ef\u4ee5\u653e\u4ed6\u7684\u5730\u65b9</p> <pre><code>int Deletemin(Heap H){\n  int i, child;\n  1.\u5224\u7a7a\uff1b\n  minelement = H-&gt;element[1];\n  lastelement = H-&gt;element[H-&gt;size--];//\u6682\u65f6\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u5143\u7d20\n  for(i = 1; i*2 &lt;= H-&gt;size; i = child){//\u4e0b\u6ee4\u8fc7\u7a0b\n    child = i*2;\n    if(child != H-&gt;size &amp;&amp; [child+1] &lt; [child])\n      child ++;//\u6682\u5b58\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8981\u6ee1\u8db3property\uff1a\u9700\u8981\u5c0f\u4e8e\u4e24\u4e2a\u5b69\u5b50\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\n    if(lastelement &gt; [child])\n       [i] = [child];//\u4e0b\u6ee4\n    else break;//\u627e\u5230\u4f4d\u7f6e\uff0cbreak\n  }\n  [i] = lastelement;\n  return minelement;\n}\n</code></pre> <ol> <li>Decrease/Increase Key: </li> </ol> <p>\u8c03\u6574\u4f18\u5148\u7ea7\uff0c\u5c06\u4efb\u52a1\u4e0a\u6d6e\u6216\u4e0b\u6c89\uff0cKey\u662f\u67d0\u4e2a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c\u6539\u53d8Key\u7684\u5927\u5c0f</p> <p>\u9700\u8981\u91cd\u65b0\u8c03\u6574\u5806\u4f7f\u5176\u4fdd\u6301\u7279\u6027</p> <pre><code>void DecreaseKey(int i, int value, Heap *h){\n    int j;\n    if(i &gt; h-&gt;size){\n        printf(\"Index is not in the heap\\n\");\n        return;\n    }\n    if(h-&gt;element[i] &lt; value){\n        printf(\"New value is greater than current value\\n\");\n        return;\n    }\n    for(j = i; h-&gt;element[j/2] &gt; value; j/=2){\n        h-&gt;element[j] = h-&gt;element[j/2];\n    }\n    h-&gt;element[j] = value;\n}\n</code></pre> <ol> <li>Delete\uff1a</li> </ol> <p>\u5148Decrease \u518d Deletemin</p> <ol> <li>build Heap</li> </ol> <pre><code>void BuildHeap(Array H[]){\n  int i = h-&gt;size/2;\n    for(; i &gt; 0; i--){\n        int j = i;\n        int tmp = h-&gt;element[j];\n        int k = j*2;\n        while(k &lt;= h-&gt;size){\n            if(k &lt; h-&gt;size &amp;&amp; h-&gt;element[k] &gt; h-&gt;element[k+1]){\n                k++;\n            }\n            if(tmp &gt; h-&gt;element[k]){\n                h-&gt;element[j] = h-&gt;element[k];\n                j = k;\n                k = j*2;\n            }else{\n                break;\n            }\n        }\n        h-&gt;element[j] = tmp;\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#lec-09-disjoint-set","title":"Lec 09 Disjoint set","text":"<p>\u7b49\u4ef7\u5173\u7cfb equivalent relation </p> <p>symmetric reflexive transitive</p> <p>\u7b49\u4ef7\u7c7b\uff1a \u5177\u6709\u76f8\u540c\u7b49\u4ef7\u5173\u7cfb\u7684\u4e00\u7c7b\u5bf9\u8c61</p> <ul> <li>eg\uff1a\u5bf9\u7b49\u4ef7\u7c7b\u8fdb\u884c\u5206\u7c7b</li> </ul> <p></p> <pre><code>void find(){//\u5e76\u67e5\u96c6\u7b97\u6cd5\n//1.read in relaitions\nInitial n disjoint set;\n  while(read in a~b){\n    if(!(Find(a) == Find(b))){//\u5982\u679c\u4e24\u8005\u4e0d\u5c5e\u4e8e\u540c\u4e00\u5bb6\u65cf\uff0c\n      Union two set//\u5408\u5e76\u8fd9\u4e24\u4e2a\u5bb6\u65cf\n    }\n  }\n//2.dicide if a~b\n    while(read in a and b)\n    if(Find(a) == Find(b)) output(true);\n    else output(false)\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#implementation_4","title":"Implementation","text":"<p>\u7528\u6570\u7ec4\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6307\u9488</p> <p>Union</p> <p>S[element] = element's parent </p> <p>S[root] = 0 and </p> <p></p> <p>Find</p> <pre><code>for(;S[x] &gt; 0; x = S[x])\n  return x;\n</code></pre> <p>\u4f46\u662f\u4f1a\u6709\u53ef\u80fd\u6210\u4e3a\u7ebf\u6027\u94fe\u8868\uff0c\u6811\u9ad8\u975e\u5e38\u9ad8</p> <p>Smart Union</p> <ol> <li>union by size</li> </ol> <p>\u5b58\u653esize\uff1aS[root] = -size</p> <p>\u6b64\u65f6\u7684size\u4e0d\u4f1a\u8d85\u8fc7log2(N)+1</p> <p>Path compression</p> <pre><code>type find(s, x){\n    if(S[x] &lt;= 0) return x;\n  else return S[x] = find(S[x], S);//\u9012\u5f52\u7684\u5c06\u7ecf\u8fc7\u8282\u70b9\u8fde\u5230father \u4ece\u800c\u8fbe\u5230path compress\n}\n</code></pre> <p>\u975e\u5c3e\u9012\u5f52\uff0c\u4f1a\u5728\u6bcf\u6b21\u9012\u5f52\u7684\u65f6\u4faf\u5c06\u7ecf\u8fc7\u7684\u8282\u70b9\u8fde\u5230father\u4e0a</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec10-graph-algorithm","title":"Lec10 Graph Algorithm","text":"<p>\u4e00\u4e2a\u6328\u7740\u4e00\u4e2a-&gt;\u7ebf\u6027\u8868</p> <p>\u4e00\u4e2a\u7ba1\u597d\u591a\u4e2a-&gt;\u6811</p> <p>\u6811\u662f\u56fe\u7684\u7279\u6b8a\u60c5\u51b5</p> <p>\u56fe\u662f\u591a\u5bf9\u591a</p>"},{"location":"notes/cs/algorithm/fds/fds/#def","title":"Def","text":"<p>G(V, E) \u9876\u70b9 \u8fb9</p> <p>\u53ef\u4ee5\u53ea\u6709\u9876\u70b9\u6ca1\u6709\u8fb9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9</p> <ul> <li>\u65e0\u5411\u56fe undirected</li> </ul> <p>(v1, v2)</p> <ul> <li>\u6709\u5411\u56fe directed</li> </ul> <p>&lt; v1, v2 &gt;</p> <p>complete graph : a graph has max edges </p> <p>\u8fb9\u6570\uff1a\u6709\u5411n*(n-1)</p> <p>\u200b       \u65e0\u5411n*(n-1)/2</p> <p>adjacent:\u76f8\u90bb\u7684</p> <p>\u5bf9\u6709\u5411\u56fe\uff1aA-&gt;B: A is adjacent to B, B is adjacent from A</p> <p>subgraph: \u9876\u70b9\u7684\u5b50\u96c6&amp;&amp;\u8fb9\u7684\u5b50\u96c6</p> <p>path:(v1, v2,......)</p> <p>length of path: \u8fb9\u7684\u6570\u91cf</p> <p>simple path\uff1a\u6bcf\u4e2av\u4e0d\u76f8\u7b49</p> <p>circle: simple path with vi = vj \u5934\u5c3e\u76f8\u7b49\u7684simple path</p> <p>connected graph: every pair of v is connected </p> <p>Component: \u4e00\u4e2a\u56fe\u91cc\u7684\u6700\u5927\u8fde\u901a\u5b50\u56fe(\u4e0d\u80fd\u518d\u52a0\u5165\u4e00\u4e2av/e\uff0c \u5426\u5219\u5c31\u4e0d\u76f8\u8fde)</p> <p>tree: \u65e0\u73af\u7684\u6839\u7ed3\u70b9\u4e3a\u4e00\u7684\u56fe</p> <p>DAG: \u6709\u5411\u65e0\u73af\u56fe</p> <p>Strongly connected directed graph: \u4efb\u610f\u4e00\u5bf9\u9876\u70b9\uff0c\u5f80\u8fd4\u90fd\u6709\u8def</p> <p>Weakly connected: \u4e0d\u6ee1\u8db3\u5f3a\u8fde\u901a\uff0c\u4f46\u662f\u5c06\u5176\u8f6c\u53d8\u4e3a\u65e0\u5411\u56fe\u540e\u8fde\u901a\u7684\u56fe</p> <p>Degree: \u5165\u5ea6+\u51fa\u5ea6Degree: number of edges incident to v. 2E=\u2211degree</p>"},{"location":"notes/cs/algorithm/fds/fds/#representation","title":"Representation","text":"<ul> <li>\u4e8c\u7ef4\u6570\u7ec4</li> </ul> <p>adj_set[ i ] [ j ] = 1 if i j connected else = 0</p> <ul> <li>\u94fe\u8868</li> </ul> <p>\u53ea\u5b58\u51fa\u5ea6</p> <p>n\u4e2a\u9876\u70b9\uff0c\u8981\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u4e00\u7ef4\u6570\u7ec4\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u662f\u6bcf\u4e2a\u9876\u70b9</p> <p>\u6570\u7ec4\u5143\u7d20\u662f\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u5373\u76f8\u5f53\u4e8e\u5f00n\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u5b58\u50a8\u65f6\uff1a</p> <p>A-&gt;B\uff1a\u627eA\u94fe\u8868\uff0c\u5c06B\u7684\u5934\u8282\u70b9\u63d2\u5165\u5230A\u7684\u94fe\u8868\u4e2d</p> <p></p> <ul> <li>Multilist</li> </ul> <p>\u5b58\u8fb9\uff0c\u7ed3\u6784\u4f53\u91cc\u5305\u542bmark\uff0c\u7528\u4e8e\u6807\u8bb0\u8fd9\u6761\u8def\u662f\u975e\u88ab\u8bbf\u95ee\u8fc7\uff0c\u4e24\u4e2a\u70b9\u6307\u5411\u6240\u8fde\u63a5\u7684\u8282\u70b9</p> <ol> <li>\u62d3\u6251\u6392\u5e8f</li> </ol> <p></p> <p>AOV Network activity on verticle</p> <p>\u4e00\u5b9a\u662f\u975e\u81ea\u53cd\u7684-&gt; DAG</p> <p>\u62d3\u6251\u5e8f\uff1a</p> <p>\u7406\u89e3\uff1a\u6309\u7167\u6240\u6709\u7684\u5148\u4fee\u8bfe\u90fd\u4e0d\u51b2\u7a81\u7684\u60c5\u51b5\u80fd\u6392\u51fa\u4e00\u4e2a\u8bfe\u8868</p> <pre><code>void Toposort(Graph G){\n  int counter;\n  Vertex v, w;\n  for(counter = 0; counter &lt; Numvertex; counter ++){\n    v = findNewVertexofDegreeZero();//\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u8fb9\n    if(v == NotAVertex){\n      Error(\"Graph is a cycle\"); break;\n    }\n    TopNum[v] = counter;//\u5982\u679c\u6709\u53ef\u4ee5\u5b66\u7684\u8bfe\uff0c\u5c06\u5b83\u5b66\u6389\n    for(each w adjacent from v)\n      indegree[w]--;//\u5e76\u4e14\u5c06\u4ee5\u5b83\u4e3a\u9884\u4fee\u8bfe\u7684\u8bfe\u4e2d\u5220\u6389\uff08\u51cf\u5c0f\u4ed6\u7684\u4e0b\u4e00\u95e8\u8bfe\u7684\u5165\u5ea6\uff09\n  }\n}//O(v^2)\n</code></pre> <p>\u6539\u8fdb\uff1a\u91c7\u7528\u4e00\u4e2a\u7ed3\u6784\u5b58\u50a8\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9</p> <p></p>"},{"location":"notes/cs/algorithm/fds/fds/#lec11-shortest-path-algorithm","title":"Lec11 Shortest Path Algorithm","text":"<p>\u4e24\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u548c\u6700\u5c0f-&gt;weighted path length \u6700\u5c0f\u503c</p> <ol> <li>single-source \u5355\u6e90\u6700\u77ed\u8def</li> </ol> <p>\u56fa\u5b9a\u4e00\u4e2a\u9876\u70b9\u5230\u5176\u4ed6\u70b9\u7684\uff08\u52a0\u6743\uff09\u8ddd\u79bb\u6700\u5c0f</p> <ul> <li>\u65e0\u6743\uff1a\u7b49\u4ef7\u4e0e\u6bcf\u6761\u8def\u7684\u6743\u91cd\u662f1</li> </ul> <p>Breadth-first Search: \u56fa\u5b9a\u4e00\u4e2a\u70b9 \u627e\u4e0e\u4ed6\u8ddd\u79bb\u4e3a1\u7684\u70b9 </p> <p>\u8fc7\u7a0b\u4e2d\u6807\u8bb0\u907f\u514d\u8d70\u91cd\u590d\u8def\u7ecf </p> <p>\u5b58\u50a8\u8def\u5f84\uff1a\u7528\u7236\u6307\u9488\u8bb0\u5f55\u524d\u4e00\u4e2a\u4f4d\u7f6e \u5b58\u524d\u7f6e\u9876\u70b9\u7684\u7f16\u53f7</p> <pre><code>void Unweighted(Table T){//T is initialized with source vertex S\n  queue q;\n  vertex v, w;\n  q = CreateQueue(NumVer); MakeEmpty(q);\n  Enqueue(S, q);//\u521d\u59cb\u5316\u65f6\u5c06\u8d77\u70b9\u8fdb\u961f\u5217\n  while(!IsEmpty(q)){\n    v = Dequeue(q);//\u5c06\u5f53\u524d\u8282\u70b9\u63a8\u51fa\u961f\u5217\n    T[v].Known = true;//tag the vertex which has been visited\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u4e0d\u8981\n    for(each w adjacent from v){\n      if(T[w].Dist == infinity){//\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u88ab\u8bbf\u95ee\n        T[w].Dist = T[v].Dist + 1;//\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\n        T[w].Path = v;//\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\n        Enqueue(w, q);//\u5c06\u90bb\u8fd1\u7684\u8282\u70b9\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u5f53\u524d\u4f4d\u7f6e\n      }\n    }\n  }\n  DisposeQueue(q);\n}\n</code></pre> <p>O(V+E): \u6bcf\u6b21\u8fdb\u5165\u4e00\u4e2aV \u8d70\u904dV</p> <ul> <li>\u6709\u6743\uff1a</li> </ul> <p>Dajkstra</p> <pre><code>void Dijkstra(Table T){\n  for(;;){\n    v = smallest unknown distance vertex;\n    T[v].known = true;\n    for(each w adjacent to v){\n      if(T[w].known == false){\n        if(T[v].distance + Cvw &lt; T[w].distance){\n          T[w].distance = T[v].distance + Cvw;\n          T[w].path = v;\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#lec-12-network-flow-minimum-spanning-tree","title":"Lec 12 Network Flow &amp; Minimum Spanning Tree","text":"<p>Network Flow</p> <p>Network \u6709\u6743</p> <p>Flow \u6709\u5411</p> <p>\u7531source \u5230sink \u6e90\u5230\u6c47</p> <p>\u5c06\u6bcf\u4e2a\u8fb9\u7684\u5927\u5c0f\u5f53\u4f5c\u7ba1\u9053\u7684\u6700\u5927\u6d41\u91cf</p> <p>The task is to find the maximum amount of flow that can pass from s to t</p> <ol> <li>undo</li> </ol> <p>\u627e\u5230\u4e00\u6761\u8def\u4e0a\u6700\u5927\u901a\u91cf\uff0c\u5c06\u8fd9\u6761\u8def\u4e0a\u7684\u6bcf\u6761\u8fb9\u51cf\u53bb\u8fd9\u4e2a\u503c\uff0c\u5e76\u5728\u6bcf\u6761\u8def\u4e0a\u53cd\u5411\u52a0\u4e00\u4e2a\u8fd9\u4e2a\u503c</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(fE) f\u662f\u6700\u5927\u6d41</p> <p>Minimum spanning tree </p> <p>\u4e00\u4e2a\u5b50\u56fe\u5305\u542b\u6240\u6709\u9876\u70b9\uff0c\u5305\u542b\u4e00\u90e8\u5206\u8fb9\uff0c\u6784\u6210\u4e86\u4e00\u4e2a\u6811</p> <p>use greedy:</p> <ol> <li>use only edges within graph </li> <li>use exactly V-1 edges </li> <li>no use edges that produce cycle</li> </ol> <p>Prim : grow a tree</p> <p>\u7c7b\u4f3cDijkatra \u56e0\u4e3a\u751f\u6210\u6811\u9700\u8981n\u4e2a\u70b9\uff0c\u6bcf\u4e00\u6b65\u90fd\u662f\u5b50\u751f\u6210\u6811</p> <p>\u5f00\u59cb\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u627e\u90bb\u8fb9\u6700\u5c0f\u7684\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u6b64\u65f6\u5c31\u6709\u4e86\u4e00\u4e2a\u5b50\u751f\u6210\u6811\uff0c\u63a5\u4e0b\u6765\u6bcf\u4e00\u6b65\u90fd\u9700\u8981\u9009\u62e9\u8fd9\u4e2a\u5b50\u6811\u7684\u5411\u5916\u6269\u5c55\u8fb9\uff08\u8fb9\u7684\u4e00\u5934\u5728\u6811\u4e0a\uff0c\u4e00\u5934\u4e0d\u5728\uff09</p> <p>Kruskal : maintain  a forest</p> <p>\u4ee5\u8fb9\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u6bcf\u6b21\u627e\u6700\u5c0f\u7684\u8fb9\uff0c\u540c\u65f6\u4fdd\u8bc1\u4e0d\u6784\u6210\u56de\u8def\uff0c\u8fd9\u6837\u9009\u5b8cn-1\u6761\u8fb9\u540e\uff0c\u5c31\u4f1a\u6709\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811</p> <pre><code>void Kruskal(Graph g){\n  T = {};//set as empty\n  while(|T| &lt; V-1 edges &amp;&amp; E is not empty){\n    choose a least cost edges(v, w) from E;\n    delete it from E;\n    if((v, w) wont cause a cycle)\n      add(v, w) to T;\n    else\n      discard it;\n  }\n}\n</code></pre> <p>\u9002\u7528\u4e8e</p> <p>\u53ef\u4ee5\u7528\u5806\u627e\u5230\u6700\u5c0f\u503c</p> <p>\u5224\u65ad\u662f\u5426\u6784\u6210\u56de\u8def\uff1a\u5e76\u67e5\u96c6\u7b97\u6cd5\uff0c\u6bcf\u6b21\u627e\u8fb9\u7684\u65f6\u5019\u76f8\u5f53\u4e8e\u52a0\u5165\u4e00\u4e2a\u7b49\u4ef7\u5173\u7cfb</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO()</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-13-bfs-dfs","title":"Lec 13 BFS DFS","text":"<p>\u56fe\u76f8\u5173\u95ee\u9898\u7684\u672c\u8d28\u662f\u904d\u5386</p> <p>\u5c06\u4e8c\u7ef4\u7ed3\u6784\u8f6c\u5316\u6210\u4e00\u7ef4\u7ed3\u6784\u53bb\u505a</p> <p>\u904d\u5386\u65f6\uff1a\u9700\u8981\u9009\u5b9a\u4e00\u4e2a\u57fa\u51c6\u4f4d\u7f6e\uff0c\u5728\u57fa\u51c6\u4f4d\u7f6e\u4e0a\u627e\u76f8\u8fde\u63a5\u7684\u5404\u4e2a\u70b9</p> <p>\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u76f8\u90bb\u70b9\uff0c\u5269\u4e0b\u7684\u70b9\u9700\u8981\u4fdd\u5b58</p> <p>--&gt;\u6839\u636e\u4fdd\u5b58\u65b9\u6cd5\u5206\u7c7b\uff1a</p> <ol> <li>\u7528\u961f\u5217\uff1a\u5bbd\u5ea6\u641c\u7d22</li> <li>\u7528\u5806\u6808\uff1a\u6df1\u5ea6\u641c\u7d22 \u4f46\u662f\u7a0b\u5e8f\u5b9e\u73b0\u65f6\u901a\u5e38\u7528\u9012\u5f52\u800c\u4e0d\u7528\u5806\u6808</li> </ol> <p>DFS</p> <ol> <li>undirected</li> </ol> <pre><code>void DFS(Vertex a){\n  visited[a] = true;\n  for(each w adjacent to v){\n    if(!visited[w]){\n      DFS(w);\n      printf(\"\\n\");\n    }\n  }\n}\n</code></pre> <p>\u8ba1\u7b97\u8fde\u901a\u5206\u91cf\uff1a\u5bf9\u4e00\u4e2a\u56fe\u8fdb\u884c\u904d\u5386\u540e\u67e5\u770bvisited \u5982\u679c\u6ca1\u6709visited\uff0c\u8c03\u7528DFS \u5206\u91cf= DFS\u8c03\u7528\u6b21\u6570</p> <p>\u53cc\u8054\u901a\uff1a\u62ff\u6389\u56fe\u4e2d\u4e00\u4e2a\u70b9\uff0c\u5269\u4f59\u7684\u56fe\u4ecd\u7136\u662f\u8054\u901a\u7684</p> <p>\u62ff\u6389\u540e\u56fe\u4e0d\u8fde\u901a \u79f0\u8fd9\u4e2a\u70b9\uff1a\u5173\u8282\u70b9articulation</p> <p>\u53cc\u8054\u901a\u5219\u65e0\u5173\u8282\u70b9</p> <p>\u53cc\u8054\u901a\u5206\u91cf\uff1a\u6700\u5927\u5b50\u53cc\u8054\u901a\u56fe</p> <p>Q1:\u8ba1\u7b97\u53cc\u8054\u901a\u5206\u91cf</p> <ol> <li>\u6df1\u5ea6\u904d\u5386 \u904d\u5386\u65f6\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0Num\u4f5c\u4e3a\u904d\u5386\u7684\u987a\u5e8f</li> <li>\u8ba1\u7b97Low\u503c\uff1aLow\u7684\u7406\u89e3\uff1a\u6211\u80fd\u8054\u7edc\u5230\u7684\u6700\u9ad8\u5c42\uff08\u6700\u5c0f\u7684num\uff09</li> <li>\u67e5\u770b\u6ee1\u8db3\u5173\u8282\u7684\u6761\u4ef6</li> </ol> <p></p> <p>Q2:Euler Circuit</p> <p>\u4e00\u7b14\u753b</p> <p>\u7ed3\u8bba\uff1a</p> <ol> <li>\u5982\u679c\u6240\u6709\u8282\u70b9\u7684\u5ea6\u90fd\u662f\u5076\u6570\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u6b27\u62c9\u56de\u8defEuler Circuit\uff08\u8d77\u6b62\u70b9\u76f8\u540c\uff09</li> <li>\u5982\u679c\u6709\u4e24\u4e2a\u5947\u6570\u5ea6\u8282\u70b9\uff0c\u53ef\u4ee5\u5f62\u6210\u6b27\u62c9\u8def\u5f84Euler Tour\uff08\u4e00\u7b14\u753b\u4f46\u4e0d\u7528\u8d77\u6b62\u70b9\u76f8\u540c\uff09</li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(E + V)</p>"},{"location":"notes/cs/algorithm/fds/fds/#lec-14-sorting","title":"Lec 14 Sorting","text":"<p>selection</p> <p>bubble</p> <p>insertion</p> <pre><code>void insertion(int a[], int n){\n  int tmp;\n  for(int p = 1; p &lt; n; p++){\n    tmp = a[p];\n    for(int j = p; j &gt; 0 &amp;&amp; a[j-1] &gt; tmp; j--)\n      a[j] = a[j-1];//\u79fb\u4f4d\n    a[j] = tmp;\n  }\n}//\u5e73\u5747O(n^2) \u6709\u5e8f\u65f6\u6700\u597dO(n) \u65e0\u5e8f\u65f6O(n^2)\n</code></pre> <p>Inversion \u9006\u5e8f\uff1a\u5927\u5c0f\u4e0e\u4f4d\u7f6e\u4e0d\u5339\u914d\u7684\u4e24\u9879</p> <p>\u6700\u574f\u7684\u60c5\u51b5\uff1aC(2 n)\u4e2a\u9006\u5e8f \u9700\u8981\u4ea4\u6362C(2 n)\u6b21</p> <p>\u5e73\u5747\uff1an^2/4</p> <p>Shellsort</p> <p>\u5206\u7ec4\u4f7f\u7528\u63d2\u5165</p> <p>\u6700\u574fn^(3/4) \u5e73\u5747 n^(6/7)</p> <p>Heap sort</p> <p>\u6811\u5f62\u9009\u62e9</p> <ol> <li> <p>\u9996\u5148\u5efa\u5806 \u91cd\u590d\u53bb\u9664\u5806\u9876\u5143\u7d20 O(nlongn)</p> </li> <li> <p>\u5efa\u6700\u5927\u5806\uff0c\u6bcf\u6b21\u5c06\u5806\u9876\u653e\u5230\u6570\u7ec4\u6700\u540e\u7aef\uff0c\u7136\u540e\u7ef4\u62a4\u8fd9\u4e2a\u5806</p> </li> </ol> <pre><code>\n</code></pre> <p>2NlogN-O(NloglogN)</p> <p>\u5feb\u6392\u548cmerge\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u601d\u60f3\uff1adivede and conquer and merge </p> <p>\u4f46\u662f\u4fa7\u91cd\u70b9\u4e0d\u540c\uff1a</p> <ol> <li>merge\u5728\u4e8c\u5206\u6570\u7ec4\u540e\u5f3a\u8c03\u5728\u5206\u6cbb\u4e4b\u540e\u7684\u5f52\u5e76\uff0c\u4f46\u662f\u5f52\u5e76\u7684\u65f6\u5019\u82e5\u5de6\u8fb9\u5df2\u7ecf\u5168\u90e8\u5c0f\u4e8e\u53f3\u8fb9\uff0c\u5219\u65e0\u9700merge \u8fd9\u5c31\u662f\u5feb\u6392\u7684\u76ee\u6807</li> <li>\u5feb\u6392\u5f3a\u8c03\u5728divide\u65f6\u627e\u5230\u57fa\u51c6\u5143\u7d20pivot \u4f7f\u5f97\u5206\u6cbb\u7684\u6570\u7ec4\u6574\u4e2a\u90fd\u5927\u4e8e\u6216\u5c0f\u4e8e</li> </ol> <p>Merge sort</p> <p>O(nlogn)</p> <p>Quick sort</p> <p>slower than insertion when N &lt;= 20</p> <p>\u9009\u62e9pivot\uff1a\u53ef\u4ee5\u524d\u4e2d\u540e\u4e09\u4e2a\u91cc\u9762\u53d6\u9002\u4e2d\u7684</p> <p>\u4e00\u5b9a\u662f\u9002\u4e2d\u7684\uff1a\u968f\u673a\u9009\u4e94\u4e2a \u4e2d\u95f4\u7684\u5143\u7d20</p> <p>hqm\u7684qsort\uff1a</p> <pre><code>\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#lec-16-hashing","title":"Lec 16 Hashing","text":"<p>\u5747\u5300</p> <p>\u54c8\u5e0c\u51fd\u6570\u600e\u4e48\u8bbe\u8ba1</p> <p>\u51b2\u7a81\u600e\u4e48\u89e3\u51b3</p> <p>\u54c8\u5e0c\u65b9\u6cd5\u7684\u8bc4\u4ef7</p> <p>Hashing for searching</p> <p>\u901a\u8fc7\u8ba1\u7b97\u6765\u627e\u5bf9\u8c61</p> <ul> <li>\u5b57\u5178\u95ee\u9898</li> </ul> <p>ADT</p> <p>&lt; name, attribute &gt;</p> <p>hash table:</p> <p>n \u662f\u5b9e\u9645\u8fdb\u5165\u7684\u54c8\u5e0c\u5143\u7d20 T\u662f\u53ef\u63d0\u4f9b\u7684\u4e0d\u540c\u54c8\u5e0c\u503c</p> <p>identifier density: n/T </p> <p>loading density: n/sb   sb\u662f\u54c8\u5e0c\u8868\u7684\u9762\u79ef\uff08\u53ef\u4ee5\u5b58\u653e\u7684\u6570\u91cf\uff09</p>"},{"location":"notes/cs/algorithm/fds/fds/#design-hash","title":"Design Hash","text":"<p>\u6570\u5b57\uff1a</p> <ol> <li>\u6c42\u4f59\u6cd5 u(x) = x%m</li> <li>\u5e73\u65b9\u53d6\u4e2d\uff1a</li> </ol> <p>\u5c06\u6570\u5e73\u65b9\uff0c\u53d6\u4e2d\u95f4\u7684\u4e24\u4f4d\u6570</p> <ol> <li>\u6298\u53e0\u6cd5\uff1a</li> <li>\u6570\u5b57\u5206\u6790\u6cd5</li> </ol> <p>\u5b57\u7b26\u4e32\uff1a\u5148\u53d8\u4e3a\u6570\u5b57</p> <p>\u901a\u8fc7\u4f4d\u8fd0\u7b97\u8fdb\u884c\u8f6c\u6362\uff1a</p> <pre><code>int index_hash(char *x, int tablesize){\n  unsigned int hashval = 0;\n  while(*x != '\\0')\n    hashval = (hashval &lt;&lt; 5) + *x++;//\u76f8\u5f53\u4e8e x 32\n  return hashval % tablesize;\n}\n</code></pre>"},{"location":"notes/cs/algorithm/fds/fds/#collision","title":"Collision","text":"<ol> <li>\u94fe\u8868\u89e3\u51b3\uff1an\u4e2a\u5143\u7d20\uff0c\u54c8\u5e0c\u8868\u81f3\u5c11\u957f\u5ea6\u4e3a2n</li> </ol> <p>O(1) insertion</p> <ol> <li>open addressing:</li> </ol> <p>\uff08H(x) + f(i) \uff09% Tablesize</p> <p>i\u662f\u51b2\u7a81\u6b21\u6570\uff0cf\u8868\u793a\u504f\u79fb\u91cf\uff0c\u5178\u578b\u7684\u662ff(i) = i, \u79f0\u4e3a</p> <ul> <li>\u7ebf\u6027\u63a2\u6d4bprobing</li> </ul> <p>\u5e73\u5747\u6210\u529f\u67e5\u627e\u6b21\u6570\uff1a\u679a\u4e3e\u6cd5</p> <p>\u5e73\u5747\u4e0d\u6210\u529f\u67e5\u627e\u6b21\u6570\uff1a\u6839\u636e\u54c8\u5e0c\u503c\u7684\u7279\u70b9\u5206\u7c7b \u5bf9\u6bcf\u7c7b\u6c42\u5e73\u5747\u503c</p> <ul> <li>\u4e8c\u6b21\u63a2\u6d4b\uff1a</li> </ul> <p>f(i) = i^2\u907f\u514d\u521d\u59cb\u805a\u96c6\uff0c\u4f46\u662f\u6709\u65f6\u5019\u4f1a\u627e\u4e0d\u5230\u7a7a\u4f4d</p> <p>\u5728\u4e0b\u5217\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0c\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4f4d\u7f6e\uff1a</p> <p>\u534a\u6ee1\uff0cTS = \u7d20\u6570</p> <ul> <li>double hashing:</li> </ul> <p>\u5c06f(i)\u8bbe\u8ba1\u4e3a\u65b0\u7684i*H2(x)</p> <p>\u5178\u578b\uff1aH2 = R-(x%R)</p> <ul> <li>rehash</li> </ul> <p>\u5c06\u8868\u6269\u5927\u4e00\u500d\u540e\u627e\u6700\u8fd1\u7684\u7d20\u6570</p> <p>rehash\u6761\u4ef6\uff1a</p> <ol> <li>\u5143\u7d20\u8d85\u8fc7\u4e00\u534a</li> <li>\u8d85\u8fc7load</li> <li>\u63d2\u5165\u5931\u8d25</li> </ol>"},{"location":"notes/lingo/cs61a/","title":"UCB CS61 A","text":""},{"location":"notes/lingo/cs61a/#lecture-1","title":"Lecture 1","text":"<ul> <li>what is computer science?</li> </ul> <p>what problem to solve using computation</p> <p>how to </p> <p>what techniques to effectively solve </p> <p>managing complexity</p> <ul> <li>mastering abstraction</li> <li>programming paradigms</li> </ul> <ul> <li>Types of expressions</li> </ul> <pre><code>#function call notation\n&gt;&gt;&gt;2015\n2015\n&gt;&gt;&gt;2000+15 #expression\n2015 #value\n</code></pre> <ul> <li>primitive expressions</li> </ul> <p>number numeral name string</p> <ul> <li>call expression</li> </ul> <p><code>operator</code> <code>(operands)</code></p> <p><code>fun</code> <code>argument</code></p> <p>nested expression --&gt;tree</p> <p>\u200b     </p>"},{"location":"notes/lingo/cs61a/#lecture-2-function","title":"Lecture 2 Function","text":"<ul> <li>Assignment statement</li> </ul> <p>bind names to values</p> <p><code>name</code> = <code>value</code></p> <p>use function :<code>from xxx import xx</code></p> <p>build your own :<code>def name(arguments):</code></p> <p>\u200b                   <code>return xx</code></p> <ul> <li>Environment Diagrams</li> </ul> <p>visualize the interpreter`s process</p> <ul> <li>Design Functions</li> </ul> <p>bind names to expressions</p> <p><code>def &lt;name&gt;(&lt;fomal parameter&gt;):</code> signature <code>return &lt; return expression &gt;</code> body</p> <p>Python uses a frame to define the body of a func\u2202</p> <p>which require the same indent for one suite of statement</p> <p>guide:</p> <p>give it an exact job</p> <p>don't repeat yourself </p> <p>define generally</p>"},{"location":"notes/lingo/cs61a/#lecture-3-control-and-iteration","title":"Lecture 3 Control and Iteration","text":""},{"location":"notes/lingo/cs61a/#print-and-none","title":"print and none","text":"<p>none represents nothing in python</p> <p>func the doesnt explicitly return a value return none</p> <p>like --&gt; print</p>"},{"location":"notes/lingo/cs61a/#pure-func","title":"pure func","text":"<p>just return value</p>"},{"location":"notes/lingo/cs61a/#non-pure-func","title":"non-pure func","text":"<p>have side effects</p>"},{"location":"notes/lingo/cs61a/#features-in-python","title":"features in python","text":"<p>// floordiv  <code>2013 // 10 = 201</code></p> <p>multiple assignments  <code>a=b=c=1</code></p> <p>multiple return </p> <p><code>a,b = func(x,y)</code></p>"},{"location":"notes/lingo/cs61a/#condition-statements","title":"Condition Statements","text":"<p>if :</p> <p>one if </p> <p>oneormore elif</p> <p>zeroorone else</p>"},{"location":"notes/lingo/cs61a/#boolean-context","title":"boolean context :","text":"<p>False: False, 0, ' ', None</p>"},{"location":"notes/lingo/cs61a/#iteration","title":"Iteration","text":""},{"location":"notes/lingo/cs61a/#while","title":"while:","text":"<p>search func:</p> <pre><code>def search(f):\n  x = 0\n  while not f(x):\n    x += 1\n    return x\n</code></pre> <p>inverse func:</p> <pre><code>def inverse(f):\n  return lambda y:search(lambda x:f(x) == y)\n</code></pre>"},{"location":"notes/lingo/cs61a/#control","title":"Control","text":"<p>funcs always evaluate all the components </p> <p>but controls just excuse part of it </p> <p>that's why there isn't if function</p>"},{"location":"notes/lingo/cs61a/#logical-operator","title":"logical operator","text":"<p>and == &amp;&amp;</p> <p>or == ||</p>"},{"location":"notes/lingo/cs61a/#lecture-4-higher-order-func","title":"Lecture 4 Higher-Order Func","text":"<p>assert statement: </p> <p><code>assert [!con], 'statement'</code></p>"},{"location":"notes/lingo/cs61a/#generalizing-process","title":"Generalizing Process","text":"<p>find the common piont of a sequence of funcs</p> <p>make different parts a func to be the argument as the higher func</p> <p>eg: summation</p> <pre><code>def summation(n, term):\n  sum, k = 0, 1\n  while k &lt;= n:\n    k += 1\n    sum += term(k)\n  return sum\n</code></pre> <p>uses term to define the elements of the summation </p> <p>--&gt;higher order func : </p> <p>take a func to be an element of other func</p> <p>return a func </p> <p>make adder:</p> <pre><code>def make_adder(n):\n  \"\"\"return a function that takes one argument k and returns k + n\"\"\"\n  def adder(k):\n    return k + n\n  return adder\n&gt;&gt;&gt;add_three == make_adder(3)\n&gt;&gt;&gt;add_three(4)\n7\n&lt;=&gt; make_adder(3)(4)\n</code></pre>"},{"location":"notes/lingo/cs61a/#function-composition","title":"Function Composition","text":"<p>compose func:</p> <pre><code>def compose1(f,g):\n  def h(x):\n    return f(g(x))\n</code></pre>"},{"location":"notes/lingo/cs61a/#func-currying","title":"Func Currying","text":"<p>transit a multi-arguments func to a single-argument higher order func</p> <pre><code>curry = lambda f: lambda x: lambda y: f(x, y) \n</code></pre>"},{"location":"notes/lingo/cs61a/#func-abstraction","title":"Func abstraction","text":""},{"location":"notes/lingo/cs61a/#arbitrary-number-arguments","title":"Arbitrary number arguments","text":"<pre><code>def printed(f):\n  def print_and_return(*args):\n    result = f(*args)\n    print('Result:', result)\n    return result \n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-5-environments","title":"Lecture 5 Environments","text":"<p>a sequence of frame </p> <p>global frame </p> <p>local frame  </p> <ul> <li> <p>every expression is evaluated in the context of an environment </p> </li> <li> <p>A name is always bound to the earliest frame`value of the current environment</p> </li> </ul> <pre><code>def square(square):\n  return mul(square, square)\nsquare(4)\n#when calling square(4), in f1 frame square doesnt go back to Global frame to find the value, but bound to 4 which is the earliest frame of the current environment \n</code></pre> <p></p>"},{"location":"notes/lingo/cs61a/#lambda-function","title":"Lambda function","text":"<p>is a expression return a function</p> <p>unnamed before</p> <p>cannot contain a statement </p> <pre><code>lambda [keyword]:[return expression using keyword]\n#eg:\nsquare = lambda x: x*x\n&gt;&gt;&gt;square(3)\n9\n&gt;&gt;&gt;(lambda x: x*x)(3)\n9\n</code></pre> <p>lambda is a name (square isn't created)</p> <p>but def creat a func called square</p>"},{"location":"notes/lingo/cs61a/#function-decorator","title":"Function Decorator","text":"<pre><code>@trace #@xx+func == xx(func)\ndef triple(x):\n  return 3*x\n\ndef trace(fn):\n  def traced:\n    \u2026\u2026a sequence of operation\n    retunrn fn\n  return traced\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-6-recursion","title":"Lecture 6 Recursion","text":""},{"location":"notes/lingo/cs61a/#mutual-recursion","title":"Mutual Recursion","text":"<pre><code>def split(n):\n  return n//10, n%10\n\n    \"\"\"Return the digit sum of n computed by the Luhn algorithm.\n    First: From the rightmost digit, which is the check digit, moving left, double the value\nof every second digit; if product of this doubling operation is greater than 9 (e.g., 7 *\n2 = 14), then sum the digits of the products (e.g., 10: 1 + 0 = 1, 14: 1 + 4 = 5) \n\n    &gt;&gt;&gt; luhn_sum(2)\n    2\n    &gt;&gt;&gt; luhn_sum(12)\n    4\n    &gt;&gt;&gt; luhn_sum(42)\n    10\n    &gt;&gt;&gt; luhn_sum(138743)\n    30\n    &gt;&gt;&gt; luhn_sum(5105105105105100) # example Mastercard\n    20\n    &gt;&gt;&gt; luhn_sum(4012888888881881) # example Visa\n    90\n    &gt;&gt;&gt; luhn_sum(79927398713) # from Wikipedia\n    70\n    \"\"\"\n  def luhn_sum(n):\n    if n &lt; 10:\n        return n\n    else:\n        all_but_last, last = split(n)\n        return luhn_sum_double(all_but_last) + last\n\ndef luhn_sum_double(n):\n    \"\"\"Return the Luhn sum of n, doubling the last digit.\"\"\"\n    all_but_last, last = split(n)\n    luhn_digit = sum_digits(2 * last)\n    if n &lt; 10:\n        return luhn_digit\n    else:\n        return luhn_sum(all_but_last) + luhn_digit\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-7-tree-recursion","title":"Lecture 7 Tree Recursion","text":"<p>makes more than one call of func</p> <pre><code>def compose1(f, g):\n    \"\"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef repeated(f, n):\n    \"\"\"Return the function that computes the nth application of func (recursively!).\n\n    &gt;&gt;&gt; add_three = repeated(lambda x: x + 1, 3)\n    &gt;&gt;&gt; add_three(5)\n    8\n       \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-8-sequence-and-data-abstraction","title":"Lecture 8 Sequence and Data Abstraction","text":""},{"location":"notes/lingo/cs61a/#list","title":"List","text":"<p>initialize :</p> <p><code>digits = [1, 2, 3, 4]</code></p> <p><code>digits[3] == getitem(digits, 3)</code></p> <p>concentrate and repeat :</p> <p><code>[5, 6] + 2*digits = [5, 6, 1, 2, 3, 4, 1, 2, 3, 4]</code></p> <p>List unpacking:</p> <p>list operations :</p> <p></p> <p></p>"},{"location":"notes/lingo/cs61a/#for-statement","title":"For Statement","text":"<pre><code>for &lt;name&gt; in &lt;expression&gt;:\n  &lt;suite&gt;\n #name can bu multiple if expression is mutiple\n#eg:\nfor x, y in [[1, 2], [3, 4]]:\n</code></pre>"},{"location":"notes/lingo/cs61a/#range","title":"Range","text":"<p>insert rangement on the left side of index</p> <p><code>range(-2, 2) -&gt; -2, -1, 0, 1</code></p> <p>including start value exclude end value</p> <p>list func:</p> <p>return back a list contain the element in a sequence</p>"},{"location":"notes/lingo/cs61a/#list-comprehensions","title":"List Comprehensions","text":"<pre><code>def divisor(n):\n  return [1] + [x in range(n) if n%x == 0]\n</code></pre>"},{"location":"notes/lingo/cs61a/#string","title":"String","text":"<p>quote:</p> <p>' / \" : the same </p> <p>\"\"\" : for multiple lines</p> <p>an element of a string is itself a string, but only one element</p> <pre><code>so:\n&gt;&gt;&gt;'here' in \"where`s it\"\nTrue\nbut:\n&gt;&gt;&gt;234 in [2, 3, 4, 5]\nFalse\n&gt;&gt;&gt;[2, 3, 4] in [2, 3, 4, 5]\nFalse\n</code></pre>"},{"location":"notes/lingo/cs61a/#data-abstraction","title":"Data abstraction","text":"<ul> <li>compound objects combine objects together</li> <li>a methodology by which funcs enforce an abstraction barrier between representation and use</li> </ul>"},{"location":"notes/lingo/cs61a/#abstraction-barriers","title":"Abstraction Barriers","text":""},{"location":"notes/lingo/cs61a/#dictionaries","title":"Dictionaries","text":"<pre><code>dic = {&lt;key&gt;: &lt;value&gt;, ...}\ndic[key] == value\n</code></pre> <ul> <li>keys can't be dictionaries or list</li> <li>dictionaies aren`t ordered</li> <li>two keys can't be equal</li> </ul>"},{"location":"notes/lingo/cs61a/#handling-iterables-functions","title":"Handling iterables functions:","text":"<p>zip(*iterables) \u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6309\u7167\u7d22\u5f15\u4f4d\u7f6e\u4e00\u4e00\u914d\u5bf9\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668</p> <p>enumerate(iterable, start=0)\uff1a\u8fd4\u56de\u4e00\u4e2a\u679a\u4e3e\u5bf9\u8c61\uff0c\u5305\u542b\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u4ee5\u53ca\u5bf9\u5e94\u7684\u7d22\u5f15\u503c\u3002\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a start \u53c2\u6570\u6765\u6307\u5b9a\u8d77\u59cb\u7d22\u5f15\u503c\u3002</p> <p>filter(function, iterable)\uff1a\u8fd4\u56de\u4e00\u4e2a\u7531\u6ee1\u8db3\u6307\u5b9a\u6761\u4ef6\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5143\u7d20\u7ec4\u6210\u7684\u8fed\u4ee3\u5668\u3002function \u53c2\u6570\u662f\u4e00\u4e2a\u7528\u4e8e\u7b5b\u9009\u5143\u7d20\u7684\u51fd\u6570\u3002</p> <p>map(function, *iterables)\uff1a\u5bf9\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u5e94\u7528\u6307\u5b9a\u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u7684\u8fed\u4ee3\u5668\u3002</p> <p>reduce(function, iterable[, initializer])\uff1a\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u4f9d\u6b21\u5e94\u7528\u6307\u5b9a\u7684\u4e8c\u5143\u51fd\u6570\u6765\u8fdb\u884c\u7d2f\u79ef\u8ba1\u7b97\u3002\u9700\u8981\u5bfc\u5165 functools \u6a21\u5757\u624d\u80fd\u4f7f\u7528\u3002</p> <p>sorted(iterable, key=None, reverse=False)\uff1a\u8fd4\u56de\u4e00\u4e2a\u6392\u5e8f\u540e\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u65b0\u5217\u8868\u3002\u53ef\u4ee5\u901a\u8fc7 key \u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u51fd\u6570\u6765\u751f\u6210\u6392\u5e8f\u7684\u5173\u952e\u5b57\u3002</p> <p>any(iterable)\uff1a\u5982\u679c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u4e3a\u771f\uff0c\u5219\u8fd4\u56de True\uff1b\u5426\u5219\u8fd4\u56de False\u3002</p> <p>all(iterable)\uff1a\u5982\u679c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e3a\u771f\uff0c\u5219\u8fd4\u56de True\uff1b\u5426\u5219\u8fd4\u56de False\u3002</p>"},{"location":"notes/lingo/cs61a/#lecture-9-functional-decomposition-debugging","title":"Lecture 9 Functional Decomposition &amp; Debugging","text":""},{"location":"notes/lingo/cs61a/#handling-errors","title":"Handling Errors","text":""},{"location":"notes/lingo/cs61a/#exceptions","title":"exceptions:","text":"<p>assertion statement</p> <p>raise statement: </p> <p><code>raise &lt;statement&gt;</code></p> <pre><code>#eg:\nraise TypeError('bad argument')\n</code></pre> <ol> <li>TypeError:  a func was passed in the wrong num/type of argument</li> <li>NameError: a name wasn't found</li> <li>KeyError: dic doesn't have the key</li> <li>RuntimeError: </li> </ol>"},{"location":"notes/lingo/cs61a/#try-statement","title":"Try Statement","text":"<pre><code>def invert(x):\n  y = 1/x\n  print('Never printed if x is 0')\n  return y\ndef invert_safe(x):\n  try:\n    return invert(x)\n  except ZeroDivisionError as e:\n    print('handled', e)\n    return 0  #return str(e)\n\"\"\"\n&gt;&gt;&gt;invert_safe(0)\nhandled division by 0\n&gt;&gt;&gt;invert_safe(1/0)\nError:....\n#Error hapends before excuting func\n\n\"\"\"\n</code></pre> <p>Reduce a sequence to a value</p> <pre><code>def reduce(f, sq, initial):\n  \"\"\"Combine elements of sq starting with initial using f(a two arguments func)#\u5f52\u7ea6\"\"\"\n  for x in sq:\n    initial = f(initial, x)\n  return initial\n\n    #recursive version\n  if not sq:\n    return initial\n  else:\n    sq, initial = sq[1:], f(initail, sq[0])\n\ndef divide_all(n, ds):\n  try:\n    return reduce(truediv, ds, n)\n  except:ZeroDivisionError:\n    return float('inf')\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-10-trees","title":"Lecture 10 Trees","text":""},{"location":"notes/lingo/cs61a/#slicing","title":"slicing:","text":"<pre><code>odds = [1, 3, 5, 7]\n[odds[i] for i in range(1, 3)]\n==\nodds[1:3]\n== [3, 5]\n</code></pre> <p>slicing creats a new list</p>"},{"location":"notes/lingo/cs61a/#sequence-aggregation","title":"Sequence Aggregation","text":"<p>sum  max</p> <p>input can be values or interables such as list</p> <p><code>max(range(10), key = lambda x: f(x))</code></p> <p>key: return an x within 0,9 which gets the biggest f(x)</p> <p>all:</p> <p>return True if bool(x) is True </p>"},{"location":"notes/lingo/cs61a/#tree-abstraction","title":"Tree Abstraction","text":"<p>Two discription</p> <p>Recursive--&gt;wooden tree</p> <p>Relative--&gt;family tree</p> <p></p> <p>**A tree has a root label and a list of branches **</p> <p>each branch is a tree </p> <pre><code>#implement the tree\n\"\"\"\n&gt;&gt;&gt;tree(3, [tree(1), tree(2, [tree(1), tree(1)])])\n[3, [1], [2, [1], [1]]]\n----&gt;\n         3\n       1   2\n          1  1\n\"\"\"\ndef tree(label, branches=[]):\n  for branch in branches:\n    assert is_tree(branch)\n  return [label] + list(branches)\n\ndef label(tree):\n  return tree[0]\n\ndef branches(tree):\n  return tree[1:]\n\ndef is_tree(tree):\n  if type(tree) != list or len(tree) &lt; 1:\n    return False\n  for branch in branches(tree):\n    if not is_tree(branch):\n      return False #resursively check\n  return True\n\ndef is_leaf(tree):\n  return not branches(tree)#check if tree has a branch\n\ndef count_leaves(t):\n  if is_leaf(t):\n    return 1\n  else:\n    branches_count = [count_leaves(b) for b in branches(t)]\n  return sum(branches_count)\n\ndef leaves(tree):\n  \"\"\"Return all the leaves of the tree\"\"\"\n  if is_leaf(tree):\n    return [label(tree)]\n  else:\n    return sum([leaves(b) for b in branches(tree)], [])\n  \"\"\"\n  &gt;&gt;&gt;sum([[1], [2, 3]], []) #use sum(, []) to combine list\n  [1, 2, 3]\n  \"\"\"\ndef increment_leaves(t):\n  if is_leaf(t):\n    return tree(label(t)+1)\n  else:\n    branches = [increment_leaves(b) for b in branches(t)]\n    return tree(label(t), branches)\ndef increment(t):\n  return tree(label(t)+1, [increment(b) for b in branches(t)])\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-11-mutable-sequences","title":"Lecture 11 Mutable Sequences","text":""},{"location":"notes/lingo/cs61a/#objects","title":"Objects","text":"<p>\u2022 Objects represent information </p> <p>\u2022 They consist of data and behavior, bundled together to create abstractions </p> <p>\u2022 Objects can represent things, but also properties, interactions, &amp; processes</p> <p>\u2022 A type of object is called a class; classes are first-class values in Python</p> <ul> <li>Object-oriented programming: </li> <li>A metaphor for organizing large programs</li> <li>Special syntax that can improve the composition of programs</li> </ul> <p>In Python, every value is an object </p> <p>All objects have attributes(\u5c5e\u6027)</p> <p>A lot of data manipulation happens through object methods</p> <p>Functions do one thing; objects do many related things</p>"},{"location":"notes/lingo/cs61a/#tuples-and-sequences","title":"Tuples and Sequences","text":"<p><code>tuple --&gt;(1, 2, 3, 4)</code></p> <p><code>sequence --&gt;[1, 2, 3, 4]</code></p> <p>sequence is mutable</p> <p>tuple is immutable</p> <p></p>"},{"location":"notes/lingo/cs61a/#mutation","title":"Mutation","text":"<p>Equality and Identity</p> <pre><code>&lt;exp0&gt; is &lt;exp1&gt;\nevaluates True if they evaluate to the same object\n&lt;exp0&gt; == &lt;exp1&gt;\nevaluates True if they evaluate to equal values\n#eg:\n&gt;&gt;&gt;[10] == [10]\nTrue\n&gt;&gt;&gt;a = [10]\n&gt;&gt;&gt;b = [10]\n&gt;&gt;&gt;a == b\nTrue\n&gt;&gt;&gt;a is b\nFalse\n&gt;&gt;&gt;a.append(1)\n&gt;&gt;&gt;a\n[10, 1]\n&gt;&gt;&gt;b\n[10]   #change doesnt happen between diff objects\n&gt;&gt;&gt;b = a\n&gt;&gt;&gt;a.append[1]\n&gt;&gt;&gt;b\n[10, 1, 1]   #change happens because a is b, they are things with diff names\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-14-mutable-functions","title":"Lecture 14 Mutable Functions","text":"<p>Assignment in the current frame cannot affect values in the parent frame</p> <p>to solve this --&gt;nonlocal assignment</p> <pre><code>def make_withdraw(balance):\n  def withdraw(amount):\n    nonlocal balence # this statement means change will affect balance in \"def make_withdraw\" \n    if amount &gt; balance:\n      return 'Insuffient funds'\n    balance = balance - amount\n    return balance\n  return withdraw\n</code></pre> <p>when re-binding a nonlocal value </p> <p>it will return to find the frame which the name was first binded</p> <p>--&gt; Future assignments to that name change its pre-existing binding in the first non-local frame of the current environment in which that name is bound.</p> <ul> <li>a nonlocal name has to appear in previous frame but not in current frame</li> </ul> <p>another way: creat a list (list is also mutable)</p>"},{"location":"notes/lingo/cs61a/#python-particulars","title":"Python Particulars:","text":"<ul> <li>Python pre-computes which frame contains each name before excuting the body of a func</li> <li>Within the body of a func, all instances of a name must refer to the same name</li> </ul> <p>Func mutation will cause referential transparency lost</p>"},{"location":"notes/lingo/cs61a/#lecture-14-iterators-generators","title":"Lecture 14 Iterators &amp; Generators","text":""},{"location":"notes/lingo/cs61a/#iterate","title":"Iterate:","text":"<pre><code>iter(iterable s)#turn s into a iterator\nnext(iterator)#go to the next element of s\n</code></pre> <p>over dictionaries :</p> <pre><code>d = {'one':1, 'two':2}\nk = iter(d.keys())\nv = iter(d.values())\ni = iter(d.items())\n&gt;&gt;&gt;next(k)\none\n&gt;&gt;&gt;next(v)\n1\n&gt;&gt;&gt;next(i)\n('one', 1)\n</code></pre> <p>change size of a dictionary while iterating it will cause runtime error --&gt;need to build a new iterator</p>"},{"location":"notes/lingo/cs61a/#generator","title":"Generator","text":"<p>adv: compute lazily(compute when needed)</p> <p>func uses yield to replace return</p> <p>yield from &lt; iterable &gt; can yield directly an iterable</p> <pre><code>def countdown(x):\n  if x &gt; 0:\n    yield x\n    for k in countdown(x-1):\n      yield k\n    &lt;=&gt;\n    yield from countdown(x-1)#avoid using for iterator\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-15-objects","title":"Lecture 15 Objects","text":""},{"location":"notes/lingo/cs61a/#object-construction","title":"Object construction","text":"<pre><code>class Account:\n  def __init__(self, account_holder):\n    self.balance = 0\n    self.holder = account_holder\n</code></pre> <p>__ init __ is a constructor </p> <p>self is the first argument</p>"},{"location":"notes/lingo/cs61a/#methods","title":"Methods","text":"<p>is an attribute and a function</p> <pre><code>...\n    def deposit(self, amount):\n    self.balance = self.balance + amount \n    return self.balance\n</code></pre> <p><code>Object + Function = Bound Method</code></p> <p>Bound method , which couple together a func and the obj on which that method will be invoked </p> <pre><code>&gt;&gt;&gt;type(Account.deposit)\n&lt;class 'function'&gt;\n&gt;&gt;&gt;type(tom_account.deposit)\n&lt;class 'method'&gt;\n</code></pre>"},{"location":"notes/lingo/cs61a/#attributes","title":"Attributes","text":"<p>use . notation to access or</p> <p>funcs : getattr(&lt; class &gt;, &lt; attri &gt;)</p> <p>if we add this to a class:</p> <pre><code>class Account:\n  interest = 0.02\n  def __init__:\n    ...\n</code></pre> <p>we say interest is a class attribute, rather a instance one</p> <p>and when finding attributes, instance is prior to calss </p> <p></p>"},{"location":"notes/lingo/cs61a/#lecture-16-inheritance","title":"Lecture 16 Inheritance","text":"<p>relating classes together </p> <pre><code>class &lt;subclass&gt;(&lt;base class&gt;):\n  &lt;suite&gt;\n</code></pre> <p>when creating a subclass just put the different part in the suite</p> <p>Inheritance represents a is-a relationship</p> <p>eg. checkaccount is an account</p>"},{"location":"notes/lingo/cs61a/#lecture-17-linked-lists-trees","title":"Lecture 17 Linked lists &amp; Trees","text":"<pre><code>class Link:\n  empty = ()\n  def __init__(self, first, rest = empty):\n    assert rest is Link.empty or isinstance(rest, Link)\n    self.first = first\n    self.rest = rest\n  def __getitem__(self, i):\n    if i == 0:\n      return self.first\n    else:\n      return self.rest[i-1]\n  def __len__(self):\n    return len(self.rest)+1\n    @property \n  def second(self):\n    return self.rest.first\n  @second.setter\n  def second(self, value):\n    self.rest.first = value\n</code></pre> <p><code>isinstance(a, class b)</code> is a builtin func to check if a is an instance of b or inherent from b</p>"},{"location":"notes/lingo/cs61a/#tree-class","title":"Tree Class","text":"<pre><code>class Tree:\n  def __init__(self, label, branches=[]):\n    self.label = label\n    for branch in branches:\n      assert isinstance(branch, Tree)\n    self.branches = list(branches)\n</code></pre>"},{"location":"notes/lingo/cs61a/#memorization","title":"Memorization","text":"<pre><code>def memo(f):\n  cache = {}\n  def memorized(n):\n    if n not in cache:\n      cache[n]=f(n)\n    return chache[n]\n  return memorized\n</code></pre>"},{"location":"notes/lingo/cs61a/#circle-linked-list","title":"Circle Linked List","text":"<p>\u5728\u94fe\u8868\u4e2d\u5b58\u5728\u5faa\u73af\u610f\u5473\u7740\u94fe\u8868\u4e2d\u7684\u67d0\u4e9b\u8282\u70b9\u901a\u8fc7\u6307\u9488\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u8def\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u4e86\u94fe\u8868\u4e2d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u4ece\u800c\u5f62\u6210\u4e86\u4e00\u4e2a\u95ed\u5408\u7684\u73af\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5355\u5411\u94fe\u8868\uff0c\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u6307\u9488\u6307\u5411\u4e86\u94fe\u8868\u4e2d\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u6700\u7ec8\u5bfc\u81f4\u56de\u5230\u4e86\u4e4b\u524d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u5faa\u73af\u3002</p> <p>\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u94fe\u8868\uff1a</p> <p>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;2-&gt;circle</p> <p>solution:</p> <p>double pointer:</p> <pre><code>#use a faster pointer and a slower one, faster moves two steps onetime and slower moves one step onetime, if circle exsits, two pointer will meet eventually.\ndef has_circle(link):\n  p_slow, p_fast = link, link\n    while p_fast != Link.empty:\n        p_slow = p_slow.rest\n        if p_fast.rest != Link.empty:\n            p_fast = p_fast.rest.rest\n            if p_fast == p_slow:\n                return True\n        else:\n            break\n    return False\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-18-interfaces","title":"Lecture 18 Interfaces","text":""},{"location":"notes/lingo/cs61a/#string-representation","title":"String representation","text":"<ul> <li><code>str</code> to humans</li> <li><code>repr</code> to Python interpreter</li> </ul>"},{"location":"notes/lingo/cs61a/#lecture-19-scheme","title":"Lecture 19 Scheme","text":"<p>Scheme consists of expressions</p> <p>primitive expressions and combinations</p>"},{"location":"notes/lingo/cs61a/#special-forms","title":"Special Forms","text":"<ul> <li>If : (if &lt; judge &gt; &lt; result &gt; &lt; alter &gt;)</li> <li>and or :(and/or e1 e2 ...)</li> <li>binding :</li> <li>(define &lt; symbol &gt; &lt; expression &gt;)</li> <li>new procedures :(define (&lt; symbol &gt; &lt; formal parameters &gt;) &lt; body &gt;)</li> </ul>"},{"location":"notes/lingo/cs61a/#lambda-expressions","title":"Lambda Expressions","text":"<p><code>(lambda(formal parameter) body)</code></p> <pre><code>(define (plus4 x)(+ x 4))\n==\n(define plus4(lambda(x) (+ x 4)))\n</code></pre>"},{"location":"notes/lingo/cs61a/#scheme-lists","title":"Scheme Lists","text":"<p>is same as Python`s linked list</p> <pre><code># x = (cons 2 1)-&gt; creates a list x:2-&gt;1\n# (car x) -&gt; return the first of x: 2\n# (cdr x) -&gt; return the rest of x: 1\n# nil : the empty list\n</code></pre>"},{"location":"notes/lingo/cs61a/#symbolic","title":"Symbolic","text":"<p>single  <code>`</code>  used on the left side of the element is to express itself </p>"},{"location":"notes/lingo/cs61a/#programming-language","title":"Programming Language","text":"<p>a programming language has :</p> <ul> <li>Syntax:\u8bed\u6cd5</li> <li>Semantics:\u8bed\u4e49</li> </ul> <p>To create a new one, need:</p> <ul> <li>Specification: a document describes S&amp;S</li> <li>Canonical Implementation : an interpreter or compiler</li> </ul>"},{"location":"notes/lingo/cs61a/#lecture-20-interpreters","title":"Lecture 20 Interpreters","text":""},{"location":"notes/lingo/cs61a/#lecture-21-more-scheme","title":"Lecture  21 More Scheme","text":""},{"location":"notes/lingo/cs61a/#scope","title":"Scope:","text":"<p>lexical: the parent frame is where the funcs defined(Python Scheme )</p> <p>dynamic: the parent frame is where the funcs called</p>"},{"location":"notes/lingo/cs61a/#tail-recursive","title":"tail recursive","text":""},{"location":"notes/lingo/cs61a/#lecture-22-macros","title":"Lecture 22 Macros","text":"<p>new kinds of special form </p> <pre><code>eg:\n(define-macro (twice expr)\n    (list 'begin expr expr))\n#begin means do all of the things\n&gt;(twice (print 2))\n2 \n2\nduplicate before evaluating/\notherwise:\n(define (twice expr)(list 'begin expr expr))\n&gt;(twice (print 2))\nNone\nNone\n</code></pre> <p>define for statement:</p> <pre><code>(define-macro(for sym vals expr)\n    list 'map (list 'lambda (list sym) expr) vals)\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-23-streams","title":"Lecture 23 Streams","text":"<p>streams are lazy lists in scheme</p> <pre><code>;building a stream range:\n(define (range-stream a b)\n  (if (&gt;= a b)\n      nil\n      (cons-stream a (range-stream (+ a 1) b))))\n</code></pre>"},{"location":"notes/lingo/cs61a/#lecture-24-declarative-programming","title":"Lecture 24 Declarative Programming","text":""},{"location":"notes/lingo/cs61a/#sql","title":"SQL","text":""},{"location":"notes/lingo/verilog/","title":"Verilog","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u4e00\u4e9b\u6211\u5728\u5f00\u59cbCO_2024\u540e\u5f00\u59cb\u8bb0\u5f55\u7684Verilog\u8bed\u6cd5\u7b14\u8bb0\uff0c\u53ef\u80fd\u4e0d\u662f\u592a\u7cfb\u7edf\uff0c\u4f46\u662f\u6211\u4f1a\u5c3d\u91cf\u628a\u6211\u5b66\u5230\u7684\u4e1c\u897f\u8bb0\u5f55\u4e0b\u6765\u3002</p>"},{"location":"notes/lingo/verilog/#grammar","title":"Grammar","text":"<ul> <li>Module <pre><code>module module_name(\n    input wire input_name,\n    output reg output_name\n);\n    // statements  \nendmodule\n</code></pre></li> <li>Always block <pre><code>always @(posedge clk) begin\n    // statements\nend\n</code></pre> \u5f53always\u4e2d\u7684\u6761\u4ef6\u6ee1\u8db3\u65f6\uff0c\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u8bed\u53e5\u3002 \u5fc5\u987b\u4f7f\u7528always block\u7684\u60c5\u51b5\uff1a 1. \u65f6\u5e8f\u903b\u8f91 2. \u590d\u6742\u5230\u4e0d\u80fd\u7528assign\u7684\u903b\u8f91</li> </ul> <p><code>always</code> \u5757\u9002\u7528\u4e8e\u63cf\u8ff0\u9700\u8981\u65f6\u949f\u8fb9\u6cbf\u89e6\u53d1\u7684\u884c\u4e3a\u6216\u8005\u590d\u6742\u7684\u903b\u8f91\u8ba1\u7b97\uff0c\u800c\u5bf9\u4e8e\u7b80\u5355\u7684\u7ec4\u5408\u903b\u8f91\u548c\u4e0d\u6d89\u53ca\u65f6\u949f\u7684\u7b80\u5355\u64cd\u4f5c\uff0c\u5219 <code>assign</code> \u8bed\u53e5\u66f4\u5408\u9002\u3002</p> <ul> <li>Wire &amp; Reg <pre><code>wire a;\nassign a = b &amp; c;\n\nreg [7:0] count;\nalways @(posedge clk) begin\n  count &lt;= count + 1;\nend\n</code></pre></li> </ul> <p><code>wire</code> : \u9002\u7528\u4e8e\u7ec4\u5408\u903b\u8f91\u548c\u6a21\u5757\u95f4\u7684\u8fde\u63a5 \u4e0d\u50a8\u5b58\u503c\u53ea\u8868\u793a\u4fe1\u53f7\u7684\u8fde\u63a5 \u7528assign\u8bed\u53e5\u8d4b\u503c</p> <p><code>reg</code> :  \u9002\u7528\u4e8e\u9700\u8981\u5b58\u50a8\u72b6\u6001\u7684\u65f6\u5e8f\u903b\u8f91 \u53ef\u4ee5\u5b58\u50a8\u503c\uff0c\u901a\u5e38\u7528\u4e8e\u63cf\u8ff0\u5bc4\u5b58\u5668\u3001\u8ba1\u6570\u5668\u7b49 \u7528always\u8bed\u53e5\u8d4b\u503c,\u6cbf\u65f6\u949f\u89e6\u53d1</p> <ul> <li>= and &lt;= <code>=</code> : blocking assignment <code>&lt;=</code> : non-blocking assignment     <code>=</code> \u4f1a\u5728\u540c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u7acb\u5373\u8d4b\u503c\uff0c\u800c <code>&lt;=</code> \u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8d4b\u503c\u3002</li> </ul> <p><code>Slice</code> \u6a21\u5757</p> <p>\u4e3b\u8981\u7528\u4e8e\u5c06\u4e00\u4e2a\u4fe1\u53f7\u5206\u89e3\u4e3a\u591a\u4e2a\u4f4d\uff0c\u6216\u8005\u53d6\u4fe1\u53f7\u7684\u67d0\u4e00\u90e8\u5206\u3002</p> <pre><code>// \u5047\u8bbe\u6709\u4e00\u4e2a32\u4f4d\u7684\u8f93\u5165\u4fe1\u53f7 Din\nwire [31:0] Din;\nwire [7:0] Dout;\n\n// \u4ece Din \u4e2d\u63d0\u53d6\u7b2c7\u5230\u7b2c0\u4f4d\nassign Dout = Din[7:0];\n\n//\u53ea\u53d6\u7b2c7\u4f4d\nassign Dout = Din[7];\n</code></pre> <p><code>Utility Vector Logic</code> \u6a21\u5757</p> <p>Utility Vector Logic \u6a21\u5757\u7528\u4e8e\u57fa\u672c\u7684\u903b\u8f91\u8fd0\u7b97\uff0c\u5982 AND\u3001OR\u3001NOT \u7b49\u64cd\u4f5c\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u5199\u903b\u8f91\u8fd0\u7b97\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>Utility Vector Logic</code> \u6a21\u5757\u3002</p> <pre><code>// \u5047\u8bbe\u6709\u4e24\u4e2a\u8f93\u5165\u4fe1\u53f7 A \u548c B\uff0c\u5206\u522b\u662f1\u4f4d\nwire A, B;\nwire Res;\n\n// \u8fdb\u884c\u903b\u8f91 AND \u8fd0\u7b97\nassign Res = A &amp; B; // \u903b\u8f91 AND\n\n// \u5982\u679c\u662f NOT \u8fd0\u7b97\nassign Res = ~A; // \u903b\u8f91 NOT\n\n// \u5176\u4ed6\u8fd0\u7b97\u5982 OR\u3001XOR\nassign Res = A | B; // \u903b\u8f91 OR\nassign Res = A ^ B; // \u903b\u8f91 XOR\n</code></pre> <p><code>Concat</code> \u6a21\u5757</p> <p>Concat \u6a21\u5757\u7528\u4e8e\u5c06\u591a\u4e2a\u4fe1\u53f7\u62fc\u63a5\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u4fe1\u53f7\u3002\u5b83\u5728\u5904\u7406\u591a\u4e2a\u5c0f\u4fe1\u53f7\u7ec4\u5408\u4e3a\u4e00\u4e2a\u5927\u4fe1\u53f7\u65f6\u975e\u5e38\u6709\u7528\u3002</p> <p>\u76f4\u63a5\u7528 <code>{}</code> \u6765\u62fc\u63a5\u4fe1\u53f7 <pre><code>// \u5047\u8bbe\u6709\u4e24\u4e2a\u4fe1\u53f7 A \u548c B\uff0c\u5206\u522b\u662f8\u4f4d\nwire [7:0] A;\nwire [7:0] B;\nwire [15:0] Dout;\n\n// \u5c06 A \u548c B \u62fc\u63a5\uff0c\u5f62\u621016\u4f4d\u7684 Dout\nassign Dout = {A, B}; // A \u4f4d\u4e8e\u9ad88\u4f4d\uff0cB \u4f4d\u4e8e\u4f4e8\u4f4d\n\n```Constant``` \u6a21\u5757\n\nConstant \u6a21\u5757\u7528\u4e8e\u751f\u6210\u56fa\u5b9a\u503c\u7684\u5e38\u6570\u4fe1\u53f7\u3002\u5728 Verilog \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u53c2\u6570\u6216\u76f4\u63a5\u8d4b\u503c\u6765\u5b9e\u73b0\u3002\n\n```verilog\n// \u76f4\u63a5\u8d4b\u503c\nassign Dout = 16'h1234; // 16'h1234 \u8868\u793a16\u8fdb\u5236\u7684 1234\n\n// \u7528\u53c2\u6570\nparameter Dout = 16'h1234;\n\n// \u751f\u6210\u4e00\u4e2a4\u4f4d\u7684\u5e38\u6570 4'b1010\nwire [3:0] Const;\nassign Const = 4'b1010;\n</code></pre></p> <ul> <li>FSM </li> </ul> <p>\u6709\u9650\u72b6\u6001\u673a\u662f\u4e00\u79cd\u6570\u5b66\u6a21\u578b\uff0c\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u7cfb\u7edf\u5728\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u6362\u53ca\u5176\u884c\u4e3a\u3002\u5b83\u7531\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a</p> <ul> <li>\u72b6\u6001\u96c6\uff1a\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002</li> <li>\u8f93\u5165\u96c6\uff1a\u72b6\u6001\u673a\u6839\u636e\u8f93\u5165\u51b3\u5b9a\u4e0b\u4e00\u6b65\u7684\u72b6\u6001\u3002</li> <li>\u72b6\u6001\u8f6c\u79fb\u89c4\u5219\uff1a\u5f53\u524d\u72b6\u6001\u548c\u8f93\u5165\u7684\u7ec4\u5408\u51b3\u5b9a\u72b6\u6001\u7684\u53d8\u5316\u3002</li> <li>\u521d\u59cb\u72b6\u6001\uff1a\u72b6\u6001\u673a\u542f\u52a8\u65f6\u7684\u72b6\u6001\u3002</li> <li>\u8f93\u51fa\uff1a\u72b6\u6001\u673a\u53ef\u4ee5\u4ea7\u751f\u8f93\u51fa\uff0c\u8f93\u51fa\u901a\u5e38\u548c\u5f53\u524d\u72b6\u6001\u6216\u8f93\u5165\u6709\u5173\u3002</li> </ul> <pre><code>module fsm_example (\n    input wire clk,          // \u65f6\u949f\u4fe1\u53f7\n    input wire reset,        // \u5f02\u6b65\u590d\u4f4d\u4fe1\u53f7\n    input wire in,           // \u8f93\u5165\u4fe1\u53f7\n    output reg [1:0] state,  // \u5f53\u524d\u72b6\u6001\u8f93\u51fa\n    output reg out           // \u72b6\u6001\u673a\u8f93\u51fa\u4fe1\u53f7\n);\n\n// \u72b6\u6001\u7f16\u7801\nlocalparam S0 = 2'b00;  // \u72b6\u6001 0\nlocalparam S1 = 2'b01;  // \u72b6\u6001 1\nlocalparam S2 = 2'b10;  // \u72b6\u6001 2\n\nreg [1:0] next_state;   // \u4e0b\u4e00\u4e2a\u72b6\u6001\n\n// \u72b6\u6001\u8f6c\u79fb\u903b\u8f91 (\u7ec4\u5408\u903b\u8f91)\nalways @(*) begin\n    case (state)\n        S0: begin\n            if (in)\n                next_state = S1;\n            else\n                next_state = S0;\n        end\n\n        S1: begin\n            if (in)\n                next_state = S2;\n            else\n                next_state = S0;\n        end\n\n        S2: begin\n            if (in)\n                next_state = S2;\n            else\n                next_state = S1;\n        end\n\n        default: next_state = S0;  // \u4efb\u4f55\u672a\u77e5\u72b6\u6001\u56de\u5230 S0\n    endcase\nend\n\n// \u72b6\u6001\u5bc4\u5b58\u5668 (\u65f6\u5e8f\u903b\u8f91)\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state &lt;= S0;  // \u590d\u4f4d\u65f6\u8fdb\u5165\u521d\u59cb\u72b6\u6001 S0\n    else\n        state &lt;= next_state;  // \u5426\u5219\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\nend\n\n// \u8f93\u51fa\u903b\u8f91 (Moore \u578b\uff0c\u53ea\u4f9d\u8d56\u4e8e\u5f53\u524d\u72b6\u6001)\nalways @(state) begin\n    case (state)\n        S0: out = 0;\n        S1: out = 1;\n        S2: out = 0;\n        default: out = 0;\n    endcase\nend\n\nendmodule\n</code></pre>"}]}